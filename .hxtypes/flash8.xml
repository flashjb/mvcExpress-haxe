<haxe>
	<class path="Array" params="T" file="/usr/lib/haxe/std/Array.hx" extern="1">
		<filter public="1" set="method"><f a="f">
	<f a="">
		<c path="Array.T"/>
		<x path="Bool"/>
	</f>
	<c path="Array"><c path="Array.T"/></c>
</f></filter>
		<map public="1" params="S" set="method"><f a="f">
	<f a="">
		<c path="Array.T"/>
		<c path="map.S"/>
	</f>
	<c path="Array"><c path="map.S"/></c>
</f></map>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="Array.T"/></t></f>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of [this] Array.
		
		The elements are not copied and retain their identity, so
		a[i] == a.copy()[i] is true for any valid i. However, a == a.copy() is
		always false.</haxe_doc>
		</copy>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurence of [x] in [this] Array.
		
		This operation modifies [this] Array in place.
		
		If [x] is found by checking standard equality, it is removed from [this]
		Array and all following elements are reindexed acoordingly. The function
		then returns true.
		
		If [x] is not found, [this] Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<insert public="1" set="method">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element [x] at the position [pos].
		
		This operation modifies [this] Array in place.
		
		The offset is calculated like so:
			
		- If [pos] exceeds [this].length, the offset is [this].length.
		- If [pos] is negative, the offset is calculated from the end of [this]
		Array, i.e. [this].length + [pos]. If this yields a negative value,
		the offset is 0.
		- Otherwise, the offset is [pos].
		
		If the resulting offset does not exceed [this].length, all elements from
		and including that offset to the end of [this] Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element [x] at the start of [this] Array.
		
		This operation modifies [this] Array in place.
		
		[this].length and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of [this] Array.
		
		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use Std.string() to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<splice public="1" set="method">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes [len] elements from [this] Array, starting at and including
		[pos], an returns them.
		
		This operation modifies [this] Array in place.
		
		If [len] is < 0 or [pos] exceeds [this].length, the result is the empty
		Array [].
		
		If [pos] is negative, its value is calculated from the end	of [this]
		Array by [this].length + [pos]. If this yields a negative value, 0 is
		used instead.
		
		If the sum of the resulting values for [len] and [pos] exceed
		[this].length, this operation will affect the elements from [pos] to the
		end of [this] Array.
		
		The length of the returned Array is equal to the new length of [this]
		Array subtracted from the original length of [this] Array. In other
		words, each element of the original [this] Array either remains in
		[this] Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts [this] Array according to the comparison function [f], where
		[f(x,y)] returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.
		
		This operation modifies [this] Array in place.
		
		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, haxe.ds.sort.MergeSort.sort() can be used instead.
		
		If [f] is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of [this] Array, starting at and
		including [pos], up to but not including [end].
		
		This operation does not modify [this] Array.
		
		The elements are not copied and retain their identity.
		
		If [end] is omitted or exceeds [this].length, it defaults to the end of
		[this] Array.
		
		If [pos] or [end] are negative, their offsets are calculated from the
		end	of [this] Array by [this].length + [pos] and [this].length + [end]
		respectively. If this yields a negative value, 0 is used instead.
		
		If [pos] exceeds [this].length or if [end} exceeds or equals [pos],
		the result is [].</haxe_doc>
		</slice>
		<shift public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the first element of [this] Array and returns it.
		
		This operation modifies [this] Array in place.
		
		If [this] has at least one element, [this].length and the index of each
		remaining element is decreased by 1.
		
		If [this] is the empty Array [], null is returned and the length remains
		0.</haxe_doc>
		</shift>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of [this] Array.
		
		This operation modifies [this] Array in place.
		
		If [this].length < 2, [this] remains unchanged.]]></haxe_doc>
		</reverse>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element [x] at the end of [this] Array and returns the offset
		it was added at.
		
		This operation modifies [this] Array in place.
		
		[this].length increases by 1.</haxe_doc>
		</push>
		<pop public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the last element of [this] Array and returns it.
		
		This operation modifies [this] Array in place.
		
		If [this] has at least one element, [this].length will decrease by 1.
		
		If [this] is the empty Array [], null is returned and the length remains
		0.</haxe_doc>
		</pop>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of [this] Array, with [sep] separating
		each element.
		
		The result of this operation is equal to Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1]).
		
		If [this] is the empty Array [], the result is the empty String "". If
		[this] has exactly one element, the result is equal to a call to
		Std.string(this[0]).
		
		If [sep] is null, the result is unspecified.</haxe_doc>
		</join>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of [a] to the elements of
		[this] Array.
		
		This operation does not modify [this] Array.
		
		If [a] is the empty Array [], a copy of [this] Array is returned.
		
		The length of the returned Array is equal to the sum of [this].length
		and [a].length.
		
		If [a] is null, the result is unspecified.</haxe_doc>
		</concat>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of [this] Array.</haxe_doc>
		</length>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API. On the server side, it's often better to use a [List] which
	is less memory and CPU consuming, unless you really need indexed access.</haxe_doc>
	</class>
	<abstract path="Class" params="T" file="/usr/lib/haxe/std/Class.hx">
		<haxe_doc>An abstract type that represents a Class.
	
	See [Type] for the haXe Reflection API.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="/usr/lib/haxe/std/Date.hx" extern="1">
		<now public="1" set="method" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" set="method" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a Date from timestamp [t].</haxe_doc>
		</fromTime>
		<fromString public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a Date from a formated string [s], with the following accepted
		formats:
			- [YYYY-MM-DD hh:mm:ss]
			- [YYYY-MM-DD]
			- [hh:mm:ss]
		The first two formats are expressed in local time, the third in UTC
		Epoch.</haxe_doc>
		</fromString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of [this] Date, by using the
		standard format [YYYY-MM-DD HH:MM:SS]. See [DateTools.format] for
		other formating rules.</haxe_doc>
		</toString>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of [this] Date (0-6 range).</haxe_doc>
		</getDay>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of [this] Date (1-31 range).</haxe_doc>
		</getDate>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of [this] Date (0-11 range).</haxe_doc>
		</getMonth>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of [this] Date (4-digits).</haxe_doc>
		</getFullYear>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of the [this] Date (0-59 range).</haxe_doc>
		</getSeconds>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of [this] Date (0-59 range).</haxe_doc>
		</getMinutes>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of [this] Date (0-23 range).</haxe_doc>
		</getHours>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp of the date. It might only have a per-second
		precision depending on the platforms.</haxe_doc>
		</getTime>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.
		
		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.
			- month: 0 to 11
			- day: 1 to 31
			- hour: 0 to 23
			- min: 0 to 59
			- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by
		- new Date() for a specific date,
		- Date.now() to obtain information about the current time,
		- Date.fromTime() with a given timestamp or
		- Date.fromString() by parsing from a String.
	
	There is some extra functions available in the [DateTools] class.
	
	In the context of haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
	</class>
	<class path="DateTools" params="" file="/usr/lib/haxe/std/DateTools.hx">
		<__format_get set="method" line="36" static="1"><f a="d:e">
	<c path="Date"/>
	<c path="String"/>
	<c path="String"/>
</f></__format_get>
		<__format set="method" line="89" static="1"><f a="d:f">
	<c path="Date"/>
	<c path="String"/>
	<c path="String"/>
</f></__format>
		<format public="1" set="method" line="114" static="1">
			<f a="d:f">
				<c path="Date"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Format the date [d] according to the format [f]. The format is
		compatible with the [strftime] standard format, except that there is no
		support in Flash and JS for day and months names (due to lack of proper
		internationalization API). On haXe/Neko/Windows, some formats are not
		supported.</haxe_doc>
		</format>
		<delta public="1" get="inline" set="null" line="130" static="1">
			<f a="d:t">
				<c path="Date"/>
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns the result of adding timestamp [t] to Date [d].
		
		This is a convenience function for calling
		Date.fromTime(d.getTime() + t).</haxe_doc>
		</delta>
		<DAYS_OF_MONTH line="134" static="1"><c path="Array"><x path="Int"/></c></DAYS_OF_MONTH>
		<getMonthDays public="1" set="method" line="141" static="1">
			<f a="d">
				<c path="Date"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of days in the month of Date [d].
		
		This method handles leap years.</haxe_doc>
		</getMonthDays>
		<seconds public="1" get="inline" set="null" line="155" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of seconds to a timestamp.</haxe_doc>
		</seconds>
		<minutes public="1" get="inline" set="null" line="162" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of minutes to a timestamp.</haxe_doc>
		</minutes>
		<hours public="1" get="inline" set="null" line="169" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of hours to a timestamp.</haxe_doc>
		</hours>
		<days public="1" get="inline" set="null" line="176" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a number of days to a timestamp.</haxe_doc>
		</days>
		<parse public="1" set="method" line="183" static="1">
			<f a="t">
				<x path="Float"/>
				<a>
					<seconds><x path="Int"/></seconds>
					<ms><x path="Float"/></ms>
					<minutes><x path="Int"/></minutes>
					<hours><x path="Int"/></hours>
					<days><x path="Int"/></days>
				</a>
			</f>
			<haxe_doc>Separate a date-time into several components</haxe_doc>
		</parse>
		<make public="1" set="method" line="199" static="1">
			<f a="o">
				<a>
					<seconds><x path="Int"/></seconds>
					<ms><x path="Float"/></ms>
					<minutes><x path="Int"/></minutes>
					<hours><x path="Int"/></hours>
					<days><x path="Int"/></days>
				</a>
				<x path="Float"/>
			</f>
			<haxe_doc>Build a date-time from several components</haxe_doc>
		</make>
		<makeUtc public="1" get="inline" set="null" line="207" static="1">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Retrieve Unix timestamp value from Date components. Takes same argument sequence as the Date constructor.</haxe_doc>
		</makeUtc>
		<haxe_doc>The DateTools class contains some extra functionalities for handling [Date]
	instances and timestamps.
	
	In the context of haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
	</class>
	<class path="EReg" params="" file="/usr/lib/haxe/std/EReg.hx">
		<map public="1" set="method" line="183">
			<f a="s:f">
				<c path="String"/>
				<f a="">
					<c path="EReg"/>
					<c path="String"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>For each occurence of the pattern in the string [s], the function [f] is called and
		can return the string that needs to be replaced. All occurences are matched anyway,
		and setting the [g] flag might cause some incorrect behavior on some platforms.</haxe_doc>
		</map>
		<replace public="1" set="method" line="174">
			<f a="s:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replaces the first substring of [s] which [this] EReg matches with [by].
		
		If [this] EReg does not match any substring, the result is [s].
		
		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.
		
		If [by] contains [$1] to [$9], the digit corresponds to number of a
		matched sub-group and its value is used instead. If no such sub-group
		exists, the replacement is unspecified. The string [$$] becomes [$].
		
		If [s] or [by] are null, the result is unspecified.</haxe_doc>
		</replace>
		<split public="1" set="method" line="156">
			<f a="s">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits String [s] at all substrings [this] EReg matches.
		
		If a match is found at the start of [s], the result contains a leading
		empty String "" entry.
		
		If a match is found at the end of [s], the result contains a trailing
		empty String "" entry.
		
		If two matching substrings appear next to each other, the result
		contains the empty String "" between them.
		
		By default, this method splits [s] into two parts at the first matched
		substring. If the global g modifier is in place, [s] is split at each
		matched substring.
		
		If [s] is null, the result is unspecified.</haxe_doc>
		</split>
		<matchSub public="1" set="method" line="134">
			<f a="s:pos:?len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if [this] regular expression matches a substring of String [s].
		
		This function expects [pos] and [len] to describe a valid substring of
		[s], or else the result is unspecified. To get more robust behavior,
		[this].matchSub(s.substr(pos,len)) can be used instead.
		
		This method modifies the internal state.
		
		If [s] is null, the result is unspecified.</haxe_doc>
		</matchSub>
		<matchedPos public="1" set="method" line="119">
			<f a=""><a>
	<pos><x path="Int"/></pos>
	<len><x path="Int"/></len>
</a></f>
			<haxe_doc>Returns the position and length of the last matched substring, within
		the String which was last used as argument to [this].match() or
		[this].matchSub().
		
		If the most recent call to [this].match() or [this].matchSub() did not
		match anything, the result is unspecified.
		
		If the global g modifier was in place for the matching, the position and
		length of the leftmost substring is returned.</haxe_doc>
		</matchedPos>
		<matchedRight public="1" set="method" line="104">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the part to the right of the last matched substring.
		
		If the most recent call to [this].match() or [this].matchSub() did not
		match anything, the result is unspecified.
		
		If the global g modifier was in place for the matching, only the
		substring to the right of the leftmost match is returned.
		
		The result does not include the matched part.</haxe_doc>
		</matchedRight>
		<matchedLeft public="1" set="method" line="89">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the part to the left of the last matched substring.
		
		If the most recent call to [this].match() or [this].matchSub() did not
		match anything, the result is unspecified.
		
		If the global g modifier was in place for the matching, only the
		substring to the left of the leftmost match is returned.
		
		The result does not include the matched part.</haxe_doc>
		</matchedLeft>
		<matched public="1" set="method" line="74">
			<f a="n">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the matched sub-group [n] of [this] EReg.
		
		This method should only be called after [this].match() or
		[this].matchSub(), and then operates on the String of that operation.
		
		The index [n] corresponds to the n-th set of parentheses in the pattern
		of [this] EReg. If no such sub-group exists, an exception is thrown.
		
		If [n] equals 0, the whole matched substring is returned.</haxe_doc>
		</matched>
		<match public="1" set="method" line="59">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if [this] regular expression matches String [s].
		
		This method modifies the internal state.
		
		If [s] is null, the result is unspecified.</haxe_doc>
		</match>
		<new public="1" set="method" line="48">
			<f a="r:opt">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new regular expression with pattern [r] and modifiers [opt].
		
		This is equivalent to the shorthand syntax ~/r/opt
		
		If [r] or [opt] are null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc>The EReg class represents regular expressions.
	
	While basic usage and patterns consistently work across platforms, some more
	complex operations may yield different results. This is a necessary trade-
	off to retain a certain level of performance.
	
	EReg instances can be created by calling the constructor, or with the
	special syntax ~/pattern/modifier
	
	EReg instances maintain an internal state, which is affected by several of
	its methods.
	
	A detailed explanation of the supported operations is available at
	http://haxe.org/doc/cross/regexp</haxe_doc>
	</class>
	<abstract path="Enum" params="T" file="/usr/lib/haxe/std/Enum.hx">
		<haxe_doc>An abstract type that represents an Enum type.
	
	The corresponding enum instance type is EnumValue.
	
	See [Type] for the haXe Reflection API.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/usr/lib/haxe/std/EnumValue.hx">
		<haxe_doc>An abstract type that represents any enum value.
	See [Type] for the haXe Reflection API.</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<class path="IntIterator" params="" file="/usr/lib/haxe/std/IntIterator.hx">
		<next public="1" set="method" line="61">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Moves to the next item of the iterator.
		
		If this is called while hasNext() is false, the result is unspecified.</haxe_doc>
		</next>
		<hasNext public="1" set="method" line="52">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns true if the iterator has other items, false otherwise.</haxe_doc>
		</hasNext>
		<max><x path="Int"/></max>
		<min><x path="Int"/></min>
		<new public="1" set="method" line="44">
			<f a="min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Iterates from [min] (inclusive) to [max] (exclusive).
		
		If [max <= min], the iterator will not act as a countdown.]]></haxe_doc>
		</new>
		<haxe_doc>IntIterator is used for implementing interval iterations.
	
	It is usually not used explicitly, but through it's special syntax:
		min...max
		
	While it is possible to assign an instance of IntIterator to a variable or
	field, it is worth noting that IntIterator does not reset after being used
	in a for-loop. Subsequent uses of the same instance will then have no
	effect.</haxe_doc>
	</class>
	<class path="Lambda" params="" file="/usr/lib/haxe/std/Lambda.hx">
		<array public="1" params="A" set="method" line="42" static="1">
			<f a="it">
				<t path="Iterable"><c path="array.A"/></t>
				<c path="Array"><c path="array.A"/></c>
			</f>
			<haxe_doc>Creates an Array from Iterable [it].
		
		If [it] is an Array, this function returns a copy of it.</haxe_doc>
		</array>
		<list public="1" params="A" set="method" line="54" static="1">
			<f a="it">
				<t path="Iterable"><c path="list.A"/></t>
				<c path="List"><c path="list.A"/></c>
			</f>
			<haxe_doc>Creates a List form Iterable [it].
		
		If [it] is a List, this function returns a copy of it.</haxe_doc>
		</list>
		<map public="1" params="A:B" set="method" line="68" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="map.A"/></t>
				<f a="">
					<c path="map.A"/>
					<c path="map.B"/>
				</f>
				<c path="List"><c path="map.B"/></c>
			</f>
			<haxe_doc>Creates a new List by applying function [f] to all elements of [it].
		
		The order of elements is preserved.
		
		If [f] is null, the result is unspecified.</haxe_doc>
		</map>
		<mapi public="1" params="A:B" set="method" line="82" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="mapi.A"/></t>
				<f a=":">
					<x path="Int"/>
					<c path="mapi.A"/>
					<c path="mapi.B"/>
				</f>
				<c path="List"><c path="mapi.B"/></c>
			</f>
			<haxe_doc>Similar to map, but also passes the index of each element to [f].
		
		The order of elements is preserved.
		
		If [f] is null, the result is unspecified.</haxe_doc>
		</mapi>
		<has public="1" params="A" set="method" line="98" static="1">
			<f a="it:elt">
				<t path="Iterable"><c path="has.A"/></t>
				<c path="has.A"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if [it] contains [elt].
		
		This function returns true as soon as an element is found which is equal
		to [elt] according to the [==] operator.
		
		If no such element is found, the result is false.</haxe_doc>
		</has>
		<exists public="1" params="A" set="method" line="115" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="exists.A"/></t>
				<f a="">
					<c path="exists.A"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if [it] contains an element for which [f] is true.
		
		This function returns true as soon as an element is found for which a
		call to [f] returns true.
		
		If no such element is found, the result is false.
		
		If [f] is null, the result is unspecified.</haxe_doc>
		</exists>
		<foreach public="1" params="A" set="method" line="134" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="foreach.A"/></t>
				<f a="">
					<c path="foreach.A"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if [f] is true for all elements of [it].
		
		This function returns false as soon as an element is found for which a
		call to [f] returns false.
		
		If no such element is found, the result is true.
		
		In particular, this function always returns true if [it] is empty.
		
		If [f] is null, the result is unspecified.</haxe_doc>
		</foreach>
		<iter public="1" params="A" set="method" line="146" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="iter.A"/></t>
				<f a="">
					<c path="iter.A"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls [f] on all elements of [it], in order.
		
		If [f] is null, the result is unspecified.</haxe_doc>
		</iter>
		<filter public="1" params="A" set="method" line="159" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="filter.A"/></t>
				<f a="">
					<c path="filter.A"/>
					<x path="Bool"/>
				</f>
				<c path="List"><c path="filter.A"/></c>
			</f>
			<haxe_doc>Returns a List containing those elements of [it] for which [f] returned
		true.
		
		If [it] is empty, the result is the empty List even if [f] is null.
		
		Otherwise if [f] is null, the result is unspecified.</haxe_doc>
		</filter>
		<fold public="1" params="A:B" set="method" line="179" static="1">
			<f a="it:f:first">
				<t path="Iterable"><c path="fold.A"/></t>
				<f a=":">
					<c path="fold.A"/>
					<c path="fold.B"/>
					<c path="fold.B"/>
				</f>
				<c path="fold.B"/>
				<c path="fold.B"/>
			</f>
			<haxe_doc>Functional fold on Iterable [it], using function [f] with start argument
		[first].
		
		If [it] has no elements, the result is [first].
		
		Otherwise the first element of [it] is passed to [f] alongside [first].
		The result of that call is then passed to [f] with the next element of
		[it], and so on until [it] has no more elements.
		
		If [it] or [f] are null, the result is unspecified.</haxe_doc>
		</fold>
		<count public="1" params="A" set="method" line="191" static="1">
			<f a="it:?pred">
				<t path="Iterable"><c path="count.A"/></t>
				<f a="">
					<c path="count.A"/>
					<x path="Bool"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of elements in [it] for which [pred] is true, or the
		total number of elements in [it] if [pred] is null.
		
		This function traverses all elements.</haxe_doc>
		</count>
		<empty public="1" params="T" set="method" line="206" static="1">
			<f a="it">
				<t path="Iterable"><c path="empty.T"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if Iterable [it] does not contain any element.</haxe_doc>
		</empty>
		<indexOf public="1" params="T" set="method" line="217" static="1">
			<f a="it:v">
				<t path="Iterable"><c path="indexOf.T"/></t>
				<c path="indexOf.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of the first element [v] within Iterable [it].
		
		This function uses operator [==] to check for equality.
		
		If [v] does not exist in [it], the result is -1.</haxe_doc>
		</indexOf>
		<concat public="1" params="T" set="method" line="233" static="1">
			<f a="a:b">
				<t path="Iterable"><c path="concat.T"/></t>
				<t path="Iterable"><c path="concat.T"/></t>
				<c path="List"><c path="concat.T"/></c>
			</f>
			<haxe_doc>Returns a new List containing all elements of Iterable [a] followed by
		all elements of Iterable [b].
		
		If [a] or [b] are null, the result is unspecified.</haxe_doc>
		</concat>
		<haxe_doc>The [Lambda] class is a collection of methods to support functional
	programming. It is ideally used with 'using Lambda' and then acts as an
	extension to Iterable types.
	
	On static platforms, working with the Iterable structure might be slower
	than performing the operations directly on known types, such as Array and
	List.
	
	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="List" params="T" file="/usr/lib/haxe/std/List.hx">
		<map public="1" params="X" set="method" line="259">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<c path="map.X"/>
				</f>
				<c path="List"><c path="map.X"/></c>
			</f>
			<haxe_doc>Returns a new list where all elements have been converted by the
		function [f].</haxe_doc>
		</map>
		<filter public="1" set="method" line="243">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<x path="Bool"/>
				</f>
				<c path="List"><c path="List.T"/></c>
			</f>
			<haxe_doc>Returns a list filtered with [f]. The returned list will contain all
		elements for which [f(x) = true].</haxe_doc>
		</filter>
		<join public="1" set="method" line="224">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of [this] List, with [sep] separating
		each element.</haxe_doc>
		</join>
		<toString public="1" set="method" line="203">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of [this] List.
		
		The result is enclosed in { } with the individual elements being
		separated by a comma.</haxe_doc>
		</toString>
		<iterator public="1" set="method" line="161">
			<f a=""><t path="Iterator"><c path="List.T"/></t></f>
			<haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
		</iterator>
		<remove public="1" set="method" line="138">
			<f a="v">
				<c path="List.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurence of [v] in [this] List.
		
		If [v] is found by checking standard equality, it is removed from [this]
		List and the function returns true.
		
		Otherwise, false is returned.</haxe_doc>
		</remove>
		<clear public="1" set="method" line="124">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Empties [this] List.
		
		This function does not traverse the elements, but simply sets the
		internal references to null and [this].length to 0.</haxe_doc>
		</clear>
		<isEmpty public="1" set="method" line="114">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tells if [this] List is empty.</haxe_doc>
		</isEmpty>
		<pop public="1" set="method" line="100">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the first element of [this] List, or null if no elements exist.
		
		The element is removed from [this] List.</haxe_doc>
		</pop>
		<last public="1" set="method" line="90">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the last element of [this] List, or null if no elements exist.
		
		This function does not modify [this] List.</haxe_doc>
		</last>
		<first public="1" set="method" line="81">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the first element of [this] List, or null if no elements exist.
		
		This function does not modify [this] List.</haxe_doc>
		</first>
		<push public="1" set="method" line="64">
			<f a="item">
				<c path="List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element [item] at the beginning of [this] List.
		
		[this].length increases by 1.</haxe_doc>
		</push>
		<add public="1" set="method" line="49">
			<f a="item">
				<c path="List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element [item] at the end of [this] List.
		
		[this].length increases by 1.</haxe_doc>
		</add>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of [this] List.</haxe_doc>
		</length>
		<q><c path="Array"><d/></c></q>
		<h><c path="Array"><d/></c></h>
		<new public="1" set="method" line="40">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. The list is composed of two-elements arrays
	that are chained together. It is optimized so that adding or removing an
	element does not imply copying the whole array content every time.</haxe_doc>
	</class>
	<abstract path="Map" params="K:V" file="/usr/lib/haxe/std/Map.hx">
		<from>
			<c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c>
			<c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c>
			<c path="haxe.ds.ObjectMap">
				<c path="fromObjectMap.K"/>
				<c path="fromObjectMap.V"/>
			</c>
		</from>
		<to>
			<c path="haxe.ds.StringMap"><c path="Map.V"/></c>
			<c path="haxe.ds.IntMap"><c path="Map.V"/></c>
			<c path="haxe.ds.EnumValueMap">
				<c path="toEnumValueMapMap.K"/>
				<c path="Map.V"/>
			</c>
			<c path="haxe.ds.ObjectMap">
				<c path="toObjectMap.K"/>
				<c path="Map.V"/>
			</c>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.
		
	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.
	
	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.
	
	Maps can also be created with [key1 => value1, key2 => value2] syntax.
	
	Map is an abstract type, it is not available at runtime.]]></haxe_doc>
		<meta><m n=":multiType"/></meta>
	</abstract>
	<class path="_Map.Map_Impl_" params="" file="/usr/lib/haxe/std/Map.hx" private="1" module="Map">
		<_new public="1" set="method" static="1">
			<f a=""><c path="IMap">
	<c path="Map.K"/>
	<c path="Map.V"/>
</c></f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Map.
		
		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:
		
		1. if K is a String, haxe.ds.StringMap is used
		2. if K is an Int, haxe.ds.IntMap is used
		3. if K is an enum, haxe.ds.EnumValueMap is used
		4. if K is any other class or structure, haxe.ds.ObjectMap is used
		5. if K is any other type, it causes a compile-time error
			
		(Cpp) Map does not use weak keys on ObjectMap by default.</haxe_doc>
		</_new>
		<set public="1" get="inline" set="null" line="70" static="1">
			<f a="this:key:value">
				<c path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</c>
				<c path="Map.K"/>
				<c path="Map.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Maps [key] to [value].
		
		If [key] already has a mapping, the previous value disappears.
		
		If [key] is null, the result is unspecified.</haxe_doc>
		</set>
		<get public="1" get="inline" set="null" line="86" static="1">
			<f a="this:key">
				<c path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</c>
				<c path="Map.K"/>
				<t path="Null"><c path="Map.V"/></t>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Returns the current mapping of [key].
		
		If no such mapping exists, null is returned.
		
		Note that a check like map.get(key) == null can hold for two reasons:
		
		1. the map has no mapping for [key]
		2. the map has a mapping with a value of null
		
		If it is important to distinguish these cases, exists() should be used.
		
		If [key] is null, the result is unspecified.</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="93" static="1">
			<f a="this:key">
				<c path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</c>
				<c path="Map.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns true if [key] has a mapping, false otherwise.
		
		If [key] is null, the result is unspecified.</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="101" static="1">
			<f a="this:key">
				<c path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</c>
				<c path="Map.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Removes the mapping of [key] and returns true if such a mapping existed,
		false otherwise.
		
		If [key] is null, the result is unspecified.</haxe_doc>
		</remove>
		<keys public="1" get="inline" set="null" line="108" static="1">
			<f a="this">
				<c path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</c>
				<t path="Iterator"><c path="Map.K"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an Iterator over the keys of [this] Map.
		
		The order of keys is undefined.</haxe_doc>
		</keys>
		<iterator public="1" get="inline" set="null" line="117" static="1">
			<f a="this">
				<c path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</c>
				<t path="Iterator"><c path="Map.V"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns an Iterator over the values of [this] Map.
		
		The order of values is undefined.</haxe_doc>
		</iterator>
		<toString public="1" get="inline" set="null" line="126" static="1">
			<f a="this">
				<c path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</c>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns a String representation of [this] Map.
		
		The exact representation depends on the platform and key-type.</haxe_doc>
		</toString>
		<arrayWrite public="1" get="inline" set="null" line="130" static="1">
			<f a="this:k:v">
				<c path="IMap">
					<c path="Map.K"/>
					<c path="Map.V"/>
				</c>
				<c path="Map.K"/>
				<c path="Map.V"/>
				<c path="Map.V"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
				<m n=":noCompletion"/>
			</meta>
		</arrayWrite>
		<toStringMap get="inline" set="null" line="135" static="1">
			<f a="t">
				<c path="IMap">
					<c path="String"/>
					<c path="Map.V"/>
				</c>
				<c path="haxe.ds.StringMap"><c path="Map.V"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toStringMap>
		<toIntMap get="inline" set="null" line="139" static="1">
			<f a="t">
				<c path="IMap">
					<x path="Int"/>
					<c path="Map.V"/>
				</c>
				<c path="haxe.ds.IntMap"><c path="Map.V"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toIntMap>
		<toEnumValueMapMap params="K" get="inline" set="null" line="143" static="1">
			<f a="t">
				<c path="IMap">
					<c path="toEnumValueMapMap.K"/>
					<c path="Map.V"/>
				</c>
				<c path="haxe.ds.EnumValueMap">
					<c path="toEnumValueMapMap.K"/>
					<c path="Map.V"/>
				</c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toEnumValueMapMap>
		<toObjectMap params="K" get="inline" set="null" line="147" static="1">
			<f a="t">
				<c path="IMap">
					<c path="toObjectMap.K"/>
					<c path="Map.V"/>
				</c>
				<c path="haxe.ds.ObjectMap">
					<c path="toObjectMap.K"/>
					<c path="Map.V"/>
				</c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toObjectMap>
		<fromStringMap params="V" get="inline" set="null" line="151" static="1">
			<f a="map">
				<c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c>
				<x path="Map">
					<c path="String"/>
					<c path="fromStringMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromStringMap>
		<fromIntMap params="V" get="inline" set="null" line="155" static="1">
			<f a="map">
				<c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c>
				<x path="Map">
					<x path="Int"/>
					<c path="fromIntMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromIntMap>
		<fromObjectMap params="K:V" get="inline" set="null" line="159" static="1">
			<f a="map">
				<c path="haxe.ds.ObjectMap">
					<c path="fromObjectMap.K"/>
					<c path="fromObjectMap.V"/>
				</c>
				<x path="Map">
					<c path="fromObjectMap.K"/>
					<c path="fromObjectMap.V"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromObjectMap>
	</class>
	<class path="IMap" params="K:V" file="/usr/lib/haxe/std/Map.hx" module="Map" interface="1">
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<iterator public="1" set="method"><f a=""><t path="Iterator"><c path="IMap.V"/></t></f></iterator>
		<keys public="1" set="method"><f a=""><t path="Iterator"><c path="IMap.K"/></t></f></keys>
		<remove public="1" set="method"><f a="k">
	<c path="IMap.K"/>
	<x path="Bool"/>
</f></remove>
		<exists public="1" set="method"><f a="k">
	<c path="IMap.K"/>
	<x path="Bool"/>
</f></exists>
		<set public="1" set="method"><f a="k:v">
	<c path="IMap.K"/>
	<c path="IMap.V"/>
	<x path="Void"/>
</f></set>
		<get public="1" set="method"><f a="k">
	<c path="IMap.K"/>
	<t path="Null"><c path="IMap.V"/></t>
</f></get>
	</class>
	<typedef path="_Map.Hashable" params="" file="/usr/lib/haxe/std/Map.hx" private="1" module="Map"><a><hashCode set="method"><f a=""><x path="Int"/></f></hashCode></a></typedef>
	<class path="Math" params="" file="/usr/lib/haxe/std/Math.hx" extern="1">
		<PI public="1" set="null" static="1"><x path="Float"/></PI>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes negative infinity.
		
		For example, this is the result of -1.0 / 0.0.
		
		Operations with NEGATIVE_INFINITY as an operand may result in
		Operations with NEGATIVE_INFINITY as an operand may result in
		NEGATIVE_INFINITY, POSITIVE_INFINITY or NaN. For detailed information,
		see ...
		
		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes negative infinity.
		
		For example, this is the result of 1.0 / 0.0.
		
		Operations with POSITIVE_INFINITY as an operand may result in
		NEGATIVE_INFINITY, POSITIVE_INFINITY or NaN. For detailed information,
		see ...
	
		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes an invalid number.
		
		NaN stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: Math.sqrt(-1).
		
		All further operations with NaN as an operand will result in NaN.
		
		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.
		
		In order to test if a value is NaN, you should use Math.isNaN() function.
		
		(Php) In PHP versions prior to 5.3.1 VC 9 there may be unexpected
		results when performing arithmetic operations with NaN on Windows, see:
			https://bugs.php.net/bug.php?id=42143</haxe_doc>
		</NaN>
		<abs public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the absolute value of [v].
		
		If [v] is positive or 0, the result is unchanged. Otherwise the result
		is -[v].
		
		If [v] is NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is
		POSITIVE_INFINITY.
		
		If [v] is NaN, the result is NaN.</haxe_doc>
		</abs>
		<min public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values [a] and [b].
		
		If [a] or [b] are NaN, the result is NaN.
		
		If [a] or [b] are NEGATIVE_INFINITY, the result is NEGATIVE_INFINITY.
		
		If [a] and [b] are POSITIVE_INFINITY, the result is POSITIVE_INFINITY.</haxe_doc>
		</min>
		<max public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the greater of values [a] and [b].
		
		If [a] or [b] are NaN, the result is NaN.
		
		If [a] or [b] are POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		
		If [a] and [b] are NEGATIVE_INFINITY, the result is NEGATIVE_INFINITY.</haxe_doc>
		</max>
		<sin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric sine of [v].
		
		The unit of [v] is radians.
		
		If [v] is NaN or infinite, the result is NaN.</haxe_doc>
		</sin>
		<cos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric cosine of [v].
		
		The unit of [v] is radians.
		
		If [v] is NaN or infinite, the result is NaN.</haxe_doc>
		</cos>
		<tan public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></tan>
		<asin public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></asin>
		<acos public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></acos>
		<atan public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></atan>
		<atan2 public="1" set="method" static="1"><f a="y:x">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></atan2>
		<exp public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Euler's number, raised to the power of [v].
		
		exp(1.0) is approximately 2.718281828459.
		
		If [v] is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		
		If [v] is NEGATIVE_INFINITY, the result is 0.0.
		
		If [v] is NaN, the result is NaN.</haxe_doc>
		</exp>
		<log public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm of [v].
		
		If [v] is negative (including NEGATIVE_INFINITY) or NaN, the result is
		NaN.
		
		If [v] is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		
		If [v] is 0.0, the result is NEGATIVE_INFINITY.
		
		This is the inverse operation of exp, i.e. log(exp(v)) == v always
		holds.</haxe_doc>
		</log>
		<pow public="1" set="method" static="1"><f a="v:exp">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></pow>
		<sqrt public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of [v].
		
		If [v] is negative (including NEGATIVE_INFINITY) or NaN, the result is
		NaN.
		
		If [v] is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		
		If [v] is 0.0, the result is 0.0.</haxe_doc>
		</sqrt>
		<round public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Rounds [v] to the nearest Int value.

		If v is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is unspecified.
		
		TODO: need spec</haxe_doc>
		</round>
		<floor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest Int value that is not greater than [v].
		
		If v is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is unspecified.		
		
		TODO: need spec</haxe_doc>
		</floor>
		<ceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest Int value that is not less than [v].

		If v is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is unspecified.
		
		TODO: need spec</haxe_doc>
		</ceil>
		<random public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to 0.0,
		and less than 1.0.</haxe_doc>
		</random>
		<ffloor public="1" get="inline" set="null" line="223" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></ffloor>
		<fceil public="1" get="inline" set="null" line="227" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fceil>
		<fround public="1" get="inline" set="null" line="231" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fround>
		<isFinite public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if [f] is a finite number.
		
		If [f] is POSITIVE_INFINITY, NEGATIVE_INFINITY or NaN, the result is
		false.
		
		Otherwise the result is true.</haxe_doc>
		</isFinite>
		<isNaN public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if [f] is not a valid number.
		
		If [f] is NaN, the result is true.
		
		Otherwise the result is false. In particular, both POSITIVE_INFINITY and
		NEGATIVE_INFINITY are not considered NaN.</haxe_doc>
		</isNaN>
		<haxe_doc>This class defines mathematical functions and constants.</haxe_doc>
	</class>
	<class path="Reflect" params="" file="/usr/lib/haxe/std/flash8/_std/Reflect.hx">
		<hasField public="1" get="inline" set="null" line="24" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if structure [o] has a field named [field].
		
		This is only guaranteed to work for anonymous structures. Refer to
		[Type.getInstanceFields] for a function supporting class instances.
		
		If [o] or [field] are null, the result is unspecified.</haxe_doc>
		</hasField>
		<field public="1" get="inline" set="null" line="28" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named [field] on object [o].
		
		If [o] is not an object or has no field named [field], the result is
		null.
		
		If the field is defined as a property, its accessors are ignored. Refer
		to [Reflect.getProperty] for a function supporting property accessors.
		
		If [field] is null, the result is unspecified.
		
		(As3) If used on a property field, the getter will be invoked. It is
		not possible to obtain the value directly.</haxe_doc>
		</field>
		<setField public="1" get="inline" set="null" line="32" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the field named [field] of object [o] to value [value].
		
		If [o] has no field named [field], this function is only guaranteed to
		work for anonymous structures.
		
		If [o] or [field] are null, the result is unspecified.
		
		(As3) If used on a property field, the setter will be invoked. It is
		not possible to set the value directly.</haxe_doc>
		</setField>
		<findAccessor set="method" line="36" static="1"><f a="c:name">
	<x path="Class"><d/></x>
	<c path="String"/>
	<d/>
</f></findAccessor>
		<getProperty public="1" set="method" line="46" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named [field] on object [o], taking
		property getter functions into account.
		
		If the field is not a property, this function behaves like
		[Reflect.field], but might be slower.
		
		If [o] or [field] are null, the result is unspecified.</haxe_doc>
		</getProperty>
		<setProperty public="1" get="inline" set="null" line="54" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the field named [field] of object [o] to value [value], taking
		property setter functions into account.
		
		If the field is not a property, this function behaves like
		[Reflect.setField], but might be slower.
		
		If [field] is null, the result is unspecified.</haxe_doc>
		</setProperty>
		<callMethod public="1" get="inline" set="null" line="62" static="1">
			<f a="o:func:args">
				<d/>
				<d/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>Call a method with the given object and arguments.</haxe_doc>
		</callMethod>
		<fields public="1" set="method" line="66" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the fields of structure [o].
		
		This method is only guaranteed to work on anonymous structures. Refer to
		[Type.getInstanceFields()] for a function supporting class instances.
		
		If [o] is null, the result is unspecified.</haxe_doc>
		</fields>
		<isFunction public="1" set="method" line="79" static="1">
			<f a="f">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if [f] is a function, false otherwise.
		
		If [f] is null, the result is false.</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" line="83" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares [a] and [b].
		
		If [a] is less than [b], the result is negative. If [b] is less than
		[a], the result is positive. If [a] and [b] are equal, the result is 0.
		
		This function is only defined if [a] and [b] are of the same type.
		
		If that type is a function, the result is unspecified and
		[Reflect.compareMethods] should be used instead.
		
		For all other types, the result is 0 if [a] and [b] are equal. If they
		are not equal, the result depends on the type and is negative if:
			Numeric types: a is less than b
			String: a is lexicographically less than b
			Other: unspecified
		
		If [a] and [b] are null, the result is 0. If only one of them is null,
		the result is unspecified.</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" line="87" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares the functions [f1] and [f2].
		
		If [f1] or [f2] are not functions, the result is unspecified.
		
		Otherwise the result is true if [f1] and the [f2] are physically equal,
		false otherwise.</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" line="91" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[Tells if [v] is an object.
		
		The result is true if [v] is one of the following:
			- class instance
			- structure
			- Class<T>
			- Enum<T>
			
		Otherwise, including if [v] is null, the result is false.]]></haxe_doc>
		</isObject>
		<isEnumValue public="1" set="method" line="96" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if [v] is an enum value.
		
		The result is true if [v] is of type EnumValue, i.e. an enum
		constructor.
		
		Otherwise, including if [v] is null, the result is false.</haxe_doc>
		</isEnumValue>
		<deleteField public="1" set="method" line="100" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the field named [field] from structure [o].
		
		This method is only guaranteed to work on anonymous structures.
		
		If [o] or [field] are null, the result is unspecified.</haxe_doc>
		</deleteField>
		<copy public="1" params="T" set="method" line="106" static="1">
			<f a="o">
				<c path="copy.T"/>
				<c path="copy.T"/>
			</f>
			<haxe_doc>Copies the fields of structure [o].
		
		This is only guaranteed to work on anonymous structures.
		
		If [o] is null, the result is unspecified.</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" line="114" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
		</makeVarArgs>
		<haxe_doc>The Reflect API is a way to manipulate values dynamicly through an
	abstract interface in an untyped manner. Use with care.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="String" params="" file="/usr/lib/haxe/std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code [code].
		
		If [code] is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of [this] String from [startIndex] to [endIndex].
		
		If [startIndex] or [endIndex] are negative, 0 is used instead.
		
		If [startIndex] exceeds [endIndex], they are swapped.
		
		If the (possibly swapped) [endIndex] is omitted or exceeds
		[this].length, [this].length is used instead.
		
		If the (possibly swapped) [startIndex] exceeds [this].length, the empty
		String "" is returned.</haxe_doc>
		</substring>
		<substr public="1" set="method">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns [len] characters of [this] String, starting at position [pos].
		
		If [len] is omitted, all characters from position [pos] to the end of
		[this] String are included.
		
		If [pos] is negative, its value is calculated from the end of [this]
		String by [this].length + [pos]. If this yields a negative value, 0 is
		used instead.
		
		If the calculated position + [len] exceeds [this].length, the characters
		from that position to the end of [this] String are returned.
		
		If [len] is negative, the result is unspecified.</haxe_doc>
		</substr>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits [this] String at each occurence of [delimiter].
		
		If [delimiter] is the empty String "", [this] String is split into an
		Array of [this].length elements, where the elements correspond to the
		characters of [this] String.
		
		If [delimiter] is not found within [this] String, the result is an Array
		with one element, which equals [this] String.
		
		If [delimiter] is null, the result is unspecified.
		
		Otherwise, [this] String is split into parts at each occurence of
		[delimiter]. If [this] String starts (or ends) with [delimiter}, the
		result Array contains a leading (or trailing) empty String "" element.
		Two subsequent delimiters also result in an empty String "" element.</haxe_doc>
		</split>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurence of [str] within [this]
		String.
		
		If [startIndex] is given, the search is performed within the substring
		of [this] String from 0 to [startIndex]. Otherwise the search is
		performed within [this] String. In either case, the returned position
		is relative to the beginning of [this] String.
		
		If [str] cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurence of [str] within [this]
		String.
		
		If [startIndex] is given, the search is performed within the substring
		of [this] String starting from [startIndex]. Otherwise the search is
		performed within [this] String. In either case, the returned position
		is relative to the beginning of [this] String.
		
		If [str] cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<charCodeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Returns the character code at position [index] of [this] String.
		
		If [index] is negative or exceeds [this].length, null is returned.
		
		To obtain the character code of a single character, "x".code can be used
		instead to inline the character code at compile time. Note that this
		only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position [index] of [this] String.
		
		If [index] is negative or exceeds [this].length, the empty String ""
		is returned.</haxe_doc>
		</charAt>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of [this] String are lower case.
		
		Affects the characters [A-Z]. Other characters remain unchanged.</haxe_doc>
		</toLowerCase>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of [this] String are upper case.
		
		Affects the characters [a-z]. Other characters remain unchanged.</haxe_doc>
		</toUpperCase>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in [this] String.</haxe_doc>
		</length>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.
	
	A haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of [this] String.
	
	Strings can be constructed using the string literal syntax "string value".
	
	String can be concatenated by using the + operator. If an operand is not a
	String, it is passed through Std.string() first.</haxe_doc>
	</class>
	<class path="Std" params="" file="/usr/lib/haxe/std/flash8/_std/Std.hx">
		<is public="1" set="method" line="25" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":ifFeature"><e>"typed_cast"</e></m></meta>
			<haxe_doc>Tells if a value v is of the type t. Returns false if v or t are null.</haxe_doc>
		</is>
		<string public="1" set="method" line="29" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts any value to a String.

		If s is of String, Int, Float or Bool, its value is returned.

		If s is an instance of a class and that class or one of its parent classes has
		a toString() method, that method is called. If no such method is present, the result
		is unspecified.

		If s is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If s is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" get="inline" set="null" line="33" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Converts a Float to an Int, rounded towards 0.

		If x is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is unspecified.</haxe_doc>
		</int>
		<parseInt public="1" set="method" line="37" static="1">
			<f a="x">
				<c path="String"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Converts a String to an Int.

		Leading whitespaces are ignored.

		If x starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
		contain 0-9 and A-F.

		Otherwise x is read as decimal number with 0-9 being allowed characters. x may also start with
		a - to denote a negative value.

		In decimal mode, parsing continues until an invalid character is detected, in which case the
		result up to that point is returned. For hexadecimal notation, the effect of invalid characters
		is unspecified.

		Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
		notation is not supported.

		If the input cannot be recognized, the result is null.</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" line="48" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a String to a Float.

		The parsing rules for parseInt() apply here as well, with the exception of invalid input
		resulting in a NaN value instead of null.

		Additionally, decimal notation may contain a single . to denote the start of the fractions.</haxe_doc>
		</parseFloat>
		<random public="1" set="method" line="52" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Return a random integer between 0 included and x excluded.

		If x is <= 1, the result is always 0.]]></haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<abstract path="Void" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<haxe_doc>The standard Void type. Only [null] values can be of the type [Void].</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<haxe_doc>The standard Float type, this is a double-precision IEEE 64bit float.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<to><x path="Float"/></to>
		<haxe_doc>The standard Int type. Its precision depends on the platform.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Null" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>[Null] can be useful in two cases. In order to document some methods
	that accepts or can return a [null] value, or for the Flash9 compiler and AS3
	generator to distinguish between base values that can be null and others that
	can't.</haxe_doc>
	</typedef>
	<abstract path="Bool" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<haxe_doc>The standard Boolean type is represented as an enum with two choices.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<haxe_doc>Dynamic is an internal compiler type which has special behavior.
	See the haXe language reference for more informations.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the Iterator and advances to the next one.
		
		This method is not required to check hasNext() first. A call to this
		method while hasNext() is false yields unspecified behavior.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns false if the iteration is complete, true otherwise.
		
		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to next(). However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An Iterator is a structure that permits iteration over elements of type T.

	Any class with matching hasNext and next fields is considered an Iterator
	and can then be used e.g. in for-loops. This makes it easy to implement
	custom iterators.</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An Iterable is a data structure which has an iterator() method.
	See [Lambda] for generic functions on iterable structures.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>ArrayAccess is used to indicate a class that can be accessed using brackets.
	The type parameter represent the type of the elements stored.</haxe_doc></class>
	<class path="StringBuf" params="" file="/usr/lib/haxe/std/StringBuf.hx">
		<toString public="1" get="inline" set="null" line="88">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the content of [this] StringBuf as String.
		
		The buffer is not emptied by this operation.</haxe_doc>
		</toString>
		<addSub public="1" get="inline" set="null" line="79">
			<f a="s:pos:?len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends a substring of [s] to [this] StringBuf.
		
		This function expects [pos] and [len] to describe a valid substring of
		[s], or else the result is unspecified. To get more robust behavior,
		[this].add(s.substr(pos,len)) can be used instead.
		
		If [s] or [pos] are null, the result is unspecified.
		
		If [len] is omitted or null, the substring ranges from [pos] to the end
		of [s].</haxe_doc>
		</addSub>
		<addChar public="1" get="inline" set="null" line="63">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the character identified by [c] to [this] StringBuf.
		
		If [c] is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</addChar>
		<add public="1" get="inline" set="null" line="53">
			<f a="x">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the representation of [x] to [this] StringBuf.
		
		The exact representation of [x] may vary per platform. To get more
		consistent behavior, this function should be called with
		Std.string(x).
		
		If [x] is null, the String "null" is appended.</haxe_doc>
		</add>
		<b line="35"><c path="String"/></b>
		<new public="1" set="method" line="42">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.
		
		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.
	
	Its cross-platform implementation uses String concatenation internally, but
	StringBuf may be optimized for different targets.
	
	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values. However, the internal buffer cannot be modified.</haxe_doc>
	</class>
	<class path="StringTools" params="" file="/usr/lib/haxe/std/StringTools.hx">
		<urlEncode public="1" set="method" line="37" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encode an URL by using the standard format.</haxe_doc>
		</urlEncode>
		<urlDecode public="1" set="method" line="62" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Decode an URL using the standard format.</haxe_doc>
		</urlDecode>
		<htmlEscape public="1" set="method" line="95" static="1">
			<f a="s:?quotes">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Escapes HTML special characters of the string [s].

		The following replacements are made:
			- & becomes &amp;
			- < becomes &lt;
			- > becomes &gt;
		If [quotes] is true, the following characters are also replaced:
			- " becomes &quot;
			- ' becomes &#039;]]></haxe_doc>
		</htmlEscape>
		<htmlUnescape public="1" set="method" line="113" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Unescapes HTML special characters of the string [s].

		This is the inverse operation to htmlEscape, i.e. the following always
		holds: htmlUnescape(htmlEscape(s)) == s

		The replacements follow:
			- &amp; becomes &
			- &lt; becomes <
			- &gt; becomes >
			- &quot; becomes "
			- &#039; becomes ']]></haxe_doc>
		</htmlUnescape>
		<startsWith public="1" set="method" line="124" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string [s] starts with the string [start].

		If [start] is null, the result is unspecified.

		If [start] is the empty String "", the result is true.</haxe_doc>
		</startsWith>
		<endsWith public="1" set="method" line="141" static="1">
			<f a="s:end">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string [s] ends with the string [end].

		If [end] is null, the result is unspecified.

		If [end] is the empty String "", the result is true.</haxe_doc>
		</endsWith>
		<isSpace public="1" set="method" line="162" static="1">
			<f a="s:pos">
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the character in the string [s] at position [pos] is a space.

		A character is considered to be a space character if its character code
		is 9,10,11,12,13 or 32.

		If [s] is the empty String "", or if pos is not a valid position within
		[s], the result is false.</haxe_doc>
		</isSpace>
		<ltrim public="1" set="method" line="176" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading space characters of [s].

		This function internally calls isSpace() to decide which characters to
		remove.

		If [s] is the empty String "" or consists only of space characters, the
		result is the empty String "".</haxe_doc>
		</ltrim>
		<rtrim public="1" set="method" line="201" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes trailing space characters of [s].

		This function internally calls isSpace() to decide which characters to
		remove.

		If [s] is the empty String "" or consists only of space characters, the
		result is the empty String "".</haxe_doc>
		</rtrim>
		<trim public="1" set="method" line="223" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading and trailing space characters of [s].

		This is a convenience function for ltrim(rtrim(s)).</haxe_doc>
		</trim>
		<lpad public="1" set="method" line="245" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Concatenates [c] to [s] until [s].length is at least [l].

		If [c] is the empty String "" or if [l] does not exceed [s].length,
		[s] is returned unchanged.

		If [c].length is 1, the resulting String length is exactly [l].

		Otherwise the length may exceed [l].

		If [c] is null, the result is unspecified.</haxe_doc>
		</lpad>
		<rpad public="1" set="method" line="267" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Appends [c] to [s] until [s].length is at least [l].

		If [c] is the empty String "" or if [l] does not exceed [s].length,
		[s] is returned unchanged.

		If [c].length is 1, the resulting String length is exactly [l].

		Otherwise the length may exceed [l].

		If [c] is null, the result is unspecified.</haxe_doc>
		</rpad>
		<replace public="1" set="method" line="288" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replace all occurences of the String [sub] in the String [s] by the
		String [by].

		If [sub] is the empty String "", [by] is inserted after each character
		of [s]. If [by] is also the empty String "", [s] remains unchanged.

		This is a convenience function for [s].split([sub]).join([by]).

		If [sub] or [by] are null, the result is unspecified.</haxe_doc>
		</replace>
		<hex public="1" set="method" line="310" static="1">
			<f a="n:?digits">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes [n] into a hexadecimal representation.

		If [digits] is specified, the resulting String is padded with "0" until
		its length equals [digits].</haxe_doc>
		</hex>
		<fastCodeAt public="1" get="inline" set="null" line="339" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the character code at position [index] of String [s].

		This method is faster than String.charCodeAt() on most platforms.
		However, unlike String.charCodeAt(), the result is unspecified if
		[index] is negative or exceeds [s].length.

		This operation is not guaranteed to work if [s] contains the \0
		character.</haxe_doc>
		</fastCodeAt>
		<isEof public="1" get="inline" set="null" line="366" static="1">
			<f a="c">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</isEof>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	'using StringTools' and then acts as an extension to the String class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<enum path="ValueType" params="" file="/usr/lib/haxe/std/flash8/_std/Type.hx" module="Type">
		<TUnknown/>
		<TObject/>
		<TNull/>
		<TInt/>
		<TFunction/>
		<TFloat/>
		<TEnum a="e"><x path="Enum"><d/></x></TEnum>
		<TClass a="c"><x path="Class"><d/></x></TClass>
		<TBool/>
	</enum>
	<class path="Type" params="" file="/usr/lib/haxe/std/flash8/_std/Type.hx">
		<getClass public="1" params="T" set="method" line="36" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<x path="Class"><c path="getClass.T"/></x>
			</f>
			<haxe_doc>Returns the class of [o], if [o] is a class instance.
		
		If [o] is null or of a different type, null is returned.
		
		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" line="42" static="1">
			<f a="o">
				<x path="EnumValue"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc><![CDATA[Returns the enum of enum instance [o].
		
		An enum instance is the result of using an enum constructor. Given an
		enum Color { Red; }, getEnum(Red) returns Enum<Color>.
		
		If [o] is null, null is returned.
		
		In general, type parameter information cannot be obtained at runtime.]]></haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" line="46" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Returns the super-class of class [c].
		
		If [c] has no super class, null is returned.
		
		If [c] is null, the result is unspecified.
		
		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" line="51" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of class [c], including its path.
		
		If [c] is inside a package, the package structure is returned dot-
		separated, with another dot separating the class name:
			pack1.pack2.(...).packN.ClassName
		If [c] is a sub-type of a haxe module, that module is not part of the
		package structure.
			
		If [c] has no package, the class name is returned.
		
		If [c] is null, the result is unspecified.
		
		The class name does not include any type parameters.</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" line="58" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum [e], including its path.
		
		If [e] is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
			pack1.pack2.(...).packN.EnumName
		If [e] is a sub-type of a haxe module, that module is not part of the
		package structure.
			
		If [e] has no package, the enum name is returned.
		
		If [e] is null, the result is unspecified.
		
		The enum name does not include any type parameters.</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" line="63" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Resolves a class by name.
		
		If [name] is the path of an existing class, that class is returned.
		
		Otherwise null is returned.
		
		If [name] is null or the path to a different type, the result is
		unspecified.
		
		The class name must not include any type parameters.</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" line="72" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc>Resolves an enum by name.
		
		If [name] is the path of an existing enum, that enum is returned.
		
		Otherwise null is returned.
		
		If [name] is null the result is unspecified.
		
		If [name] is the path to a different type, null is returned.
		
		The enum name must not include any type parameters.</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" line="80" static="1">
			<f a="cl:args">
				<x path="Class"><c path="createInstance.T"/></x>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class [cl], using [args] as arguments to the
		class constructor.
		
		This function guarantees that the class constructor is called.
		
		Default values of constructors arguments are not guaranteed to be
		taken into account.
		
		If [cl] or [args] are null, or if the number of elements in [args] does
		not match the expected number of constructor arguments, or if any
		argument has an invalid type,  or if [cl] has no own constructor, the
		result is unspecified.
		
		In particular, default values of constructor arguments are not
		guaranteed to be taken into account.</haxe_doc>
		</createInstance>
		<createEmptyInstance public="1" params="T" set="method" line="87" static="1">
			<f a="cl">
				<x path="Class"><c path="createEmptyInstance.T"/></x>
				<c path="createEmptyInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class [cl].
		
		This function guarantees that the class constructor is not called.
		
		If [cl] is null, the result is unspecified.</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" line="94" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createEnum.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>Creates an instance of enum [e] by calling its constructor [constr] with
		arguments [params].
		
		If [e] or [constr] is null, or if enum [e] has no constructor named
		[constr], or if the number of elements in [params] does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" line="106" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createEnumIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum [e] by calling its constructor number
		[index] with arguments [params].
		
		The constructor indices are preserved from haxe syntax, so the first
		declared is index 0, the next index 1 etc.
		
		If [e] or [constr] is null, or if enum [e] has no constructor named
		[constr], or if the number of elements in [params] does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnumIndex>
		<getInstanceFields public="1" set="method" line="112" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the instance fields of class [c].
		
		This only includes fields which are known at compile-time. In
		particular, using getInstanceFields(getClass(obj)) will not include
		any fields which were added to obj at runtime.
		
		The order of the fields in the returned Array is unspecified.
		
		If [c] is null, the result is unspecified.
		
		(As3) This method only returns instance fields that are public.</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" line="127" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of static fields of class [c].
		
		This does not include static fields of parent classes.
		
		The order of the fields in the returned Array is unspecified.
		
		If [c] is null, the result is unspecified.
		
		(As3) This method only returns class fields that are public.</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" line="136" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum [e].
		
		The order of the constructor names in the returned Array is preserved
		from the original syntax.
		
		If [c] is null, the result is unspecified.</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" line="141" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<haxe_doc>Returns the runtime type of value [v].
		
		The result corresponds to the type [v] has at runtime, which may vary
		per platform. Assumptions regarding this should be minimized to avoid
		surprises.</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" line="170" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances [a] and [b] by value.
		
		Unlike [a] == [b], this function performs a deep equality check on the
		arguments of the constructors, if exists.
		
		If [a] or [b] are null, the result is unspecified.</haxe_doc>
		</enumEq>
		<enumConstructor public="1" set="method" line="184" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance [e].
		
		The result String does not contain any constructor arguments.
		
		If [e] is null, the result is unspecified.</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" set="method" line="188" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance [e].
		
		If [e] has no arguments, the result is [].
		
		Otherwise the result are the values that were used as arguments to [e],
		in the order of their declaration.
		
		If [e] is null, the result is unspecified.</haxe_doc>
		</enumParameters>
		<enumIndex public="1" get="inline" set="null" line="192" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance [e].
		
		This corresponds to the original syntactic position of [e]. The index of
		the first declared constructor is 0, the next one is 1 etc.
		
		If [e] is null, the result is unspecified.</haxe_doc>
		</enumIndex>
		<allEnums public="1" params="T" set="method" line="196" static="1">
			<f a="e">
				<x path="Enum"><c path="allEnums.T"/></x>
				<c path="Array"><c path="allEnums.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum [e] that require no
		arguments.
		
		This may return the empty Array [] if all constructors of [e] require
		arguments.
		
		Otherwise an instance of [e] constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.
		
		If [e] is null, the result is unspecified.</haxe_doc>
		</allEnums>
		<haxe_doc>The haxe Reflection API allows retrieval of type information at runtime.
	
	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<enum path="XmlType" params="" file="/usr/lib/haxe/std/flash8/_std/Xml.hx" module="Xml"/>
	<class path="Xml" params="" file="/usr/lib/haxe/std/flash8/_std/Xml.hx">
		<Element public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</Element>
		<PCData public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</PCData>
		<CData public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</CData>
		<Comment public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</Comment>
		<DocType public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</DocType>
		<ProcessingInstruction public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</ProcessingInstruction>
		<Document public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</Document>
		<convert set="method" line="43" static="1"><f a="o">
	<d/>
	<c path="Xml"/>
</f></convert>
		<parse public="1" set="method" line="63" static="1">
			<f a="str">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Parse a String into an Xml object.</haxe_doc>
		</parse>
		<createDocument public="1" set="method" line="74" static="1">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createDocument>
		<createCData public="1" set="method" line="82" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createCData>
		<createPCData public="1" set="method" line="89" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createPCData>
		<createElement public="1" set="method" line="94" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createElement>
		<createComment public="1" set="method" line="99" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createComment>
		<createDocType public="1" set="method" line="104" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createDocType>
		<createProcessingInstruction public="1" set="method" line="111" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createProcessingInstruction>
		<toString public="1" set="method" line="285">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of the Xml node.</haxe_doc>
		</toString>
		<insertChild public="1" set="method" line="277">
			<f a="x:pos">
				<c path="Xml"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts a child at the given position among the other childs.</haxe_doc>
		</insertChild>
		<removeChild public="1" set="method" line="268">
			<f a="x">
				<c path="Xml"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes a child from the Document or Element.
		Returns true if the child was successfuly removed.</haxe_doc>
		</removeChild>
		<addChild public="1" set="method" line="262">
			<f a="x">
				<c path="Xml"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a child node to the Document or Element.
		One node can only be inside one given node which is indicated by the [parent] property.</haxe_doc>
		</addChild>
		<attributes public="1" set="method" line="256">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>Returns an [Iterator] on all the attribute names.</haxe_doc>
		</attributes>
		<remove public="1" set="method" line="250">
			<f a="att">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes an attribute for an Element node.
		Attributes are case-sensitive.</haxe_doc>
		</remove>
		<exists public="1" set="method" line="244">
			<f a="att">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the Element node has a given attribute.
		Attributes are case-sensitive.</haxe_doc>
		</exists>
		<set public="1" set="method" line="238">
			<f a="att:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the given attribute value for an Element node.
		Attributes are case-sensitive.</haxe_doc>
		</set>
		<get public="1" set="method" line="232">
			<f a="att">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Get the given attribute of an Element node. Returns [null] if not found.
		Attributes are case-sensitive.</haxe_doc>
		</get>
		<elementsNamed public="1" set="method" line="206">
			<f a="name">
				<c path="String"/>
				<t path="Iterator"><c path="Xml"/></t>
			</f>
			<haxe_doc>Returns an iterator of all child nodes which are Elements with the given nodeName.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</elementsNamed>
		<elements public="1" set="method" line="180">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>Returns an iterator of all child nodes which are Elements.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</elements>
		<iterator public="1" set="method" line="164">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>Returns an iterator of all child nodes.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</iterator>
		<get_parent set="method" line="160"><f a=""><c path="Xml"/></f></get_parent>
		<get_nodeValue set="method" line="154"><f a=""><c path="String"/></f></get_nodeValue>
		<get_nodeName set="method" line="148"><f a=""><c path="String"/></f></get_nodeName>
		<set_nodeValue set="method" line="142"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></set_nodeValue>
		<set_nodeName set="method" line="136"><f a="n">
	<c path="String"/>
	<c path="String"/>
</f></set_nodeName>
		<firstElement public="1" set="method" line="127">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node which is an Element.</haxe_doc>
		</firstElement>
		<firstChild public="1" set="method" line="121">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node.</haxe_doc>
		</firstChild>
		<__x><d/></__x>
		<nodeType public="1" set="null">
			<e path="XmlType"/>
			<haxe_doc>Returns the type of the Xml Node. This should be used before
		accessing other functions since some might raise an exception
		if the node type is not correct.</haxe_doc>
		</nodeType>
		<parent public="1" get="accessor" set="null">
			<c path="Xml"/>
			<haxe_doc>Returns the parent object in the Xml hierarchy.
		The parent can be [null], an Element or a Document.</haxe_doc>
		</parent>
		<nodeValue public="1" get="accessor" set="accessor">
			<c path="String"/>
			<haxe_doc>Returns the node value. Only works if the Xml node is not an Element or a Document.</haxe_doc>
		</nodeValue>
		<nodeName public="1" get="accessor" set="accessor">
			<c path="String"/>
			<haxe_doc>Returns the node name of an Element.</haxe_doc>
		</nodeName>
		<new set="method" line="118"><f a=""><x path="Void"/></f></new>
		<haxe_doc>The standard Xml class and parsing.
	More API to manipulate XML are available in the [haxe.xml] package.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="flash.Accessibility" params="" file="/usr/lib/haxe/std/flash8/Accessibility.hx" extern="1">
		<isActive public="1" set="method" static="1"><f a=""><x path="Bool"/></f></isActive>
		<updateProperties public="1" set="method" static="1"><f a=""><x path="Void"/></f></updateProperties>
		<sendEvent public="1" set="method" static="1"><f a="mc:childID:event:isNonHtml">
	<c path="flash.MovieClip"/>
	<d/>
	<d/>
	<x path="Bool"/>
	<x path="Void"/>
</f></sendEvent>
	</class>
	<class path="flash.Boot" params="" file="/usr/lib/haxe/std/flash8/Boot.hx">
		<def_color line="27" static="1"><x path="Int"/></def_color>
		<exception line="28" static="1"><unknown/></exception>
		<__string_rec set="method" line="30" static="1"><f a="o:s">
	<d/>
	<c path="String"/>
	<c path="String"/>
</f></__string_rec>
		<__closure set="method" line="95" static="1"><f a="f:o">
	<x path="Int"/>
	<c path="Array"><unknown/></c>
	<f a=""><unknown/></f>
</f></__closure>
		<__instanceof set="method" line="124" static="1"><f a="o:cl">
	<d/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></__instanceof>
		<getTrace set="method" line="156" static="1"><f a=""><c path="flash.TextField"/></f></getTrace>
		<__set_trace_color set="method" line="175" static="1"><f a="rgb">
	<x path="Int"/>
	<x path="Void"/>
</f></__set_trace_color>
		<__trace set="method" line="180" static="1"><f a="v:inf">
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></__trace>
		<__exc set="method" line="198" static="1"><f a="v">
	<unknown/>
	<x path="Void"/>
</f></__exc>
		<__clear_trace set="method" line="213" static="1"><f a=""><x path="Void"/></f></__clear_trace>
		<__init set="method" line="221" static="1"><f a="current">
	<d/>
	<x path="Void"/>
</f></__init>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="flash.Button" params="" file="/usr/lib/haxe/std/flash8/Button.hx" extern="1">
		<scale9Grid public="1"><c path="flash.geom.Rectangle"><x path="Float"/></c></scale9Grid>
		<cacheAsBitmap public="1"><x path="Bool"/></cacheAsBitmap>
		<blendMode public="1"><d/></blendMode>
		<filters public="1"><c path="Array"><d/></c></filters>
		<getDepth public="1" set="method"><f a=""><x path="Int"/></f></getDepth>
		<onSetFocus public="1" set="dynamic"><f a="oldFocus">
	<d/>
	<x path="Void"/>
</f></onSetFocus>
		<onRollOver public="1" set="dynamic"><f a=""><x path="Void"/></f></onRollOver>
		<onRollOut public="1" set="dynamic"><f a=""><x path="Void"/></f></onRollOut>
		<onReleaseOutside public="1" set="dynamic"><f a=""><x path="Void"/></f></onReleaseOutside>
		<onRelease public="1" set="dynamic"><f a=""><x path="Void"/></f></onRelease>
		<onPress public="1" set="dynamic"><f a=""><x path="Void"/></f></onPress>
		<onKillFocus public="1" set="dynamic"><f a="newFocus">
	<d/>
	<x path="Void"/>
</f></onKillFocus>
		<onKeyUp public="1" set="dynamic"><f a=""><x path="Void"/></f></onKeyUp>
		<onKeyDown public="1" set="dynamic"><f a=""><x path="Void"/></f></onKeyDown>
		<onDragOver public="1" set="dynamic"><f a=""><x path="Void"/></f></onDragOver>
		<onDragOut public="1" set="dynamic"><f a=""><x path="Void"/></f></onDragOut>
		<_yscale public="1"><x path="Float"/></_yscale>
		<_ymouse public="1"><x path="Float"/></_ymouse>
		<_y public="1"><x path="Float"/></_y>
		<_xscale public="1"><x path="Float"/></_xscale>
		<_xmouse public="1"><x path="Float"/></_xmouse>
		<_x public="1"><x path="Float"/></_x>
		<_width public="1"><x path="Float"/></_width>
		<_visible public="1"><x path="Bool"/></_visible>
		<useHandCursor public="1"><x path="Bool"/></useHandCursor>
		<_url public="1"><c path="String"/></_url>
		<trackAsMenu public="1"><x path="Bool"/></trackAsMenu>
		<_target public="1"><c path="String"/></_target>
		<tabIndex public="1"><x path="Int"/></tabIndex>
		<tabEnabled public="1"><x path="Bool"/></tabEnabled>
		<_soundbuftime public="1"><x path="Float"/></_soundbuftime>
		<_rotation public="1"><x path="Float"/></_rotation>
		<_quality public="1"><c path="String"/></_quality>
		<_parent public="1"><c path="flash.MovieClip"/></_parent>
		<_name public="1"><c path="String"/></_name>
		<menu public="1"><c path="flash.ContextMenu"/></menu>
		<_highquality public="1"><x path="Int"/></_highquality>
		<_height public="1"><x path="Float"/></_height>
		<_focusrect public="1"><x path="Bool"/></_focusrect>
		<enabled public="1"><x path="Bool"/></enabled>
		<_alpha public="1"><x path="Float"/></_alpha>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.Camera" params="" file="/usr/lib/haxe/std/flash8/Camera.hx" extern="1">
		<names public="1" set="null" static="1"><c path="Array"><c path="String"/></c></names>
		<get public="1" set="method" static="1"><f a="?index">
	<x path="Int"/>
	<c path="flash.Camera"/>
</f></get>
		<onStatus public="1" set="dynamic"><f a="infoObject">
	<d/>
	<x path="Void"/>
</f></onStatus>
		<onActivity public="1" set="dynamic"><f a="active">
	<x path="Bool"/>
	<x path="Void"/>
</f></onActivity>
		<setLoopback public="1" set="method"><f a="compress">
	<x path="Bool"/>
	<x path="Void"/>
</f></setLoopback>
		<setKeyFrameInterval public="1" set="method"><f a="keyFrameInterval">
	<x path="Int"/>
	<x path="Void"/>
</f></setKeyFrameInterval>
		<setQuality public="1" set="method"><f a="bandwidth:?quality">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setQuality>
		<setMotionLevel public="1" set="method"><f a="motionLevel:?timeOut">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setMotionLevel>
		<setMode public="1" set="method"><f a="width:height:?fps:?favorArea">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setMode>
		<motionTimeOut public="1" set="null"><x path="Float"/></motionTimeOut>
		<loopback public="1" set="null"><x path="Bool"/></loopback>
		<keyFrameInterval public="1" set="null"><x path="Int"/></keyFrameInterval>
		<quality public="1" set="null"><x path="Int"/></quality>
		<name public="1" set="null"><c path="String"/></name>
		<muted public="1" set="null"><x path="Bool"/></muted>
		<motionLevel public="1" set="null"><x path="Float"/></motionLevel>
		<activityLevel public="1" set="null"><x path="Float"/></activityLevel>
		<index public="1" set="null"><x path="Int"/></index>
		<height public="1" set="null"><x path="Int"/></height>
		<width public="1" set="null"><x path="Int"/></width>
		<currentFps public="1" set="null"><x path="Float"/></currentFps>
		<fps public="1" set="null"><x path="Float"/></fps>
		<bandwidth public="1" set="null"><x path="Int"/></bandwidth>
	</class>
	<class path="flash.Color" params="" file="/usr/lib/haxe/std/flash8/Color.hx" extern="1">
		<getTransform public="1" set="method"><f a=""><a>
	<rb><x path="Float"/></rb>
	<ra><x path="Float"/></ra>
	<gb><x path="Float"/></gb>
	<ga><x path="Float"/></ga>
	<bb><x path="Float"/></bb>
	<ba><x path="Float"/></ba>
	<ab><x path="Float"/></ab>
	<aa><x path="Float"/></aa>
</a></f></getTransform>
		<setTransform public="1" set="method"><f a="transformObject">
	<d/>
	<x path="Void"/>
</f></setTransform>
		<getRGB public="1" set="method"><f a=""><x path="Int"/></f></getRGB>
		<setRGB public="1" set="method"><f a="color">
	<x path="Int"/>
	<x path="Void"/>
</f></setRGB>
		<new public="1" set="method"><f a="target">
	<c path="flash.MovieClip"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.ContextMenu" params="" file="/usr/lib/haxe/std/flash8/ContextMenu.hx" extern="1">
		<onSelect public="1" set="dynamic"><f a="v:c">
	<d/>
	<c path="flash.ContextMenu"/>
	<x path="Void"/>
</f></onSelect>
		<builtInItems public="1"><d/></builtInItems>
		<customItems public="1"><c path="Array"><c path="flash.ContextMenuItem"/></c></customItems>
		<copy public="1" set="method"><f a=""><c path="flash.ContextMenu"/></f></copy>
		<hideBuiltInItems public="1" set="method"><f a=""><x path="Void"/></f></hideBuiltInItems>
		<new public="1" set="method"><f a="?callb">
	<f a=":">
		<d/>
		<c path="flash.ContextMenu"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.ContextMenuItem" params="" file="/usr/lib/haxe/std/flash8/ContextMenuItem.hx" extern="1">
		<separatorBefore public="1"><x path="Bool"/></separatorBefore>
		<caption public="1"><c path="String"/></caption>
		<visible public="1"><x path="Bool"/></visible>
		<enabled public="1"><x path="Bool"/></enabled>
		<onSelect public="1" set="dynamic"><f a="v:c">
	<d/>
	<c path="flash.ContextMenuItem"/>
	<x path="Void"/>
</f></onSelect>
		<copy public="1" set="method"><f a=""><c path="flash.ContextMenuItem"/></f></copy>
		<new public="1" set="method"><f a="caption:callb:?separatorBefore:?enabled:?visible">
	<c path="String"/>
	<f a=":">
		<d/>
		<c path="flash.ContextMenuItem"/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.ExtendedKey" params="" file="/usr/lib/haxe/std/flash8/ExtendedKey.hx" extern="1">
		<SOFT1 public="1" static="1"><c path="String"/></SOFT1>
		<SOFT2 public="1" static="1"><c path="String"/></SOFT2>
		<SOFT3 public="1" static="1"><c path="String"/></SOFT3>
		<SOFT4 public="1" static="1"><c path="String"/></SOFT4>
		<SOFT5 public="1" static="1"><c path="String"/></SOFT5>
		<SOFT6 public="1" static="1"><c path="String"/></SOFT6>
		<SOFT7 public="1" static="1"><c path="String"/></SOFT7>
		<SOFT8 public="1" static="1"><c path="String"/></SOFT8>
		<SOFT9 public="1" static="1"><c path="String"/></SOFT9>
		<SOFT10 public="1" static="1"><c path="String"/></SOFT10>
		<SOFT11 public="1" static="1"><c path="String"/></SOFT11>
		<SOFT12 public="1" static="1"><c path="String"/></SOFT12>
		<haxe_doc>flash lite only</haxe_doc>
	</class>
	<class path="flash.Key" params="" file="/usr/lib/haxe/std/flash8/Key.hx" extern="1">
		<ALT public="1" get="inline" set="null" line="12" static="1"><x path="Int"/></ALT>
		<ENTER public="1" get="inline" set="null" line="13" static="1"><x path="Int"/></ENTER>
		<SPACE public="1" get="inline" set="null" line="14" static="1"><x path="Int"/></SPACE>
		<UP public="1" get="inline" set="null" line="15" static="1"><x path="Int"/></UP>
		<DOWN public="1" get="inline" set="null" line="16" static="1"><x path="Int"/></DOWN>
		<LEFT public="1" get="inline" set="null" line="17" static="1"><x path="Int"/></LEFT>
		<RIGHT public="1" get="inline" set="null" line="18" static="1"><x path="Int"/></RIGHT>
		<PGUP public="1" get="inline" set="null" line="19" static="1"><x path="Int"/></PGUP>
		<PGDN public="1" get="inline" set="null" line="20" static="1"><x path="Int"/></PGDN>
		<HOME public="1" get="inline" set="null" line="21" static="1"><x path="Int"/></HOME>
		<END public="1" get="inline" set="null" line="22" static="1"><x path="Int"/></END>
		<TAB public="1" get="inline" set="null" line="23" static="1"><x path="Int"/></TAB>
		<CONTROL public="1" get="inline" set="null" line="24" static="1"><x path="Int"/></CONTROL>
		<SHIFT public="1" get="inline" set="null" line="25" static="1"><x path="Int"/></SHIFT>
		<ESCAPE public="1" get="inline" set="null" line="26" static="1"><x path="Int"/></ESCAPE>
		<INSERT public="1" get="inline" set="null" line="27" static="1"><x path="Int"/></INSERT>
		<DELETEKEY public="1" get="inline" set="null" line="28" static="1"><x path="Int"/></DELETEKEY>
		<BACKSPACE public="1" get="inline" set="null" line="29" static="1"><x path="Int"/></BACKSPACE>
		<CAPSLOCK public="1" get="inline" set="null" line="30" static="1"><x path="Int"/></CAPSLOCK>
		<getAscii public="1" set="method" static="1"><f a=""><x path="Int"/></f></getAscii>
		<getCode public="1" set="method" static="1"><f a=""><x path="Int"/></f></getCode>
		<isAccessible public="1" set="method" static="1"><f a=""><x path="Bool"/></f></isAccessible>
		<isDown public="1" set="method" static="1"><f a="code">
	<x path="Int"/>
	<x path="Bool"/>
</f></isDown>
		<isToggled public="1" set="method" static="1"><f a="code">
	<x path="Int"/>
	<x path="Bool"/>
</f></isToggled>
		<onKeyDown public="1" set="dynamic" static="1"><f a=""><x path="Void"/></f></onKeyDown>
		<onKeyUp public="1" set="dynamic" static="1"><f a=""><x path="Void"/></f></onKeyUp>
		<addListener public="1" set="method" static="1"><f a="listener">
	<d/>
	<x path="Void"/>
</f></addListener>
		<removeListener public="1" set="method" static="1"><f a="listener">
	<d/>
	<x path="Bool"/>
</f></removeListener>
	</class>
	<class path="flash.Lib" params="" file="/usr/lib/haxe/std/flash8/Lib.hx">
		<_global public="1" static="1"><d/></_global>
		<_root public="1" static="1"><c path="flash.MovieClip"/></_root>
		<current public="1" static="1"><c path="flash.MovieClip"/></current>
		<onerror static="1"><f a=":">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></onerror>
		<trace public="1" set="method" line="31" static="1"><f a="str">
	<c path="String"/>
	<x path="Void"/>
</f></trace>
		<eval public="1" set="method" line="35" static="1"><f a="str">
	<c path="String"/>
	<d/>
</f></eval>
		<getURL public="1" set="method" line="39" static="1"><f a="url:?target">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></getURL>
		<fscommand public="1" set="method" line="43" static="1"><f a="cmd:?param">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></fscommand>
		<print public="1" set="method" line="47" static="1"><f a="cmd:?kind">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></print>
		<getTimer public="1" get="inline" set="null" line="52" static="1"><f a=""><x path="Int"/></f></getTimer>
		<getVersion public="1" set="method" line="56" static="1"><f a=""><c path="String"/></f></getVersion>
		<registerClass public="1" set="method" line="60" static="1"><f a="name:cl">
	<c path="String"/>
	<a/>
	<x path="Void"/>
</f></registerClass>
		<keys public="1" set="method" line="64" static="1"><f a="v">
	<d/>
	<c path="Array"><c path="String"/></c>
</f></keys>
		<setErrorHandler public="1" set="method" line="68" static="1"><f a="f">
	<f a=":">
		<c path="String"/>
		<c path="Array"><c path="String"/></c>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
	</class>
	<class path="flash.LoadVars" params="" file="/usr/lib/haxe/std/flash8/LoadVars.hx" extern="1">
		<onHTTPStatus public="1" set="dynamic"><f a="status">
	<x path="Int"/>
	<x path="Void"/>
</f></onHTTPStatus>
		<onData public="1" set="dynamic"><f a="src">
	<c path="String"/>
	<x path="Void"/>
</f></onData>
		<onLoad public="1" set="dynamic"><f a="success">
	<x path="Bool"/>
	<x path="Void"/>
</f></onLoad>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<decode public="1" set="method"><f a="queryString">
	<c path="String"/>
	<x path="Void"/>
</f></decode>
		<getBytesTotal public="1" set="method"><f a=""><x path="Int"/></f></getBytesTotal>
		<getBytesLoaded public="1" set="method"><f a=""><x path="Int"/></f></getBytesLoaded>
		<sendAndLoad public="1" set="method"><f a="url:targetObject:?method">
	<c path="String"/>
	<d/>
	<c path="String"/>
	<x path="Bool"/>
</f></sendAndLoad>
		<send public="1" set="method"><f a="url:target:?method">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
</f></send>
		<load public="1" set="method"><f a="url">
	<c path="String"/>
	<x path="Bool"/>
</f></load>
		<addRequestHeader public="1" set="method"><f a="header:headerValue">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></addRequestHeader>
		<loaded public="1"><x path="Bool"/></loaded>
		<contentType public="1"><c path="String"/></contentType>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_dynamic><c path="String"/></haxe_dynamic>
	</class>
	<class path="flash.LocalConnection" params="" file="/usr/lib/haxe/std/flash8/LocalConnection.hx" extern="1">
		<onStatus public="1" set="dynamic"><f a="infoObject">
	<d/>
	<x path="Void"/>
</f></onStatus>
		<allowInsecureDomain public="1" set="dynamic"><f a="domain">
	<c path="String"/>
	<x path="Bool"/>
</f></allowInsecureDomain>
		<allowDomain public="1" set="dynamic"><f a="domain">
	<c path="String"/>
	<x path="Bool"/>
</f></allowDomain>
		<domain public="1" set="method"><f a=""><c path="String"/></f></domain>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<send public="1" set="method"><f a="connectionName:methodName:?p1:?p2:?p3:?p4:?p5:?p6">
	<c path="String"/>
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Bool"/>
</f></send>
		<connect public="1" set="method"><f a="connectionName">
	<c path="String"/>
	<x path="Bool"/>
</f></connect>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.Microphone" params="" file="/usr/lib/haxe/std/flash8/Microphone.hx" extern="1">
		<names public="1" set="null" static="1"><c path="Array"><c path="String"/></c></names>
		<get public="1" set="method" static="1"><f a="?index">
	<x path="Int"/>
	<c path="flash.Microphone"/>
</f></get>
		<onStatus public="1" set="dynamic"><f a="infoObject">
	<d/>
	<x path="Void"/>
</f></onStatus>
		<onActivity public="1" set="dynamic"><f a="active">
	<x path="Bool"/>
	<x path="Void"/>
</f></onActivity>
		<setUseEchoSuppression public="1" set="method"><f a="useEchoSuppression">
	<x path="Bool"/>
	<x path="Void"/>
</f></setUseEchoSuppression>
		<setGain public="1" set="method"><f a="gain">
	<x path="Float"/>
	<x path="Void"/>
</f></setGain>
		<setRate public="1" set="method"><f a="rate">
	<x path="Float"/>
	<x path="Void"/>
</f></setRate>
		<setSilenceLevel public="1" set="method"><f a="silenceLevel:?timeOut">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setSilenceLevel>
		<useEchoSuppression public="1" set="null"><x path="Bool"/></useEchoSuppression>
		<rate public="1" set="null"><x path="Float"/></rate>
		<silenceTimeOut public="1" set="null"><x path="Float"/></silenceTimeOut>
		<silenceLevel public="1" set="null"><x path="Int"/></silenceLevel>
		<name public="1" set="null"><c path="String"/></name>
		<muted public="1" set="null"><x path="Bool"/></muted>
		<index public="1" set="null"><x path="Int"/></index>
		<gain public="1" set="null"><x path="Float"/></gain>
		<activityLevel public="1" set="null"><x path="Float"/></activityLevel>
	</class>
	<class path="flash.Mouse" params="" file="/usr/lib/haxe/std/flash8/Mouse.hx" extern="1">
		<show public="1" set="method" static="1"><f a=""><x path="Int"/></f></show>
		<hide public="1" set="method" static="1"><f a=""><x path="Int"/></f></hide>
		<onMouseDown public="1" set="dynamic" static="1"><f a=""><x path="Void"/></f></onMouseDown>
		<onMouseMove public="1" set="dynamic" static="1"><f a=""><x path="Void"/></f></onMouseMove>
		<onMouseUp public="1" set="dynamic" static="1"><f a=""><x path="Void"/></f></onMouseUp>
		<addListener public="1" set="method" static="1"><f a="listener">
	<d/>
	<x path="Void"/>
</f></addListener>
		<removeListener public="1" set="method" static="1"><f a="listener">
	<d/>
	<x path="Bool"/>
</f></removeListener>
	</class>
	<class path="flash._MovieClip.MCBounds" params="" file="/usr/lib/haxe/std/flash8/MovieClip.hx" private="1" module="flash.MovieClip" extern="1">
		<yMax public="1"><x path="Float"/></yMax>
		<yMin public="1"><x path="Float"/></yMin>
		<xMax public="1"><x path="Float"/></xMax>
		<xMin public="1"><x path="Float"/></xMin>
	</class>
	<class path="flash.MovieClip" params="" file="/usr/lib/haxe/std/flash8/MovieClip.hx" extern="1">
		<forceSmoothing public="1">
			<x path="Bool"/>
			<haxe_doc>FP9 only</haxe_doc>
		</forceSmoothing>
		<lineGradientStyle public="1" set="method"><f a="fillType:colors:alphas:ratios:matrix:?spreadMethod:?interpolationMethod:?focalPointRatio">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<d/>
	<c path="String"/>
	<c path="String"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineGradientStyle>
		<beginBitmapFill public="1" set="method"><f a="bmp:?matrix:?repeat:?smoothing">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Matrix"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></beginBitmapFill>
		<attachBitmap public="1" set="method"><f a="bmp:depth:?pixelSnapping:?smoothing">
	<c path="flash.display.BitmapData"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></attachBitmap>
		<getRect public="1" set="method"><f a="bounds">
	<c path="flash.MovieClip"/>
	<c path="flash._MovieClip.MCBounds"/>
</f></getRect>
		<scale9Grid public="1"><c path="flash.geom.Rectangle"><x path="Float"/></c></scale9Grid>
		<transform public="1"><c path="flash.geom.Transform"/></transform>
		<scrollRect public="1"><d/></scrollRect>
		<opaqueBackground public="1"><x path="Int"/></opaqueBackground>
		<cacheAsBitmap public="1"><x path="Bool"/></cacheAsBitmap>
		<blendMode public="1"><d/></blendMode>
		<filters public="1"><c path="Array"><c path="flash.filters.BitmapFilter"/></c></filters>
		<onUnload public="1" set="dynamic"><f a=""><x path="Void"/></f></onUnload>
		<onSetFocus public="1" set="dynamic"><f a="oldFocus">
	<d/>
	<x path="Void"/>
</f></onSetFocus>
		<onRollOver public="1" set="dynamic"><f a=""><x path="Void"/></f></onRollOver>
		<onRollOut public="1" set="dynamic"><f a=""><x path="Void"/></f></onRollOut>
		<onReleaseOutside public="1" set="dynamic"><f a=""><x path="Void"/></f></onReleaseOutside>
		<onRelease public="1" set="dynamic"><f a=""><x path="Void"/></f></onRelease>
		<onPress public="1" set="dynamic"><f a=""><x path="Void"/></f></onPress>
		<onMouseUp public="1" set="dynamic"><f a=""><x path="Void"/></f></onMouseUp>
		<onMouseMove public="1" set="dynamic"><f a=""><x path="Void"/></f></onMouseMove>
		<onMouseDown public="1" set="dynamic"><f a=""><x path="Void"/></f></onMouseDown>
		<onLoad public="1" set="dynamic"><f a=""><x path="Void"/></f></onLoad>
		<onKillFocus public="1" set="dynamic"><f a="newFocus">
	<d/>
	<x path="Void"/>
</f></onKillFocus>
		<onKeyUp public="1" set="dynamic"><f a=""><x path="Void"/></f></onKeyUp>
		<onKeyDown public="1" set="dynamic"><f a=""><x path="Void"/></f></onKeyDown>
		<onEnterFrame public="1" set="dynamic"><f a=""><x path="Void"/></f></onEnterFrame>
		<onDragOver public="1" set="dynamic"><f a=""><x path="Void"/></f></onDragOver>
		<onDragOut public="1" set="dynamic"><f a=""><x path="Void"/></f></onDragOut>
		<onData public="1" set="dynamic"><f a=""><x path="Void"/></f></onData>
		<getSWFVersion public="1" set="method"><f a=""><x path="Int"/></f></getSWFVersion>
		<getTextSnapshot public="1" set="method"><f a=""><c path="flash.TextSnapshot"/></f></getTextSnapshot>
		<createTextField public="1" set="method"><f a="instanceName:depth:x:y:width:height">
	<c path="String"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="flash.TextField"/>
</f></createTextField>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<endFill public="1" set="method"><f a=""><x path="Void"/></f></endFill>
		<lineStyle public="1" set="method"><f a="?thickness:?rgb:?alpha:?pixelHinting:?noScale:?capsStyle:?jointStyle:?miterLimit">
	<x path="Float"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Bool"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineStyle>
		<curveTo public="1" set="method"><f a="controlX:controlY:anchorX:anchorY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<lineTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<moveTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<beginGradientFill public="1" set="method"><f a="fillType:colors:alphas:ratios:matrix:?spreadMethod:?interpolationMethod:?focalPointRatio">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<d/>
	<c path="String"/>
	<c path="String"/>
	<x path="Float"/>
	<x path="Void"/>
</f></beginGradientFill>
		<getNextHighestDepth public="1" set="method"><f a=""><x path="Int"/></f></getNextHighestDepth>
		<getInstanceAtDepth public="1" set="method"><f a="depth">
	<x path="Int"/>
	<c path="flash.MovieClip"/>
</f></getInstanceAtDepth>
		<beginFill public="1" set="method"><f a="rgb:?alpha">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></beginFill>
		<createEmptyMovieClip public="1" set="method"><f a="name:depth">
	<c path="String"/>
	<x path="Int"/>
	<c path="flash.MovieClip"/>
</f></createEmptyMovieClip>
		<stopDrag public="1" set="method"><f a=""><x path="Void"/></f></stopDrag>
		<startDrag public="1" set="method"><f a="lockCenter:?left:?top:?right:?bottom">
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></startDrag>
		<removeMovieClip public="1" set="method"><f a=""><x path="Void"/></f></removeMovieClip>
		<duplicateMovieClip public="1" set="method"><f a="name:depth:?initObject">
	<c path="String"/>
	<x path="Int"/>
	<d/>
	<c path="flash.MovieClip"/>
</f></duplicateMovieClip>
		<gotoAndStop public="1" set="method"><f a="frame">
	<d/>
	<x path="Void"/>
</f></gotoAndStop>
		<gotoAndPlay public="1" set="method"><f a="frame">
	<d/>
	<x path="Void"/>
</f></gotoAndPlay>
		<prevFrame public="1" set="method"><f a=""><x path="Void"/></f></prevFrame>
		<nextFrame public="1" set="method"><f a=""><x path="Void"/></f></nextFrame>
		<stop public="1" set="method"><f a=""><x path="Void"/></f></stop>
		<play public="1" set="method"><f a=""><x path="Void"/></f></play>
		<setMask public="1" set="method"><f a="mc">
	<c path="flash.MovieClip"/>
	<x path="Void"/>
</f></setMask>
		<getDepth public="1" set="method"><f a=""><x path="Int"/></f></getDepth>
		<attachVideo public="1" set="method"><f a="id">
	<d/>
	<x path="Void"/>
</f></attachVideo>
		<attachAudio public="1" set="method"><f a="id">
	<d/>
	<x path="Void"/>
</f></attachAudio>
		<getBytesTotal public="1" set="method"><f a=""><x path="Int"/></f></getBytesTotal>
		<getBytesLoaded public="1" set="method"><f a=""><x path="Int"/></f></getBytesLoaded>
		<getBounds public="1" set="method"><f a="bounds">
	<c path="flash.MovieClip"/>
	<c path="flash._MovieClip.MCBounds"/>
</f></getBounds>
		<hitTest public="1" set="method"><f a="x_or_mc:?y:?shape">
	<d/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></hitTest>
		<globalToLocal public="1" set="method"><f a="pt">
	<a>
		<y><x path="Float"/></y>
		<x><x path="Float"/></x>
	</a>
	<x path="Void"/>
</f></globalToLocal>
		<localToGlobal public="1" set="method"><f a="pt">
	<a>
		<y><x path="Float"/></y>
		<x><x path="Float"/></x>
	</a>
	<x path="Void"/>
</f></localToGlobal>
		<swapDepths public="1" set="method"><f a="mc">
	<d/>
	<x path="Void"/>
</f></swapDepths>
		<attachMovie public="1" set="method"><f a="id:name:depth:?initObject">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<d/>
	<c path="flash.MovieClip"/>
</f></attachMovie>
		<loadMovie public="1" set="method"><f a="url:?method">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></loadMovie>
		<loadVariables public="1" set="method"><f a="url:?method">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></loadVariables>
		<unloadMovie public="1" set="method"><f a=""><x path="Void"/></f></unloadMovie>
		<getURL public="1" set="method"><f a="url:?window:?method">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></getURL>
		<_parent public="1"><c path="flash.MovieClip"/></_parent>
		<_url public="1"><c path="String"/></_url>
		<_soundbuftime public="1"><x path="Float"/></_soundbuftime>
		<_focusrect public="1"><x path="Bool"/></_focusrect>
		<_quality public="1"><c path="String"/></_quality>
		<_framesloaded public="1" set="null"><x path="Int"/></_framesloaded>
		<_totalframes public="1" set="null"><x path="Int"/></_totalframes>
		<_currentframe public="1" set="null"><x path="Int"/></_currentframe>
		<_droptarget public="1" set="null"><c path="String"/></_droptarget>
		<_name public="1"><c path="String"/></_name>
		<_rotation public="1"><x path="Float"/></_rotation>
		<_target public="1"><c path="String"/></_target>
		<_visible public="1"><x path="Bool"/></_visible>
		<_lockroot public="1"><x path="Bool"/></_lockroot>
		<_alpha public="1"><x path="Float"/></_alpha>
		<_height public="1"><x path="Float"/></_height>
		<_width public="1"><x path="Float"/></_width>
		<_yscale public="1"><x path="Float"/></_yscale>
		<_xscale public="1"><x path="Float"/></_xscale>
		<_ymouse public="1"><x path="Float"/></_ymouse>
		<_xmouse public="1"><x path="Float"/></_xmouse>
		<_y public="1"><x path="Float"/></_y>
		<_x public="1"><x path="Float"/></_x>
		<trackAsMenu public="1"><x path="Bool"/></trackAsMenu>
		<hitArea public="1"><c path="flash.MovieClip"/></hitArea>
		<tabIndex public="1"><x path="Int"/></tabIndex>
		<tabEnabled public="1"><x path="Bool"/></tabEnabled>
		<tabChildren public="1"><x path="Bool"/></tabChildren>
		<focusEnabled public="1"><x path="Bool"/></focusEnabled>
		<enabled public="1"><x path="Bool"/></enabled>
		<useHandCursor public="1"><x path="Bool"/></useHandCursor>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.MovieClipLoader" params="" file="/usr/lib/haxe/std/flash8/MovieClipLoader.hx" extern="1">
		<checkPolicyFile public="1">
			<x path="Bool"/>
			<haxe_doc>in FP 9</haxe_doc>
		</checkPolicyFile>
		<removeListener public="1" set="method"><f a="listener">
	<d/>
	<x path="Bool"/>
</f></removeListener>
		<addListener public="1" set="method"><f a="listener">
	<d/>
	<x path="Bool"/>
</f></addListener>
		<onLoadError public="1" set="dynamic"><f a="target:error">
	<c path="flash.MovieClip"/>
	<c path="String"/>
	<x path="Void"/>
</f></onLoadError>
		<onLoadComplete public="1" set="dynamic"><f a="target">
	<c path="flash.MovieClip"/>
	<x path="Void"/>
</f></onLoadComplete>
		<onLoadProgress public="1" set="dynamic"><f a="target:loaded:total">
	<c path="flash.MovieClip"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></onLoadProgress>
		<onLoadStart public="1" set="dynamic"><f a="target">
	<c path="flash.MovieClip"/>
	<x path="Void"/>
</f></onLoadStart>
		<onLoadInit public="1" set="dynamic"><f a="target">
	<c path="flash.MovieClip"/>
	<x path="Void"/>
</f></onLoadInit>
		<unloadClip public="1" set="method"><f a="target">
	<c path="flash.MovieClip"/>
	<x path="Bool"/>
</f></unloadClip>
		<loadClip public="1" set="method"><f a="url:target">
	<c path="String"/>
	<c path="flash.MovieClip"/>
	<x path="Bool"/>
</f></loadClip>
		<getProgress public="1" set="method"><f a="target">
	<c path="flash.MovieClip"/>
	<a>
		<bytesTotal><x path="Int"/></bytesTotal>
		<bytesLoaded><x path="Int"/></bytesLoaded>
	</a>
</f></getProgress>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.NetConnection" params="" file="/usr/lib/haxe/std/flash8/NetConnection.hx" extern="1">
		<onResult public="1" set="dynamic"><f a="infoObject">
	<d/>
	<x path="Void"/>
</f></onResult>
		<onStatus public="1" set="dynamic"><f a="infoObject">
	<d/>
	<x path="Void"/>
</f></onStatus>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<addHeader public="1" set="method"><f a="header:mustUnderstand:object">
	<c path="String"/>
	<x path="Bool"/>
	<d/>
	<x path="Void"/>
</f></addHeader>
		<call public="1" set="method"><f a="remoteMethod:resultObject:?p1:?p2:?p3:?p4:?p5:?p6">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></call>
		<connect public="1" set="method"><f a="targetURI:?p1:?p2:?p3:?p4">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Bool"/>
</f></connect>
		<uri public="1" set="null"><c path="String"/></uri>
		<isConnected public="1" set="null"><x path="Bool"/></isConnected>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.NetStream" params="" file="/usr/lib/haxe/std/flash8/NetStream.hx" extern="1">
		<onCuePoint public="1" set="dynamic"><f a="info">
	<d/>
	<x path="Void"/>
</f></onCuePoint>
		<setBufferTime public="1" set="method"><f a="bufferTime">
	<x path="Float"/>
	<x path="Void"/>
</f></setBufferTime>
		<send public="1" set="method"><f a="handlerName:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></send>
		<attachVideo public="1" set="method"><f a="theCamera:?snapshotMilliseconds">
	<c path="flash.Camera"/>
	<x path="Float"/>
	<x path="Void"/>
</f></attachVideo>
		<attachAudio public="1" set="method"><f a="theMicrophone">
	<c path="flash.Microphone"/>
	<x path="Void"/>
</f></attachAudio>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<seek public="1" set="method"><f a="offset">
	<x path="Float"/>
	<x path="Void"/>
</f></seek>
		<pause public="1" set="method"><f a="?flag">
	<x path="Bool"/>
	<x path="Void"/>
</f></pause>
		<receiveVideo public="1" set="method"><f a="flag">
	<d/>
	<x path="Void"/>
</f></receiveVideo>
		<receiveAudio public="1" set="method"><f a="flag">
	<x path="Bool"/>
	<x path="Void"/>
</f></receiveAudio>
		<play public="1" set="method"><f a="name:?start:?len:?reset">
	<c path="String"/>
	<x path="Float"/>
	<x path="Float"/>
	<d/>
	<x path="Void"/>
</f></play>
		<publish public="1" set="method"><f a="name:?type">
	<d/>
	<c path="String"/>
	<x path="Void"/>
</f></publish>
		<onStatus public="1" set="dynamic"><f a="info">
	<d/>
	<x path="Void"/>
</f></onStatus>
		<onMetaData public="1" set="dynamic"><f a="info">
	<d/>
	<x path="Void"/>
</f></onMetaData>
		<checkPolicyFile public="1">
			<x path="Bool"/>
			<haxe_doc>FP9 only</haxe_doc>
		</checkPolicyFile>
		<liveDelay public="1" set="null"><x path="Float"/></liveDelay>
		<currentFps public="1" set="null"><x path="Float"/></currentFps>
		<time public="1" set="null"><x path="Float"/></time>
		<bytesTotal public="1" set="null"><x path="Int"/></bytesTotal>
		<bytesLoaded public="1" set="null"><x path="Int"/></bytesLoaded>
		<bufferTime public="1" set="null"><x path="Float"/></bufferTime>
		<bufferLength public="1" set="null"><x path="Float"/></bufferLength>
		<new public="1" set="method"><f a="connection">
	<c path="flash.NetConnection"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.PrintJob" params="" file="/usr/lib/haxe/std/flash8/PrintJob.hx" extern="1">
		<orientation public="1" set="null"><c path="String"/></orientation>
		<pageHeight public="1" set="null"><x path="Float"/></pageHeight>
		<pageWidth public="1" set="null"><x path="Float"/></pageWidth>
		<paperHeight public="1" set="null"><x path="Float"/></paperHeight>
		<paperWidth public="1" set="null"><x path="Float"/></paperWidth>
		<send public="1" set="method"><f a=""><x path="Void"/></f></send>
		<addPage public="1" set="method"><f a="target:?printArea:?options:?frameNum">
	<d/>
	<d/>
	<d/>
	<x path="Float"/>
	<x path="Bool"/>
</f></addPage>
		<start public="1" set="method"><f a=""><x path="Bool"/></f></start>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<typedef path="flash.SelectionListener" params="" file="/usr/lib/haxe/std/flash8/Selection.hx" module="flash.Selection"><a><onSetFocus><f a=":">
	<c path="flash.TextField"/>
	<c path="flash.TextField"/>
	<x path="Void"/>
</f></onSetFocus></a></typedef>
	<class path="flash.Selection" params="" file="/usr/lib/haxe/std/flash8/Selection.hx" extern="1">
		<getBeginIndex public="1" set="method" static="1"><f a=""><x path="Int"/></f></getBeginIndex>
		<getEndIndex public="1" set="method" static="1"><f a=""><x path="Int"/></f></getEndIndex>
		<getCaretIndex public="1" set="method" static="1"><f a=""><x path="Int"/></f></getCaretIndex>
		<getFocus public="1" set="method" static="1"><f a=""><c path="String"/></f></getFocus>
		<setFocus public="1" set="method" static="1"><f a="newFocus">
	<d/>
	<x path="Bool"/>
</f></setFocus>
		<setSelection public="1" set="method" static="1"><f a="beginIndex:endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setSelection>
		<addListener public="1" set="method" static="1"><f a="listener">
	<t path="flash.SelectionListener"/>
	<x path="Void"/>
</f></addListener>
		<removeListener public="1" set="method" static="1"><f a="listener">
	<t path="flash.SelectionListener"/>
	<x path="Bool"/>
</f></removeListener>
	</class>
	<class path="flash.SharedObject" params="" file="/usr/lib/haxe/std/flash8/SharedObject.hx" extern="1">
		<getLocal public="1" set="method" static="1"><f a="name:?localPath:?secure">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<c path="flash.SharedObject"/>
</f></getLocal>
		<getRemote public="1" set="method" static="1"><f a="name:remotePath:?persistence">
	<c path="String"/>
	<c path="String"/>
	<d/>
	<c path="flash.SharedObject"/>
</f></getRemote>
		<deleteAll public="1" set="method" static="1"><f a="url">
	<c path="String"/>
	<x path="Void"/>
</f></deleteAll>
		<getDiskUsage public="1" set="method" static="1"><f a="url">
	<c path="String"/>
	<x path="Int"/>
</f></getDiskUsage>
		<getMaxSize public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>flash lite only</haxe_doc>
		</getMaxSize>
		<addListener public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>flash lite only</haxe_doc>
		</addListener>
		<removeListener public="1" set="method" static="1">
			<f a="soName">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>flash lite only</haxe_doc>
		</removeListener>
		<data public="1"><d/></data>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<onSync public="1" set="dynamic"><f a="objArray">
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></onSync>
		<onStatus public="1" set="dynamic"><f a="infoObject">
	<d/>
	<x path="Void"/>
</f></onStatus>
		<setFps public="1" set="method"><f a="updatesPerSecond">
	<x path="Float"/>
	<x path="Bool"/>
</f></setFps>
		<getSize public="1" set="method"><f a=""><x path="Float"/></f></getSize>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<connect public="1" set="method"><f a="cnx">
	<c path="flash.NetConnection"/>
	<x path="Bool"/>
</f></connect>
		<flush public="1" set="method"><f a="?minDiskSpace">
	<x path="Float"/>
	<d/>
</f></flush>
		<send public="1" set="method"><f a="handler:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></send>
	</class>
	<class path="flash.Sound" params="" file="/usr/lib/haxe/std/flash8/Sound.hx" extern="1">
		<getBytesTotal public="1" set="method"><f a=""><x path="Float"/></f></getBytesTotal>
		<getBytesLoaded public="1" set="method"><f a=""><x path="Float"/></f></getBytesLoaded>
		<loadSound public="1" set="method"><f a="url:isStreaming">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></loadSound>
		<start public="1" set="method"><f a="?secondOffset:?loops">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></start>
		<attachSound public="1" set="method"><f a="id">
	<c path="String"/>
	<x path="Void"/>
</f></attachSound>
		<stop public="1" set="method"><f a="?linkageID">
	<c path="String"/>
	<x path="Void"/>
</f></stop>
		<setVolume public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></setVolume>
		<setTransform public="1" set="method"><f a="transformObject">
	<d/>
	<x path="Void"/>
</f></setTransform>
		<setPan public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></setPan>
		<getVolume public="1" set="method"><f a=""><x path="Float"/></f></getVolume>
		<getTransform public="1" set="method"><f a=""><d/></f></getTransform>
		<getPan public="1" set="method"><f a=""><x path="Float"/></f></getPan>
		<onID3 public="1" set="dynamic"><f a=""><x path="Void"/></f></onID3>
		<onSoundComplete public="1" set="dynamic"><f a=""><x path="Void"/></f></onSoundComplete>
		<onLoad public="1" set="dynamic"><f a="success">
	<x path="Bool"/>
	<x path="Void"/>
</f></onLoad>
		<checkPolicyFile public="1">
			<x path="Bool"/>
			<haxe_doc>FP9 only</haxe_doc>
		</checkPolicyFile>
		<position public="1" set="null"><x path="Float"/></position>
		<id3 public="1" set="null"><d/></id3>
		<duration public="1" set="null"><x path="Float"/></duration>
		<new public="1" set="method"><f a="?target">
	<d/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.Stage" params="" file="/usr/lib/haxe/std/flash8/Stage.hx" extern="1">
		<width public="1" static="1"><x path="Float"/></width>
		<height public="1" static="1"><x path="Float"/></height>
		<scaleMode public="1" static="1"><c path="String"/></scaleMode>
		<align public="1" static="1"><c path="String"/></align>
		<showMenu public="1" static="1"><x path="Bool"/></showMenu>
		<addListener public="1" set="method" static="1"><f a="listener">
	<d/>
	<x path="Void"/>
</f></addListener>
		<removeListener public="1" set="method" static="1"><f a="listener">
	<d/>
	<x path="Void"/>
</f></removeListener>
		<displayState public="1" static="1">
			<c path="String"/>
			<haxe_doc>Set to "fullScreen" in order to set Flash to fullscreen
		(can only be done in Mouse/Keyboard event listener).
		Don't forget allowfullscreen="true" in your SWF parameters.</haxe_doc>
		</displayState>
		<fullScreenSourceRect public="1" static="1"><c path="flash.geom.Rectangle"><x path="Int"/></c></fullScreenSourceRect>
		<onFullScreen public="1" set="dynamic" static="1"><f a="full">
	<x path="Bool"/>
	<x path="Void"/>
</f></onFullScreen>
	</class>
	<class path="flash.System" params="" file="/usr/lib/haxe/std/flash8/System.hx" extern="1">
		<useCodepage public="1" static="1"><x path="Bool"/></useCodepage>
		<exactSettings public="1" static="1"><x path="Bool"/></exactSettings>
		<showSettings public="1" set="method" static="1"><f a="?tabID">
	<x path="Float"/>
	<x path="Void"/>
</f></showSettings>
		<setClipboard public="1" set="method" static="1"><f a="text">
	<c path="String"/>
	<x path="Void"/>
</f></setClipboard>
		<onStatus public="1" set="dynamic" static="1"><f a="infoObject">
	<d/>
	<x path="Void"/>
</f></onStatus>
	</class>
	<class path="flash.TextField" params="" file="/usr/lib/haxe/std/flash8/TextField.hx" extern="1">
		<getFontList public="1" set="method" static="1"><f a=""><c path="Array"><d/></c></f></getFontList>
		<onSetFocus public="1" set="dynamic"><f a="oldFocus">
	<d/>
	<x path="Void"/>
</f></onSetFocus>
		<onScroller public="1" set="dynamic"><f a="scrolledField">
	<c path="flash.TextField"/>
	<x path="Void"/>
</f></onScroller>
		<onKillFocus public="1" set="dynamic"><f a="newFocus">
	<d/>
	<x path="Void"/>
</f></onKillFocus>
		<onChanged public="1" set="dynamic"><f a="changedField">
	<c path="flash.TextField"/>
	<x path="Void"/>
</f></onChanged>
		<removeListener public="1" set="method"><f a="listener">
	<d/>
	<x path="Bool"/>
</f></removeListener>
		<addListener public="1" set="method"><f a="listener">
	<d/>
	<x path="Bool"/>
</f></addListener>
		<getDepth public="1" set="method"><f a=""><x path="Int"/></f></getDepth>
		<setNewTextFormat public="1" set="method"><f a="tf">
	<c path="flash.TextFormat"/>
	<x path="Void"/>
</f></setNewTextFormat>
		<getNewTextFormat public="1" set="method"><f a=""><c path="flash.TextFormat"/></f></getNewTextFormat>
		<removeTextField public="1" set="method"><f a=""><x path="Void"/></f></removeTextField>
		<setTextFormat public="1" set="method"><f a="begin:?end:?tf">
	<d/>
	<d/>
	<c path="flash.TextFormat"/>
	<x path="Void"/>
</f></setTextFormat>
		<getTextFormat public="1" set="method"><f a="?beginIndex:?endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.TextFormat"/>
</f></getTextFormat>
		<replaceSel public="1" set="method"><f a="newText">
	<c path="String"/>
	<x path="Void"/>
</f></replaceSel>
		<replaceText public="1" set="method"><f a="beginIndex:endIndex:newText">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></replaceText>
		<styleSheet public="1"><c path="flash.text.StyleSheet"/></styleSheet>
		<thickness public="1"><x path="Float"/></thickness>
		<filters public="1"><c path="Array"><d/></c></filters>
		<sharpness public="1"><x path="Float"/></sharpness>
		<gridFitType public="1"><c path="String"/></gridFitType>
		<antiAliasType public="1"><c path="String"/></antiAliasType>
		<mouseWheelEnabled public="1"><x path="Bool"/></mouseWheelEnabled>
		<wordWrap public="1"><x path="Bool"/></wordWrap>
		<variable public="1"><c path="String"/></variable>
		<type public="1"><c path="String"/></type>
		<textWidth public="1"><x path="Float"/></textWidth>
		<textHeight public="1"><x path="Float"/></textHeight>
		<textColor public="1"><x path="Int"/></textColor>
		<text public="1"><c path="String"/></text>
		<tabIndex public="1"><x path="Int"/></tabIndex>
		<tabEnabled public="1"><x path="Bool"/></tabEnabled>
		<selectable public="1"><x path="Bool"/></selectable>
		<scroll public="1"><x path="Float"/></scroll>
		<restrict public="1"><c path="String"/></restrict>
		<password public="1"><x path="Bool"/></password>
		<multiline public="1"><x path="Bool"/></multiline>
		<maxscroll public="1"><x path="Float"/></maxscroll>
		<maxhscroll public="1"><x path="Float"/></maxhscroll>
		<maxChars public="1"><x path="Int"/></maxChars>
		<length public="1"><x path="Int"/></length>
		<htmlText public="1"><c path="String"/></htmlText>
		<html public="1"><x path="Bool"/></html>
		<hscroll public="1"><x path="Float"/></hscroll>
		<embedFonts public="1"><x path="Bool"/></embedFonts>
		<condenseWhite public="1"><x path="Bool"/></condenseWhite>
		<bottomScroll public="1"><x path="Float"/></bottomScroll>
		<borderColor public="1"><x path="Int"/></borderColor>
		<border public="1"><x path="Bool"/></border>
		<backgroundColor public="1"><x path="Int"/></backgroundColor>
		<background public="1"><x path="Bool"/></background>
		<autoSize public="1"><d/></autoSize>
		<_parent public="1"><c path="flash.MovieClip"/></_parent>
		<_url public="1"><c path="String"/></_url>
		<_soundbuftime public="1"><x path="Float"/></_soundbuftime>
		<_focusrect public="1"><x path="Bool"/></_focusrect>
		<_quality public="1"><c path="String"/></_quality>
		<_totalframes public="1"><x path="Int"/></_totalframes>
		<_currentframe public="1"><x path="Int"/></_currentframe>
		<_droptarget public="1"><c path="String"/></_droptarget>
		<_framesloaded public="1"><x path="Int"/></_framesloaded>
		<_name public="1"><c path="String"/></_name>
		<_rotation public="1"><x path="Float"/></_rotation>
		<_target public="1"><c path="String"/></_target>
		<_visible public="1"><x path="Bool"/></_visible>
		<_alpha public="1"><x path="Float"/></_alpha>
		<_height public="1"><x path="Float"/></_height>
		<_width public="1"><x path="Float"/></_width>
		<_yscale public="1"><x path="Float"/></_yscale>
		<_xscale public="1"><x path="Float"/></_xscale>
		<_ymouse public="1"><x path="Float"/></_ymouse>
		<_xmouse public="1"><x path="Float"/></_xmouse>
		<_y public="1"><x path="Float"/></_y>
		<_x public="1"><x path="Float"/></_x>
	</class>
	<class path="flash.TextFormat" params="" file="/usr/lib/haxe/std/flash8/TextFormat.hx" extern="1">
		<display public="1"><c path="String"/></display>
		<letterSpacing public="1"><x path="Float"/></letterSpacing>
		<kerning public="1"><x path="Bool"/></kerning>
		<getTextExtent public="1" set="method"><f a="text:?width">
	<c path="String"/>
	<x path="Float"/>
	<d/>
</f></getTextExtent>
		<bullet public="1"><x path="Bool"/></bullet>
		<tabStops public="1"><c path="Array"><x path="Int"/></c></tabStops>
		<blockIndent public="1"><x path="Float"/></blockIndent>
		<leading public="1"><x path="Float"/></leading>
		<indent public="1"><x path="Float"/></indent>
		<rightMargin public="1"><x path="Float"/></rightMargin>
		<leftMargin public="1"><x path="Float"/></leftMargin>
		<align public="1"><c path="String"/></align>
		<underline public="1"><x path="Bool"/></underline>
		<italic public="1"><x path="Bool"/></italic>
		<bold public="1"><x path="Bool"/></bold>
		<target public="1"><c path="String"/></target>
		<url public="1"><c path="String"/></url>
		<color public="1"><x path="Int"/></color>
		<size public="1"><x path="Float"/></size>
		<font public="1"><c path="String"/></font>
		<new public="1" set="method"><f a="?font:?size:?textColor:?bold:?italic:?underline:?url:?window:?align:?leftMargin:?rightMargin:?indent:?leading">
	<c path="String"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.TextSnapshot" params="" file="/usr/lib/haxe/std/flash8/TextSnapshot.hx" extern="1">
		<setSelected public="1" set="method"><f a="start:end:select">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setSelected>
		<setSelectColor public="1" set="method"><f a="color">
	<x path="Int"/>
	<x path="Void"/>
</f></setSelectColor>
		<hitTestTextNearPos public="1" set="method"><f a="x:y:?closeDist">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></hitTestTextNearPos>
		<getText public="1" set="method"><f a="start:end:?includeLineEndings">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<c path="String"/>
</f></getText>
		<getSelectedText public="1" set="method"><f a="?includeLineEndings">
	<x path="Bool"/>
	<c path="String"/>
</f></getSelectedText>
		<getSelected public="1" set="method"><f a="start:?end">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></getSelected>
		<getCount public="1" set="method"><f a=""><x path="Int"/></f></getCount>
		<findText public="1" set="method"><f a="startIndex:textToFind:caseSensitive">
	<x path="Int"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Float"/>
</f></findText>
	</class>
	<class path="flash.Video" params="" file="/usr/lib/haxe/std/flash8/Video.hx" extern="1">
		<resume public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>flash lite only</haxe_doc>
		</resume>
		<pause public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>flash lite only</haxe_doc>
		</pause>
		<stop public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>flash lite only</haxe_doc>
		</stop>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>flash lite only</haxe_doc>
		</close>
		<play public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>flash lite only</haxe_doc>
		</play>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<attachVideo public="1" set="method"><f a="source">
	<d/>
	<x path="Void"/>
</f></attachVideo>
		<width public="1"><x path="Float"/></width>
		<smoothing public="1"><x path="Bool"/></smoothing>
		<height public="1"><x path="Float"/></height>
		<deblocking public="1"><x path="Float"/></deblocking>
	</class>
	<class path="flash.XMLRequest" params="" file="/usr/lib/haxe/std/flash8/XMLRequest.hx">
		<send public="1" set="method" line="5" static="1"><f a="url:xml:?target:?post:?content">
	<c path="String"/>
	<c path="Xml"/>
	<c path="String"/>
	<x path="Bool"/>
	<c path="String"/>
	<x path="Void"/>
</f></send>
		<load public="1" set="method" line="11" static="1"><f a="url:xml:onData:?post:?content">
	<c path="String"/>
	<c path="Xml"/>
	<f a="">
		<t path="Null"><c path="String"/></t>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<c path="String"/>
	<x path="Void"/>
</f></load>
	</class>
	<class path="flash.XMLSocket" params="" file="/usr/lib/haxe/std/flash8/XMLSocket.hx" extern="1">
		<onClose public="1" set="dynamic"><f a=""><x path="Void"/></f></onClose>
		<onConnect public="1" set="dynamic"><f a="success">
	<x path="Bool"/>
	<x path="Void"/>
</f></onConnect>
		<onData public="1" set="dynamic"><f a="src">
	<c path="String"/>
	<x path="Void"/>
</f></onData>
		<close public="1" set="method"><f a=""><x path="Bool"/></f></close>
		<send public="1" set="method"><f a="data">
	<d/>
	<x path="Bool"/>
</f></send>
		<connect public="1" set="method"><f a="url:port">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></connect>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.BitmapData" params="" file="/usr/lib/haxe/std/flash8/display/BitmapData.hx" extern="1">
		<loadBitmap public="1" set="method" static="1"><f a="id">
	<c path="String"/>
	<c path="flash.display.BitmapData"/>
</f></loadBitmap>
		<compare public="1" set="method">
			<f a="b">
				<c path="flash.display.BitmapData"/>
				<c path="flash.display.BitmapData"/>
			</f>
			<haxe_doc>FP9 only</haxe_doc>
		</compare>
		<generateFilterRect public="1" set="method"><f a="sourceRect:filter">
	<c path="flash.geom.Rectangle"><x path="Int"/></c>
	<c path="flash.filters.BitmapFilter"/>
	<c path="flash.geom.Rectangle"><x path="Int"/></c>
</f></generateFilterRect>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<clone public="1" set="method"><f a=""><c path="flash.display.BitmapData"/></f></clone>
		<copyChannel public="1" set="method"><f a="source:sourceRect:dest:sourceChannel:destChannel">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"><x path="Int"/></c>
	<c path="flash.geom.Point"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copyChannel>
		<noise public="1" set="method"><f a="seed:?low:?high:?channels:?gray">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></noise>
		<merge public="1" set="method"><f a="src:srcRect:dst:redMult:greenMult:blueMult:alphaMult">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"><x path="Int"/></c>
	<c path="flash.geom.Point"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></merge>
		<paletteMap public="1" set="method"><f a="source:srcRect:dst:?reds:?greens:?blues:?alphas">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"><x path="Int"/></c>
	<c path="flash.geom.Point"><x path="Int"/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></paletteMap>
		<hitTest public="1" set="method"><f a="firstPoint:firstAlpha:object:?secondPoint:?secondAlpha">
	<c path="flash.geom.Point"><x path="Int"/></c>
	<x path="Int"/>
	<d/>
	<c path="flash.geom.Point"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Bool"/>
</f></hitTest>
		<colorTransform public="1" set="method"><f a="r:trans">
	<c path="flash.geom.Rectangle"><x path="Int"/></c>
	<c path="flash.geom.ColorTransform"/>
	<x path="Void"/>
</f></colorTransform>
		<perlinNoise public="1" set="method"><f a="x:y:num:seed:stitch:noise:?channels:?gray:?offsets">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Bool"/>
	<c path="Array"><c path="flash.geom.Point"><x path="Float"/></c></c>
	<x path="Void"/>
</f></perlinNoise>
		<getColorBoundsRect public="1" set="method"><f a="mask:color:?fillColor">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<c path="flash.geom.Rectangle"><x path="Int"/></c>
</f></getColorBoundsRect>
		<floodFill public="1" set="method"><f a="x:y:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></floodFill>
		<pixelDissolve public="1" set="method"><f a="src:srcRect:dst:?seed:?npixels:?fillColor">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"><x path="Int"/></c>
	<c path="flash.geom.Point"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></pixelDissolve>
		<draw public="1" set="method"><f a="source:?matrix:?colortrans:?blendMode:?clipRect:?smooth">
	<d/>
	<c path="flash.geom.Matrix"/>
	<c path="flash.geom.ColorTransform"/>
	<d/>
	<c path="flash.geom.Rectangle"><x path="Int"/></c>
	<x path="Bool"/>
	<x path="Void"/>
</f></draw>
		<threshold public="1" set="method"><f a="src:srcRect:dstPoint:op:threshold:?color:?mask:?copy">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"><x path="Int"/></c>
	<c path="flash.geom.Point"><x path="Int"/></c>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></threshold>
		<scroll public="1" set="method"><f a="dx:dy">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></scroll>
		<applyFilter public="1" set="method"><f a="source:sourceRect:dest:filter">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"><x path="Int"/></c>
	<c path="flash.geom.Point"><x path="Int"/></c>
	<c path="flash.filters.BitmapFilter"/>
	<x path="Int"/>
</f></applyFilter>
		<copyPixels public="1" set="method"><f a="src:srcRect:dst:?alpha:?alphaPos:?mergeAlpha">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"><x path="Int"/></c>
	<c path="flash.geom.Point"><x path="Int"/></c>
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Point"><x path="Int"/></c>
	<x path="Bool"/>
	<x path="Void"/>
</f></copyPixels>
		<fillRect public="1" set="method"><f a="r:color">
	<c path="flash.geom.Rectangle"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></fillRect>
		<setPixel32 public="1" set="method"><f a="x:y:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setPixel32>
		<getPixel32 public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getPixel32>
		<setPixel public="1" set="method"><f a="x:y:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setPixel>
		<getPixel public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getPixel>
		<transparent public="1"><x path="Bool"/></transparent>
		<rectangle public="1"><c path="flash.geom.Rectangle"><x path="Int"/></c></rectangle>
		<height public="1"><x path="Int"/></height>
		<width public="1"><x path="Int"/></width>
		<new public="1" set="method"><f a="width:height:?transparent:?fillcolor">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.external.ExternalInterface" params="" file="/usr/lib/haxe/std/flash8/external/ExternalInterface.hx" extern="1">
		<available public="1" static="1"><x path="Bool"/></available>
		<marshallExceptions public="1" static="1"><x path="Bool"/></marshallExceptions>
		<addCallback public="1" set="method" static="1"><f a="methodName:instance:method">
	<c path="String"/>
	<d/>
	<d/>
	<x path="Bool"/>
</f></addCallback>
		<call public="1" set="method" static="1"><f a="methodName:?p1:?p2:?p3:?p4:?p5:?p6:?p7:?p8:?p9">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
</f></call>
	</class>
	<class path="flash.filters.BitmapFilter" params="" file="/usr/lib/haxe/std/flash8/filters/BitmapFilter.hx" extern="1"/>
	<class path="flash.filters.BevelFilter" params="" file="/usr/lib/haxe/std/flash8/filters/BevelFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<clone public="1" set="method"><f a=""><c path="flash.filters.BevelFilter"/></f></clone>
		<distance public="1"><x path="Float"/></distance>
		<angle public="1"><x path="Float"/></angle>
		<highlightColor public="1"><x path="Float"/></highlightColor>
		<highlightAlpha public="1"><x path="Float"/></highlightAlpha>
		<shadowColor public="1"><x path="Float"/></shadowColor>
		<shadowAlpha public="1"><x path="Float"/></shadowAlpha>
		<quality public="1"><x path="Float"/></quality>
		<strength public="1"><x path="Float"/></strength>
		<knockout public="1"><x path="Bool"/></knockout>
		<blurY public="1"><x path="Float"/></blurY>
		<blurX public="1"><x path="Float"/></blurX>
		<type public="1"><c path="String"/></type>
		<new public="1" set="method"><f a="?distance:?angle:?highlightColor:?highlightAlpha:?shadowColor:?shadowAlpha:?blurX:?blurY:?strength:?quality:?type:?knockout">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.filters.BlurFilter" params="" file="/usr/lib/haxe/std/flash8/filters/BlurFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<clone public="1" set="method"><f a=""><c path="flash.filters.BlurFilter"/></f></clone>
		<blurY public="1"><x path="Float"/></blurY>
		<blurX public="1"><x path="Float"/></blurX>
		<quality public="1"><x path="Float"/></quality>
		<new public="1" set="method"><f a="?blurX:?blurY:?quality">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.filters.ColorMatrixFilter" params="" file="/usr/lib/haxe/std/flash8/filters/ColorMatrixFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<clone public="1" set="method"><f a=""><c path="flash.filters.ColorMatrixFilter"/></f></clone>
		<matrix public="1"><c path="Array"><x path="Float"/></c></matrix>
		<new public="1" set="method"><f a="?matrix">
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.filters.ConvolutionFilter" params="" file="/usr/lib/haxe/std/flash8/filters/ConvolutionFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<clone public="1" set="method"><f a=""><c path="flash.filters.ConvolutionFilter"/></f></clone>
		<matrixY public="1"><x path="Float"/></matrixY>
		<matrixX public="1"><x path="Float"/></matrixX>
		<matrix public="1"><c path="Array"><d/></c></matrix>
		<divisor public="1"><x path="Float"/></divisor>
		<bias public="1"><x path="Float"/></bias>
		<preserveAlpha public="1"><x path="Bool"/></preserveAlpha>
		<clamp public="1"><x path="Bool"/></clamp>
		<color public="1"><x path="Float"/></color>
		<alpha public="1"><x path="Float"/></alpha>
		<new public="1" set="method"><f a="?matrixX:?matrixY:?matrix:?divisor:?bias:?preserveAlpha:?clamp:?color:?alpha">
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><d/></c>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.filters.DisplacementMapFilter" params="" file="/usr/lib/haxe/std/flash8/filters/DisplacementMapFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<clone public="1" set="method"><f a=""><c path="flash.filters.DisplacementMapFilter"/></f></clone>
		<mapBitmap public="1"><c path="flash.display.BitmapData"/></mapBitmap>
		<mapPoint public="1"><c path="flash.geom.Point"><x path="Float"/></c></mapPoint>
		<componentY public="1"><x path="Float"/></componentY>
		<componentX public="1"><x path="Float"/></componentX>
		<scaleY public="1"><x path="Float"/></scaleY>
		<scaleX public="1"><x path="Float"/></scaleX>
		<mode public="1"><c path="String"/></mode>
		<color public="1"><x path="Float"/></color>
		<alpha public="1"><x path="Float"/></alpha>
		<new public="1" set="method"><f a="?mapBitmap:?mapPoint:?componentX:?componentY:?scaleX:?scaleY:?mode:?color:?alpha">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Point"><x path="Float"/></c>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="String"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.filters.DropShadowFilter" params="" file="/usr/lib/haxe/std/flash8/filters/DropShadowFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<clone public="1" set="method"><f a=""><c path="flash.filters.DropShadowFilter"/></f></clone>
		<distance public="1"><x path="Float"/></distance>
		<angle public="1"><x path="Float"/></angle>
		<color public="1"><x path="Float"/></color>
		<alpha public="1"><x path="Float"/></alpha>
		<quality public="1"><x path="Float"/></quality>
		<inner public="1"><x path="Bool"/></inner>
		<strength public="1"><x path="Float"/></strength>
		<knockout public="1"><x path="Bool"/></knockout>
		<blurY public="1"><x path="Float"/></blurY>
		<blurX public="1"><x path="Float"/></blurX>
		<hideObject public="1"><x path="Bool"/></hideObject>
		<new public="1" set="method"><f a="?distance:?angle:?color:?alpha:?blurX:?blurY:?strength:?quality:?inner:?knockout:?hideObject">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.filters.GlowFilter" params="" file="/usr/lib/haxe/std/flash8/filters/GlowFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<clone public="1" set="method"><f a=""><c path="flash.filters.GlowFilter"/></f></clone>
		<color public="1"><x path="Float"/></color>
		<alpha public="1"><x path="Float"/></alpha>
		<inner public="1"><x path="Bool"/></inner>
		<quality public="1"><x path="Float"/></quality>
		<strength public="1"><x path="Float"/></strength>
		<knockout public="1"><x path="Bool"/></knockout>
		<blurY public="1"><x path="Float"/></blurY>
		<blurX public="1"><x path="Float"/></blurX>
		<new public="1" set="method"><f a="?color:?alpha:?blurX:?blurY:?strength:?quality:?inner:?knockout">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.filters.GradientBevelFilter" params="" file="/usr/lib/haxe/std/flash8/filters/GradientBevelFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<clone public="1" set="method"><f a=""><c path="flash.filters.GradientBevelFilter"/></f></clone>
		<distance public="1"><x path="Float"/></distance>
		<angle public="1"><x path="Float"/></angle>
		<colors public="1"><c path="Array"><d/></c></colors>
		<alphas public="1"><c path="Array"><d/></c></alphas>
		<ratios public="1"><c path="Array"><d/></c></ratios>
		<blurY public="1"><x path="Float"/></blurY>
		<blurX public="1"><x path="Float"/></blurX>
		<quality public="1"><x path="Float"/></quality>
		<strength public="1"><x path="Float"/></strength>
		<knockout public="1"><x path="Bool"/></knockout>
		<type public="1"><c path="String"/></type>
		<new public="1" set="method"><f a="?distance:?angle:?colors:?alphas:?ratios:?blurX:?blurY:?strength:?quality:?type:?knockout">
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.filters.GradientGlowFilter" params="" file="/usr/lib/haxe/std/flash8/filters/GradientGlowFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<clone public="1" set="method"><f a=""><c path="flash.filters.GradientGlowFilter"/></f></clone>
		<distance public="1"><x path="Float"/></distance>
		<angle public="1"><x path="Float"/></angle>
		<colors public="1"><c path="Array"><x path="Float"/></c></colors>
		<alphas public="1"><c path="Array"><x path="Float"/></c></alphas>
		<ratios public="1"><c path="Array"><x path="Float"/></c></ratios>
		<blurY public="1"><x path="Float"/></blurY>
		<blurX public="1"><x path="Float"/></blurX>
		<quality public="1"><x path="Float"/></quality>
		<strength public="1"><x path="Float"/></strength>
		<knockout public="1"><x path="Bool"/></knockout>
		<type public="1"><c path="String"/></type>
		<new public="1" set="method"><f a="?distance:?angle:?colors:?alphas:?ratios:?blurX:?blurY:?strength:?quality:?type:?knockout">
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.ColorTransform" params="" file="/usr/lib/haxe/std/flash8/geom/ColorTransform.hx" extern="1">
		<concat public="1" set="method"><f a="c">
	<c path="flash.geom.ColorTransform"/>
	<x path="Void"/>
</f></concat>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<alphaMultiplier public="1"><x path="Float"/></alphaMultiplier>
		<redMultiplier public="1"><x path="Float"/></redMultiplier>
		<greenMultiplier public="1"><x path="Float"/></greenMultiplier>
		<blueMultiplier public="1"><x path="Float"/></blueMultiplier>
		<alphaOffset public="1"><x path="Float"/></alphaOffset>
		<redOffset public="1"><x path="Float"/></redOffset>
		<greenOffset public="1"><x path="Float"/></greenOffset>
		<blueOffset public="1"><x path="Float"/></blueOffset>
		<rgb public="1"><x path="Float"/></rgb>
		<new public="1" set="method"><f a="?rm:?gm:?bm:?am:?ro:?go:?bo:?ao">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Matrix" params="" file="/usr/lib/haxe/std/flash8/geom/Matrix.hx" extern="1">
		<createBox public="1" set="method"><f a="scalex:scaley:?rot:?tx:?ty">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></createBox>
		<createGradientBox public="1" set="method"><f a="width:height:?rot:?tx:?ty">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></createGradientBox>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Matrix"/></f></clone>
		<concat public="1" set="method"><f a="m">
	<c path="flash.geom.Matrix"/>
	<x path="Void"/>
</f></concat>
		<invert public="1" set="method"><f a=""><x path="Void"/></f></invert>
		<identity public="1" set="method"><f a=""><x path="Void"/></f></identity>
		<rotate public="1" set="method"><f a="r">
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
		<translate public="1" set="method"><f a="tx:ty">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></translate>
		<scale public="1" set="method"><f a="sx:sy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scale>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<deltaTransformPoint public="1" set="method"><f a="p">
	<c path="flash.geom.Point"><x path="Float"/></c>
	<c path="flash.geom.Point"><x path="Float"/></c>
</f></deltaTransformPoint>
		<transformPoint public="1" set="method"><f a="p">
	<c path="flash.geom.Point"><x path="Float"/></c>
	<c path="flash.geom.Point"><x path="Float"/></c>
</f></transformPoint>
		<ty public="1"><x path="Float"/></ty>
		<tx public="1"><x path="Float"/></tx>
		<d public="1"><x path="Float"/></d>
		<c public="1"><x path="Float"/></c>
		<b public="1"><x path="Float"/></b>
		<a public="1"><x path="Float"/></a>
		<new public="1" set="method"><f a="?a:?b:?c:?d:?tx:?ty">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Point" params="T" file="/usr/lib/haxe/std/flash8/geom/Point.hx" extern="1">
		<distance public="1" params="T" set="method" static="1"><f a="p1:p2">
	<c path="flash.geom.Point"><c path="distance.T"/></c>
	<c path="flash.geom.Point"><c path="distance.T"/></c>
	<c path="distance.T"/>
</f></distance>
		<interpolate public="1" params="T" set="method" static="1"><f a="p1:p2:f">
	<c path="flash.geom.Point"><c path="interpolate.T"/></c>
	<c path="flash.geom.Point"><c path="interpolate.T"/></c>
	<c path="interpolate.T"/>
	<c path="flash.geom.Point"><c path="interpolate.T"/></c>
</f></interpolate>
		<polar public="1" params="T" set="method" static="1"><f a="dist:angle">
	<c path="polar.T"/>
	<c path="polar.T"/>
	<c path="flash.geom.Point"><c path="polar.T"/></c>
</f></polar>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Point"><c path="flash.geom.Point.T"/></c></f></clone>
		<offset public="1" set="method"><f a="dx:dy">
	<c path="flash.geom.Point.T"/>
	<c path="flash.geom.Point.T"/>
	<x path="Void"/>
</f></offset>
		<equals public="1" set="method"><f a="p">
	<c path="flash.geom.Point"><c path="flash.geom.Point.T"/></c>
	<x path="Bool"/>
</f></equals>
		<subtract public="1" set="method"><f a="p">
	<c path="flash.geom.Point"><c path="flash.geom.Point.T"/></c>
	<c path="flash.geom.Point"><c path="flash.geom.Point.T"/></c>
</f></subtract>
		<add public="1" set="method"><f a="p">
	<c path="flash.geom.Point"><c path="flash.geom.Point.T"/></c>
	<c path="flash.geom.Point"><c path="flash.geom.Point.T"/></c>
</f></add>
		<normalize public="1" set="method"><f a="length">
	<c path="flash.geom.Point.T"/>
	<x path="Void"/>
</f></normalize>
		<length public="1"><x path="Float"/></length>
		<y public="1"><c path="flash.geom.Point.T"/></y>
		<x public="1"><c path="flash.geom.Point.T"/></x>
		<new public="1" set="method"><f a="x:y">
	<c path="flash.geom.Point.T"/>
	<c path="flash.geom.Point.T"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Rectangle" params="T" file="/usr/lib/haxe/std/flash8/geom/Rectangle.hx" extern="1">
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Rectangle"><c path="flash.geom.Rectangle.T"/></c></f></clone>
		<setEmpty public="1" set="method"><f a=""><x path="Void"/></f></setEmpty>
		<isEmpty public="1" set="method"><f a=""><x path="Bool"/></f></isEmpty>
		<inflate public="1" set="method"><f a="x:y">
	<c path="flash.geom.Rectangle.T"/>
	<c path="flash.geom.Rectangle.T"/>
	<x path="Void"/>
</f></inflate>
		<inflatePoint public="1" set="method"><f a="p">
	<c path="flash.geom.Point"><c path="flash.geom.Rectangle.T"/></c>
	<x path="Void"/>
</f></inflatePoint>
		<offset public="1" set="method"><f a="x:y">
	<c path="flash.geom.Rectangle.T"/>
	<c path="flash.geom.Rectangle.T"/>
	<x path="Void"/>
</f></offset>
		<offsetPoint public="1" set="method"><f a="p">
	<c path="flash.geom.Point"><c path="flash.geom.Rectangle.T"/></c>
	<x path="Void"/>
</f></offsetPoint>
		<contains public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></contains>
		<containsPoint public="1" set="method"><f a="p">
	<c path="flash.geom.Point"><c path="flash.geom.Rectangle.T"/></c>
	<x path="Bool"/>
</f></containsPoint>
		<containsRectangle public="1" set="method"><f a="r">
	<c path="flash.geom.Rectangle"><c path="flash.geom.Rectangle.T"/></c>
	<x path="Bool"/>
</f></containsRectangle>
		<intersection public="1" set="method"><f a="r">
	<c path="flash.geom.Rectangle"><c path="flash.geom.Rectangle.T"/></c>
	<c path="flash.geom.Rectangle"><c path="flash.geom.Rectangle.T"/></c>
</f></intersection>
		<intersects public="1" set="method"><f a="r">
	<c path="flash.geom.Rectangle"><c path="flash.geom.Rectangle.T"/></c>
	<x path="Bool"/>
</f></intersects>
		<union public="1" set="method"><f a="r">
	<c path="flash.geom.Rectangle"><c path="flash.geom.Rectangle.T"/></c>
	<c path="flash.geom.Rectangle"><c path="flash.geom.Rectangle.T"/></c>
</f></union>
		<equals public="1" set="method"><f a="r">
	<c path="flash.geom.Rectangle"><c path="flash.geom.Rectangle.T"/></c>
	<x path="Bool"/>
</f></equals>
		<topLeft public="1"><c path="flash.geom.Point"><c path="flash.geom.Rectangle.T"/></c></topLeft>
		<bottomRight public="1"><c path="flash.geom.Point"><c path="flash.geom.Rectangle.T"/></c></bottomRight>
		<size public="1"><c path="flash.geom.Point"><c path="flash.geom.Rectangle.T"/></c></size>
		<height public="1"><c path="flash.geom.Rectangle.T"/></height>
		<width public="1"><c path="flash.geom.Rectangle.T"/></width>
		<y public="1"><c path="flash.geom.Rectangle.T"/></y>
		<x public="1"><c path="flash.geom.Rectangle.T"/></x>
		<bottom public="1"><c path="flash.geom.Rectangle.T"/></bottom>
		<right public="1"><c path="flash.geom.Rectangle.T"/></right>
		<top public="1"><c path="flash.geom.Rectangle.T"/></top>
		<left public="1"><c path="flash.geom.Rectangle.T"/></left>
		<new public="1" set="method"><f a="x:y:w:h">
	<c path="flash.geom.Rectangle.T"/>
	<c path="flash.geom.Rectangle.T"/>
	<c path="flash.geom.Rectangle.T"/>
	<c path="flash.geom.Rectangle.T"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Transform" params="" file="/usr/lib/haxe/std/flash8/geom/Transform.hx" extern="1">
		<pixelBounds public="1"><c path="flash.geom.Rectangle"><x path="Float"/></c></pixelBounds>
		<concatenatedColorTransform public="1"><c path="flash.geom.ColorTransform"/></concatenatedColorTransform>
		<colorTransform public="1"><c path="flash.geom.ColorTransform"/></colorTransform>
		<concatenatedMatrix public="1"><c path="flash.geom.Matrix"/></concatenatedMatrix>
		<matrix public="1"><c path="flash.geom.Matrix"/></matrix>
		<new public="1" set="method"><f a="mc">
	<c path="flash.MovieClip"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.net.FileReference" params="" file="/usr/lib/haxe/std/flash8/net/FileReference.hx" extern="1">
		<removeListener public="1" set="method"><f a="listener">
	<d/>
	<x path="Bool"/>
</f></removeListener>
		<addListener public="1" set="method"><f a="listener">
	<d/>
	<x path="Void"/>
</f></addListener>
		<cancel public="1" set="method"><f a=""><x path="Void"/></f></cancel>
		<download public="1" set="method"><f a="url:?defaultName">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
</f></download>
		<upload public="1" set="method"><f a="url">
	<c path="String"/>
	<x path="Bool"/>
</f></upload>
		<browse public="1" set="method"><f a="?typeList">
	<c path="Array"><d/></c>
	<x path="Bool"/>
</f></browse>
		<postData public="1"><c path="String"/></postData>
		<name public="1"><c path="String"/></name>
		<type public="1"><c path="String"/></type>
		<size public="1"><x path="Float"/></size>
		<modificationDate public="1"><c path="Date"/></modificationDate>
		<creationDate public="1"><c path="Date"/></creationDate>
		<creator public="1"><c path="String"/></creator>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.FileReferenceList" params="" file="/usr/lib/haxe/std/flash8/net/FileReferenceList.hx" extern="1">
		<removeListener public="1" set="method"><f a="listener">
	<d/>
	<x path="Bool"/>
</f></removeListener>
		<addListener public="1" set="method"><f a="listener">
	<d/>
	<x path="Void"/>
</f></addListener>
		<browse public="1" set="method"><f a="?typeList">
	<c path="Array"><d/></c>
	<x path="Bool"/>
</f></browse>
		<fileList public="1"><c path="Array"><d/></c></fileList>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.system.Capabilities" params="" file="/usr/lib/haxe/std/flash8/system/Capabilities.hx" extern="1">
		<hasAudio public="1" static="1"><x path="Bool"/></hasAudio>
		<hasMP3 public="1" static="1"><x path="Bool"/></hasMP3>
		<hasAudioEncoder public="1" static="1"><x path="Bool"/></hasAudioEncoder>
		<hasVideoEncoder public="1" static="1"><x path="Bool"/></hasVideoEncoder>
		<screenResolutionX public="1" static="1"><x path="Float"/></screenResolutionX>
		<screenResolutionY public="1" static="1"><x path="Float"/></screenResolutionY>
		<screenDPI public="1" static="1"><x path="Float"/></screenDPI>
		<screenColor public="1" static="1"><c path="String"/></screenColor>
		<pixelAspectRatio public="1" static="1"><x path="Float"/></pixelAspectRatio>
		<hasAccessibility public="1" static="1"><x path="Bool"/></hasAccessibility>
		<input public="1" static="1"><c path="String"/></input>
		<isDebugger public="1" static="1"><x path="Bool"/></isDebugger>
		<language public="1" static="1"><c path="String"/></language>
		<manufacturer public="1" static="1"><c path="String"/></manufacturer>
		<os public="1" static="1"><c path="String"/></os>
		<serverString public="1" static="1"><c path="String"/></serverString>
		<version public="1" static="1"><c path="String"/></version>
		<hasPrinting public="1" static="1"><x path="Bool"/></hasPrinting>
		<playerType public="1" static="1"><c path="String"/></playerType>
		<hasStreamingAudio public="1" static="1"><x path="Bool"/></hasStreamingAudio>
		<hasScreenBroadcast public="1" static="1"><x path="Bool"/></hasScreenBroadcast>
		<hasScreenPlayback public="1" static="1"><x path="Bool"/></hasScreenPlayback>
		<hasStreamingVideo public="1" static="1"><x path="Bool"/></hasStreamingVideo>
		<hasEmbeddedVideo public="1" static="1"><x path="Bool"/></hasEmbeddedVideo>
		<avHardwareDisable public="1" static="1"><x path="Bool"/></avHardwareDisable>
		<localFileReadDisable public="1" static="1"><x path="Bool"/></localFileReadDisable>
		<windowlessDisable public="1" static="1"><x path="Bool"/></windowlessDisable>
		<hasCompoundSound public="1" static="1"><x path="Bool"/></hasCompoundSound>
		<hasEmail public="1" static="1"><x path="Bool"/></hasEmail>
		<hasMMS public="1" static="1"><x path="Bool"/></hasMMS>
		<hasSMS public="1" static="1"><x path="Bool"/></hasSMS>
		<hasMFI public="1" static="1"><x path="Bool"/></hasMFI>
		<hasMIDI public="1" static="1"><x path="Bool"/></hasMIDI>
		<hasSMAF public="1" static="1"><x path="Bool"/></hasSMAF>
		<hasDataLoading public="1" static="1"><x path="Bool"/></hasDataLoading>
		<has4WayKeyAS public="1" static="1"><x path="Bool"/></has4WayKeyAS>
		<hasMouse public="1" static="1"><x path="Bool"/></hasMouse>
		<hasMappableSoftKeys public="1" static="1"><x path="Bool"/></hasMappableSoftKeys>
		<hasCMIDI public="1" static="1"><x path="Bool"/></hasCMIDI>
		<hasStylus public="1" static="1"><x path="Bool"/></hasStylus>
		<screenOrientation public="1" static="1"><c path="String"/></screenOrientation>
		<hasSharedObjects public="1" static="1"><x path="Bool"/></hasSharedObjects>
		<hasQWERTYKeyboard public="1" static="1"><x path="Bool"/></hasQWERTYKeyboard>
		<softKeyCount public="1" static="1"><x path="Float"/></softKeyCount>
		<audioMIMETypes public="1" static="1"><c path="Array"><c path="String"/></c></audioMIMETypes>
		<imageMIMETypes public="1" static="1"><c path="Array"><c path="String"/></c></imageMIMETypes>
		<videoMIMETypes public="1" static="1"><c path="Array"><c path="String"/></c></videoMIMETypes>
		<MIMETypes public="1" static="1"><c path="String"/></MIMETypes>
	</class>
	<class path="flash.system.IME" params="" file="/usr/lib/haxe/std/flash8/system/IME.hx" extern="1">
		<ALPHANUMERIC_FULL public="1" static="1"><c path="String"/></ALPHANUMERIC_FULL>
		<ALPHANUMERIC_HALF public="1" static="1"><c path="String"/></ALPHANUMERIC_HALF>
		<CHINESE public="1" static="1"><c path="String"/></CHINESE>
		<JAPANESE_HIRAGANA public="1" static="1"><c path="String"/></JAPANESE_HIRAGANA>
		<JAPANESE_KATAKANA_FULL public="1" static="1"><c path="String"/></JAPANESE_KATAKANA_FULL>
		<JAPANESE_KATAKANA_HALF public="1" static="1"><c path="String"/></JAPANESE_KATAKANA_HALF>
		<KOREAN public="1" static="1"><c path="String"/></KOREAN>
		<UNKNOWN public="1" static="1"><c path="String"/></UNKNOWN>
		<getEnabled public="1" set="method" static="1"><f a=""><x path="Bool"/></f></getEnabled>
		<setEnabled public="1" set="method" static="1"><f a="enabled">
	<x path="Bool"/>
	<x path="Bool"/>
</f></setEnabled>
		<getConversionMode public="1" set="method" static="1"><f a=""><c path="String"/></f></getConversionMode>
		<setConversionMode public="1" set="method" static="1"><f a="mode">
	<c path="String"/>
	<x path="Bool"/>
</f></setConversionMode>
		<setCompositionString public="1" set="method" static="1"><f a="composition">
	<c path="String"/>
	<x path="Bool"/>
</f></setCompositionString>
		<doConversion public="1" set="method" static="1"><f a=""><x path="Bool"/></f></doConversion>
		<addListener public="1" set="method" static="1"><f a="listener">
	<d/>
	<x path="Void"/>
</f></addListener>
		<removeListener public="1" set="method" static="1"><f a="listener">
	<d/>
	<x path="Bool"/>
</f></removeListener>
	</class>
	<class path="flash.system.Security" params="" file="/usr/lib/haxe/std/flash8/system/Security.hx" extern="1">
		<allowDomain public="1" set="method" static="1"><f a="domain">
	<c path="String"/>
	<x path="Void"/>
</f></allowDomain>
		<allowInsecureDomain public="1" set="method" static="1"><f a="domain">
	<c path="String"/>
	<x path="Void"/>
</f></allowInsecureDomain>
		<loadPolicyFile public="1" set="method" static="1"><f a="url">
	<c path="String"/>
	<x path="Void"/>
</f></loadPolicyFile>
		<sandboxType public="1" set="null" static="1"><c path="String"/></sandboxType>
	</class>
	<class path="flash.text.StyleSheet" params="" file="/usr/lib/haxe/std/flash8/text/StyleSheet.hx" extern="1">
		<onLoad public="1" set="dynamic"><f a="success">
	<x path="Bool"/>
	<x path="Void"/>
</f></onLoad>
		<load public="1" set="method"><f a="url">
	<c path="String"/>
	<x path="Bool"/>
</f></load>
		<parse public="1" set="method"><f a="cssText">
	<c path="String"/>
	<x path="Bool"/>
</f></parse>
		<parseCSS public="1" set="method"><f a="cssText">
	<c path="String"/>
	<x path="Bool"/>
</f></parseCSS>
		<transform public="1" set="method"><f a="style">
	<d/>
	<c path="flash.TextFormat"/>
</f></transform>
		<getStyleNames public="1" set="method"><f a=""><c path="Array"><d/></c></f></getStyleNames>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<setStyle public="1" set="method"><f a="name:style">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></setStyle>
		<getStyle public="1" set="method"><f a="name">
	<c path="String"/>
	<d/>
</f></getStyle>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.text.TextRenderer" params="" file="/usr/lib/haxe/std/flash8/text/TextRenderer.hx" extern="1">
		<maxLevel public="1" static="1"><x path="Float"/></maxLevel>
		<setAdvancedAntialiasingTable public="1" set="method" static="1"><f a="fontName:fontStyle:colorType:advancedAntialiasingTable">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></setAdvancedAntialiasingTable>
	</class>
	<enum path="haxe.StackItem" params="" file="/usr/lib/haxe/std/haxe/CallStack.hx" module="haxe.CallStack">
		<Module a="m"><c path="String"/></Module>
		<Method a="classname:method">
			<c path="String"/>
			<c path="String"/>
		</Method>
		<Lambda a="v"><x path="Int"/></Lambda>
		<FilePos a="s:file:line">
			<t path="Null"><e path="haxe.StackItem"/></t>
			<c path="String"/>
			<x path="Int"/>
		</FilePos>
		<CFunction/>
		<haxe_doc>Elements return by [Stack] methods.</haxe_doc>
	</enum>
	<class path="haxe.CallStack" params="" file="/usr/lib/haxe/std/haxe/CallStack.hx">
		<callStack public="1" set="method" line="43" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>Return the call stack elements, or an empty array if not available.</haxe_doc>
		</callStack>
		<exceptionStack public="1" set="method" line="94" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>Return the exception stack : this is the stack elements between
		the place the last exception was thrown and the place it was
		caught, or an empty array if not available.</haxe_doc>
		</exceptionStack>
		<toString public="1" set="method" line="128" static="1">
			<f a="stack">
				<c path="Array"><e path="haxe.StackItem"/></c>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a representation of the stack as a printable string.</haxe_doc>
		</toString>
		<itemToString set="method" line="137" static="1"><f a="b:s">
	<c path="StringBuf"/>
	<e path="haxe.StackItem"/>
	<x path="Void"/>
</f></itemToString>
		<makeStack set="method" line="164" static="1"><f a="s">
	<c path="String"/>
	<c path="Array"><e path="haxe.StackItem"/></c>
</f></makeStack>
		<haxe_doc>Get informations about the call stack.</haxe_doc>
	</class>
	<abstract path="haxe.EnumFlags" params="T" file="/usr/lib/haxe/std/haxe/EnumFlags.hx">
		<from><x path="Int"/></from>
		<to><x path="Int"/></to>
		<haxe_doc>A typed interface for bit flags. This is not a real object, only a typed
	interface for an actual Int. Each flag can be tested/set with the
	corresponding enum instance. Up to 32 flags can be stored that way.
	
	Enum constructor indices are preserved from haxe syntax, so the first
	declared is index 0, the next index 1 etc. The methods are optimized if the
	enum instance is passed directly, e.g. as has(EnumCtor). Otherwise
	Type.enumIndex() reflection is used.</haxe_doc>
	</abstract>
	<class path="haxe._EnumFlags.EnumFlags_Impl_" params="" file="/usr/lib/haxe/std/haxe/EnumFlags.hx" private="1" module="haxe.EnumFlags">
		<_new public="1" get="inline" set="null" line="39" static="1">
			<f a="?i">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Initializes the bitflags to [i].</haxe_doc>
		</_new>
		<has public="1" get="inline" set="null" line="51" static="1">
			<f a="this:v">
				<x path="Int"/>
				<c path="haxe.EnumFlags.T"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Checks if the index of enum instance [v] is set.
		
		This method is optimized if [v] is an enum instance expression such as
		SomeEnum.SomeCtor.
		
		If [v] is null, the result is unspecified.</haxe_doc>
		</has>
		<set public="1" get="inline" set="null" line="63" static="1">
			<f a="this:v">
				<x path="Int"/>
				<c path="haxe.EnumFlags.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Sets the index of enum instance [v].
		
		This method is optimized if [v] is an enum instance expression such as
		SomeEnum.SomeCtor.
		
		If [v] is null, the result is unspecified.</haxe_doc>
		</set>
		<unset public="1" get="inline" set="null" line="75" static="1">
			<f a="this:v">
				<x path="Int"/>
				<c path="haxe.EnumFlags.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Unsets the index of enum instance [v].
		
		This method is optimized if [v] is an enum instance expression such as
		SomeEnum.SomeCtor.
		
		If [v] is null, the result is unspecified.</haxe_doc>
		</unset>
		<ofInt public="1" params="T" get="inline" set="null" line="83" static="1">
			<f a="i">
				<x path="Int"/>
				<x path="haxe.EnumFlags"><c path="ofInt.T"/></x>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>Convert a integer bitflag into a typed one (this is a no-op, it does not
		have any impact on speed).</haxe_doc>
		</ofInt>
		<toInt public="1" get="inline" set="null" line="91" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
			<haxe_doc>Convert the typed bitflag into the corresponding int value (this is a
		no-op, it doesn't have any impact on speed).</haxe_doc>
		</toInt>
	</class>
	<class path="haxe.EnumTools" params="" file="/usr/lib/haxe/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="41" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum [e], including its path.
		
		If [e] is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
			pack1.pack2.(...).packN.EnumName
		If [e] is a sub-type of a haxe module, that module is not part of the
		package structure.
			
		If [e] has no package, the enum name is returned.
		
		If [e] is null, the result is unspecified.
		
		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="54" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum [e] by calling its constructor [constr] with
		arguments [params].
		
		If [e] or [constr] is null, or if enum [e] has no constructor named
		[constr], or if the number of elements in [params] does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="70" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum [e] by calling its constructor number
		[index] with arguments [params].
		
		The constructor indices are preserved from haxe syntax, so the first
		declared is index 0, the next index 1 etc.
		
		If [e] or [constr] is null, or if enum [e] has no constructor named
		[constr], or if the number of elements in [params] does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="87" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum [e] that require no
		arguments.
		
		This may return the empty Array [] if all constructors of [e] require
		arguments.
		
		Otherwise an instance of [e] constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.
		
		If [e] is null, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="99" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum [e].
		
		The order of the constructor names in the returned Array is preserved
		from the original syntax.
		
		If [c] is null, the result is unspecified.</haxe_doc>
		</getConstructors>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/usr/lib/haxe/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="114" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances [a] and [b] by value.
		
		Unlike [a] == [b], this function performs a deep equality check on the
		arguments of the constructors, if exists.
		
		If [a] or [b] are null, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="125" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance [e].
		
		The result String does not contain any constructor arguments.
		
		If [e] is null, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="139" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance [e].
		
		If [e] has no arguments, the result is [].
		
		Otherwise the result are the values that were used as arguments to [e],
		in the order of their declaration.
		
		If [e] is null, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="151" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance [e].
		
		This corresponds to the original syntactic position of [e]. The index of
		the first declared constructor is 0, the next one is 1 etc.
		
		If [e] is null, the result is unspecified.</haxe_doc>
		</getIndex>
	</class>
	<class path="haxe.Http" params="" file="/usr/lib/haxe/std/haxe/Http.hx">
		<onStatus public="1" set="dynamic" line="724">
			<f a="status">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a Http status change, with [status] being the
		new status.

		The intended usage is to bind it to a custom function:
			httpInstance.onStatus = function(status) { // handle status }</haxe_doc>
		</onStatus>
		<onError public="1" set="dynamic" line="714">
			<f a="msg">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a request error, with [msg] containing the
		error description.

		The intended usage is to bind it to a custom function:
			httpInstance.onError = function(msg) { // handle error }</haxe_doc>
		</onError>
		<onData public="1" set="dynamic" line="704">
			<f a="data">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>This method is called upon a successful request, with [data] containing
		the result String.

		The intended usage is to bind it to a custom function:
			httpInstance.onData = function(data) { // handle result }</haxe_doc>
		</onData>
		<request public="1" set="method" line="159">
			<f a="?post">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sends [this] Http request to the Url specified by [this].url.

		If [post] is true, the request is sent as POST request, otherwise it is
		sent as GET request.

		Depending on the outcome of the request, this method calls the
		onStatus(), onError() or onData() callback functions.

		If [this].url is null, the result is unspecified.

		If [this].url is an invalid or inaccessible Url, the onError() callback
		function is called.

		(Js) If [this].async is false, the callback functions are called before
		this method returns.</haxe_doc>
		</request>
		<setParameter public="1" set="method" line="120">
			<f a="param:value">
				<c path="String"/>
				<c path="String"/>
				<c path="haxe.Http"/>
			</f>
			<haxe_doc>Sets the parameter identified as [param] to value [value].

		If [header] or [value] are null, the result is unspecified.

		This method provides a fluent interface.</haxe_doc>
		</setParameter>
		<setHeader public="1" set="method" line="108">
			<f a="header:value">
				<c path="String"/>
				<c path="String"/>
				<c path="haxe.Http"/>
			</f>
			<haxe_doc>Sets the header identified as [header] to value [value].

		If [header] or [value] are null, the result is unspecified.

		This method provides a fluent interface.</haxe_doc>
		</setHeader>
		<params><c path="haxe.ds.StringMap"><c path="String"/></c></params>
		<headers><c path="haxe.ds.StringMap"><c path="String"/></c></headers>
		<postData><c path="String"/></postData>
		<responseData public="1" set="null"><t path="Null"><c path="String"/></t></responseData>
		<url public="1">
			<c path="String"/>
			<haxe_doc>The url of [this] request. It is used only by the request() method and
		can be changed in order to send the same request to different target
		Urls.</haxe_doc>
		</url>
		<new public="1" set="method" line="87">
			<f a="url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Http instance with [url] as parameter.

		This does not do a request until request() is called.

		If [url] is null, the field url must be set to a value before making the
		call to request(), or the result is unspecified.

		(Php) Https (SSL) connections are allowed only if the OpenSSL extension
		is enabled.</haxe_doc>
		</new>
		<haxe_doc>This class can be used to handle Http requests consistently across
	platforms. There are two intended usages:
	- call haxe.Http.requestUrl(url) and receive the result as a String (not
		available on flash)
	- create a new haxe.Http(url), register your callbacks for onData, onError
		and onStatus, then call request().</haxe_doc>
	</class>
	<class path="haxe.Int64" params="" file="/usr/lib/haxe/std/haxe/Int64.hx">
		<i32 get="inline" set="null" line="34" static="1">
			<f a="i">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":extern"/></meta>
		</i32>
		<i32mul get="inline" set="null" line="42" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":extern"/></meta>
		</i32mul>
		<make public="1" get="inline" set="null" line="73" static="1"><f a="high:low">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.Int64"/>
</f></make>
		<ofInt public="1" get="inline" set="null" line="77" static="1"><f a="x">
	<x path="Int"/>
	<c path="haxe.Int64"/>
</f></ofInt>
		<toInt public="1" set="method" line="81" static="1"><f a="x">
	<c path="haxe.Int64"/>
	<x path="Int"/>
</f></toInt>
		<getLow public="1" set="method" line="90" static="1"><f a="x">
	<c path="haxe.Int64"/>
	<x path="Int"/>
</f></getLow>
		<getHigh public="1" set="method" line="94" static="1"><f a="x">
	<c path="haxe.Int64"/>
	<x path="Int"/>
</f></getHigh>
		<add public="1" set="method" line="98" static="1"><f a="a:b">
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
</f></add>
		<sub public="1" set="method" line="106" static="1"><f a="a:b">
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
</f></sub>
		<mul public="1" set="method" line="114" static="1"><f a="a:b">
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
</f></mul>
		<divMod set="method" line="131" static="1"><f a="modulus:divisor">
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
	<a>
		<quotient><c path="haxe.Int64"/></quotient>
		<modulus><c path="haxe.Int64"/></modulus>
	</a>
</f></divMod>
		<div public="1" get="inline" set="null" line="158" static="1"><f a="a:b">
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
</f></div>
		<mod public="1" get="inline" set="null" line="166" static="1"><f a="a:b">
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
</f></mod>
		<shl public="1" get="inline" set="null" line="174" static="1"><f a="a:b">
	<c path="haxe.Int64"/>
	<x path="Int"/>
	<c path="haxe.Int64"/>
</f></shl>
		<shr public="1" get="inline" set="null" line="178" static="1"><f a="a:b">
	<c path="haxe.Int64"/>
	<x path="Int"/>
	<c path="haxe.Int64"/>
</f></shr>
		<ushr public="1" get="inline" set="null" line="182" static="1"><f a="a:b">
	<c path="haxe.Int64"/>
	<x path="Int"/>
	<c path="haxe.Int64"/>
</f></ushr>
		<and public="1" get="inline" set="null" line="186" static="1"><f a="a:b">
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
</f></and>
		<or public="1" get="inline" set="null" line="190" static="1"><f a="a:b">
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
</f></or>
		<xor public="1" get="inline" set="null" line="194" static="1"><f a="a:b">
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
</f></xor>
		<neg public="1" get="inline" set="null" line="198" static="1"><f a="a">
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
</f></neg>
		<isNeg public="1" get="inline" set="null" line="206" static="1"><f a="a">
	<c path="haxe.Int64"/>
	<x path="Bool"/>
</f></isNeg>
		<isZero public="1" get="inline" set="null" line="210" static="1"><f a="a">
	<c path="haxe.Int64"/>
	<x path="Bool"/>
</f></isZero>
		<uicompare set="method" line="214" static="1"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></uicompare>
		<compare public="1" get="inline" set="null" line="218" static="1"><f a="a:b">
	<c path="haxe.Int64"/>
	<c path="haxe.Int64"/>
	<x path="Int"/>
</f></compare>
		<ucompare public="1" get="inline" set="null" line="226" static="1">
			<f a="a:b">
				<c path="haxe.Int64"/>
				<c path="haxe.Int64"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compare two Int64 in unsigned mode.</haxe_doc>
		</ucompare>
		<toStr public="1" get="inline" set="null" line="231" static="1"><f a="a">
	<c path="haxe.Int64"/>
	<c path="String"/>
</f></toStr>
		<toString set="method" line="53"><f a=""><c path="String"/></f></toString>
		<low><x path="Int"/></low>
		<high><x path="Int"/></high>
		<new get="inline" set="null" line="29"><f a="high:low">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.Json" params="" file="/usr/lib/haxe/std/haxe/Json.hx">
		<parse public="1" set="method" line="398" static="1"><f a="text">
	<c path="String"/>
	<d/>
</f></parse>
		<stringify public="1" set="method" line="408" static="1"><f a="value:?replacer">
	<d/>
	<f a=":">
		<d/>
		<d/>
		<d/>
	</f>
	<c path="String"/>
</f></stringify>
		<parseNumber get="inline" set="null" line="358"><f a="c">
	<x path="Int"/>
	<x path="Float"/>
</f></parseNumber>
		<invalidNumber set="method" line="354"><f a="start">
	<x path="Int"/>
	<x path="Void"/>
</f></invalidNumber>
		<parseString set="method" line="293"><f a=""><c path="String"/></f></parseString>
		<parseRec set="method" line="211"><f a=""><d/></f></parseRec>
		<nextChar get="inline" set="null" line="207"><f a=""><x path="Int"/></f></nextChar>
		<invalidChar set="method" line="202"><f a=""><x path="Void"/></f></invalidChar>
		<doParse set="method" line="196"><f a="str">
	<c path="String"/>
	<unknown/>
</f></doParse>
		<quote set="method" line="150"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></quote>
		<toStringRec set="method" line="99"><f a="k:v">
	<d/>
	<d/>
	<x path="Void"/>
</f></toStringRec>
		<objString set="method" line="95"><f a="v">
	<d/>
	<x path="Void"/>
</f></objString>
		<fieldsString set="method" line="74"><f a="v:fields">
	<d/>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></fieldsString>
		<toString set="method" line="61"><f a="v:?replacer">
	<d/>
	<f a=":">
		<d/>
		<d/>
		<d/>
	</f>
	<c path="String"/>
</f></toString>
		<replacer><f a=":">
	<d/>
	<d/>
	<d/>
</f></replacer>
		<add get="inline" set="null" line="50">
			<f a="v">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":extern"/></meta>
		</add>
		<addChar get="inline" set="null" line="42">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":extern"/></meta>
		</addChar>
		<pos><x path="Int"/></pos>
		<str><c path="String"/></str>
		<buf><c path="StringBuf"/></buf>
		<new set="method" line="39"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Crossplatform JSON API : it will automatically use the optimized native API if available.
	Use -D haxeJSON to force usage of the haXe implementation even if a native API is found : this will provide
	extra encoding features such as enums (replaced by their index), Hashs and Iterable.</haxe_doc>
	</class>
	<class path="haxe.Log" params="" file="/usr/lib/haxe/std/haxe/Log.hx">
		<trace public="1" set="dynamic" line="45" static="1">
			<f a="v:?infos">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs [v] in a platform-dependent way.

		The second parameter [infos] is injected by the compiler and contains
		information about the position where the trace() call was made.

		This method can be rebound to a custom function:
			var oldTrace = haxe.Log.trace; // store old function
			haxe.Log.trace = function(v,infos) { // handle trace }
			...
			haxe.Log.trace = oldTrace;

		If it is bound to null, subsequent calls to trace() will cause an
		exception.</haxe_doc>
		</trace>
		<clear public="1" set="dynamic" line="104" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Clears the trace output.</haxe_doc>
		</clear>
		<setColor public="1" set="dynamic" line="117" static="1">
			<f a="rgb">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the color of the trace output to [rgb].</haxe_doc>
		</setColor>
		<haxe_doc>Log primarily provides the trace() method, which is invoked upon a call to
	trace() in haxe code.</haxe_doc>
	</class>
	<typedef path="haxe.PosInfos" params="" file="/usr/lib/haxe/std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<c path="Array"><d/></c>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>PosInfos is a magic type which can be used to generate position information
	into the output for debugging use.
	
	If a function has a final optional argument of this type, i.e.
	(..., ?pos:haxe.PosInfos), each call to that function which does not assign
	a value to that argument has its position added as call argument.
	
	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<class path="haxe.Resource" params="" file="/usr/lib/haxe/std/haxe/Resource.hx">
		<content static="1"><c path="Array"><a>
	<str><c path="String"/></str>
	<name><c path="String"/></name>
	<data><c path="String"/></data>
</a></c></content>
		<listNames public="1" set="method" line="65" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Lists all available resource names. The resource name is the name part
		of the -resource file@name command line parameter.</haxe_doc>
		</listNames>
		<getString public="1" set="method" line="82" static="1">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the resource identified by [name] as a String.

		If [name] does not match any resource name, null is returned.</haxe_doc>
		</getString>
		<getBytes public="1" set="method" line="115" static="1">
			<f a="name">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Retrieves the resource identified by [name] as an instance of
		haxe.io.Bytes.

		If [name] does not match any resource name, null is returned.</haxe_doc>
		</getBytes>
		<haxe_doc>Resource can be used to access resources that were added through the
	-resource file@name command line parameter.

	Depending on their type they can be obtained as String through
	getString(name), or as binary data through getBytes(name).

	A list of all available resource names can be obtained from listNames().</haxe_doc>
	</class>
	<class path="haxe.Serializer" params="" file="/usr/lib/haxe/std/haxe/Serializer.hx">
		<USE_CACHE public="1" line="54" static="1">
			<x path="Bool"/>
			<haxe_doc>If the values you are serializing can contain circular references or
		objects repetitions, you should set USE_CACHE to true to prevent
		infinite loops.

		This may also reduce the size of serialization Strings at the expense of
		performance.

		This value can be changed for individual instances of Serializer by
		setting their useCache field.</haxe_doc>
		</USE_CACHE>
		<USE_ENUM_INDEX public="1" line="66" static="1">
			<x path="Bool"/>
			<haxe_doc>Use constructor indexes for enums instead of names.

		This may reduce the size of serialization Strings, but makes them less
		suited for long-term storage: If constructors are removed or added from
		the enum, the indices may no longer match.

		This value can be changed for individual instances of Serializer by
		setting their useEnumIndex field.</haxe_doc>
		</USE_ENUM_INDEX>
		<BASE64 line="68" static="1"><c path="String"/></BASE64>
		<run public="1" set="method" line="520" static="1">
			<f a="v">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Serializes [v] and returns the String representation.

		This is a convenience function for creating a new instance of
		Serializer, serialize [v] into it and obtain the result through a call
		to toString().</haxe_doc>
		</run>
		<serializeException public="1" set="method" line="497"><f a="e">
	<d/>
	<x path="Void"/>
</f></serializeException>
		<serialize public="1" set="method" line="223">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Serializes [v].

		All haxe-defined values and objects with the exception of functions can
		be serialized. Serialization of external/native objects is not
		guaranteed to work.

		The values of [this].useCache and [this].useEnumIndex may affect
		serialization output.</haxe_doc>
		</serialize>
		<serializeFields set="method" line="205"><f a="v">
	<unknown/>
	<x path="Void"/>
</f></serializeFields>
		<serializeRef set="method" line="168"><f a="v">
	<unknown/>
	<x path="Bool"/>
</f></serializeRef>
		<serializeString set="method" line="149"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></serializeString>
		<toString public="1" set="method" line="114">
			<f a=""><c path="String"/></f>
			<haxe_doc>Return the String representation of [this] Serializer.

		The exact format specification can be found here:
		http://haxe.org/manual/serialization/format</haxe_doc>
		</toString>
		<useEnumIndex public="1">
			<x path="Bool"/>
			<haxe_doc>The individual enum index setting for [this] Serializer instance.

		See USE_ENUM_INDEX for a complete description.</haxe_doc>
		</useEnumIndex>
		<useCache public="1">
			<x path="Bool"/>
			<haxe_doc>The individual cache setting for [this] Serializer instance.

		See USE_CACHE for a complete description.</haxe_doc>
		</useCache>
		<scount><x path="Int"/></scount>
		<shash><c path="haxe.ds.StringMap"><x path="Int"/></c></shash>
		<cache><c path="Array"><d/></c></cache>
		<buf><c path="StringBuf"/></buf>
		<new public="1" set="method" line="99">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Serializer instance.

		Subsequent calls to [this].serialize() will append values to the
		internal buffer of this String. Once complete, the contents can be
		retrieved through a call to [this].toString() .

		Each Serializer instance maintains its own cache if [this].useCache is
		true.</haxe_doc>
		</new>
		<haxe_doc>The Serializer class can be used to encode values and objects into a String,
	from which the Unserializer class can recreate the original representation.

	This class can be used in two ways:
		- create a new Serializer() instance, call its serialize() method with
		any argument and finally retrieve the String representation from
		toString()
		- call Serializer.run() to obtain the serialized representation of a
		single argument

	Serialization is guaranteed to work for all haxe-defined classes, but may
	or may not work for instances of external/native classes.

	The specification of the serialization format can be found here:
		http://haxe.org/manual/serialization/format</haxe_doc>
	</class>
	<enum path="haxe._Template.TemplateExpr" params="" file="/usr/lib/haxe/std/haxe/Template.hx" private="1" module="haxe.Template">
		<OpVar a="v"><c path="String"/></OpVar>
		<OpStr a="str"><c path="String"/></OpStr>
		<OpMacro a="name:params">
			<c path="String"/>
			<c path="List"><e path="haxe._Template.TemplateExpr"/></c>
		</OpMacro>
		<OpIf a="expr:eif:eelse">
			<f a=""><d/></f>
			<e path="haxe._Template.TemplateExpr"/>
			<e path="haxe._Template.TemplateExpr"/>
		</OpIf>
		<OpForeach a="expr:loop">
			<f a=""><d/></f>
			<e path="haxe._Template.TemplateExpr"/>
		</OpForeach>
		<OpExpr a="expr"><f a=""><d/></f></OpExpr>
		<OpBlock a="l"><c path="List"><e path="haxe._Template.TemplateExpr"/></c></OpBlock>
	</enum>
	<typedef path="haxe._Template.Token" params="" file="/usr/lib/haxe/std/haxe/Template.hx" private="1" module="haxe.Template"><a>
	<s><x path="Bool"/></s>
	<p><c path="String"/></p>
	<l><c path="Array"><c path="String"/></c></l>
</a></typedef>
	<typedef path="haxe._Template.ExprToken" params="" file="/usr/lib/haxe/std/haxe/Template.hx" private="1" module="haxe.Template"><a>
	<s><x path="Bool"/></s>
	<p><c path="String"/></p>
</a></typedef>
	<class path="haxe.Template" params="" file="/usr/lib/haxe/std/haxe/Template.hx">
		<splitter line="54" static="1"><c path="EReg"/></splitter>
		<expr_splitter line="55" static="1"><c path="EReg"/></expr_splitter>
		<expr_trim line="56" static="1"><c path="EReg"/></expr_trim>
		<expr_int line="57" static="1"><c path="EReg"/></expr_int>
		<expr_float line="58" static="1"><c path="EReg"/></expr_float>
		<globals public="1" line="64" static="1">
			<d/>
			<haxe_doc>Global replacements which are used across all Template instances. This
		has lower priority than the context argument of execute().</haxe_doc>
		</globals>
		<run set="method" line="340"><f a="e">
	<e path="haxe._Template.TemplateExpr"/>
	<x path="Void"/>
</f></run>
		<makeExpr2 set="method" line="294"><f a="l">
	<c path="List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makeExpr2>
		<makeExpr set="method" line="290"><f a="l">
	<c path="List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><x path="Int"/></f>
</f></makeExpr>
		<makePath set="method" line="276"><f a="e:l">
	<f a=""><d/></f>
	<c path="List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makePath>
		<makeConst set="method" line="257"><f a="v">
	<c path="String"/>
	<f a=""><d/></f>
</f></makeConst>
		<parseExpr set="method" line="226"><f a="data">
	<c path="String"/>
	<f a=""><x path="Int"/></f>
</f></parseExpr>
		<parse set="method" line="176"><f a="tokens">
	<c path="List"><t path="haxe._Template.Token"/></c>
	<e path="haxe._Template.TemplateExpr"/>
</f></parse>
		<parseBlock set="method" line="161"><f a="tokens">
	<c path="List"><t path="haxe._Template.Token"/></c>
	<e path="haxe._Template.TemplateExpr"/>
</f></parseBlock>
		<parseTokens set="method" line="125"><f a="data">
	<c path="String"/>
	<c path="List"><t path="haxe._Template.Token"/></c>
</f></parseTokens>
		<resolve set="method" line="114"><f a="v">
	<c path="String"/>
	<d/>
</f></resolve>
		<execute public="1" set="method" line="105">
			<f a="context:?macros">
				<d/>
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Executes [this] Template, taking into account [context] for
		replacements and [macros] for callback functions.
		
		If [context] has a field 'name', its value replaces all occurrences of
		::name:: in the Template. Otherwise Template.globals is checked instead,
		If 'name' is not a field of that either, ::name:: is replaced with null.
		
		If [macros] has a field 'name', all occurrences of $$name(args) are
		replaced with the result of calling that field. The first argument is
		always the the resolve() method, followed by the given arguments.
		If [macros] has no such field, the result is unspecified.
		
		If [context] is null, the result is unspecified. If [macros] is null,
		no macros are used.</haxe_doc>
		</execute>
		<buf><c path="StringBuf"/></buf>
		<stack><c path="List"><d/></c></stack>
		<macros><d/></macros>
		<context><d/></context>
		<expr><e path="haxe._Template.TemplateExpr"/></expr>
		<new public="1" set="method" line="82">
			<f a="str">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Template instance from [str].
		
		[str] is parsed into tokens, which are stored for internal use. This
		means that multiple execute() operations on a single Template instance
		are more efficient than one execute() operations on multiple Template
		instances.
		
		If [str] is null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc>Template provides a basic templating mechanism to replace values in a source
	String, and to have some basic logic.
	
	A complete documentation of the supported syntax is available at:
	http://haxe.org/doc/cross/template</haxe_doc>
	</class>
	<class path="haxe.Timer" params="" file="/usr/lib/haxe/std/haxe/Timer.hx">
		<delay public="1" set="method" line="110" static="1">
			<f a="f:time_ms">
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<c path="haxe.Timer"/>
			</f>
			<haxe_doc>Invokes [f] after [time_ms] milliseconds.
		
		This is a convenience function for creating a new Timer instance with
		[time_ms] as argument, binding its run() method to [f] and then stopping
		[this] Timer upon the first invocation.
		
		If [f] is null, the result is unspecified.</haxe_doc>
		</delay>
		<measure public="1" params="T" set="method" line="132" static="1">
			<f a="f:?pos">
				<f a=""><c path="measure.T"/></f>
				<t path="haxe.PosInfos"/>
				<c path="measure.T"/>
			</f>
			<haxe_doc>Measures the time it takes to execute [f], in seconds with fractions.
		
		This is a convenience function for calculating the difference between
		Timer.stamp() before and after the invocation of [f].
		
		The difference is passed as argument to Log.trace(), with "s" appended
		to denote the unit. The optional [pos] argument is passed through.
		
		If [f] is null, the result is unspecified.</haxe_doc>
		</measure>
		<stamp public="1" set="method" line="145" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a timestamp, in seconds with fractions.
		
		The value itself might differ depending on platforms, only differences
		between two values make sense.</haxe_doc>
		</stamp>
		<run public="1" set="dynamic" line="97">
			<f a=""><x path="Void"/></f>
			<haxe_doc>This method is invoked repeatedly on [this] Timer.
		
		It can be overridden in a subclass, or rebound directly to a custom
		function:
			var timer = new haxe.Timer(1000); // 1000ms delay
			timer.run = function() { ... }
			
		Once bound, it can still be rebound to different functions until [this]
		Timer is stopped through a call to [this].stop().</haxe_doc>
		</run>
		<stop public="1" set="method" line="73">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stops [this] Timer.
		
		After calling this method, no additional invocations of [this].run()
		will occur.
		
		It is not possible to restart [this] Timer once stopped.</haxe_doc>
		</stop>
		<id><t path="Null"><x path="Int"/></t></id>
		<new public="1" set="method" line="52">
			<f a="time_ms">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new timer that will run every [time_ms] milliseconds.
		
		After creating the Timer instance, it calls [this].run() repeatedly,
		with delays of [time_ms] milliseconds, until [this].stop() is called.
		
		The first invocation occurs after [time_ms] milliseconds, not
		immediately.
		
		The accuracy of this may be platform-dependent.</haxe_doc>
		</new>
		<haxe_doc>The Timer class allows you to create asynchronous timers on platforms that
	support events.
	
	The intended usage is to create an instance of the Timer class with a given
	interval, set its run() method to a custom function to be invoked and
	eventually call stop() to stop the Timer.
	
	It is also possible to extend this class and override its run() method in
	the child class.</haxe_doc>
	</class>
	<typedef path="haxe.TypeResolver" params="" file="/usr/lib/haxe/std/haxe/Unserializer.hx" module="haxe.Unserializer"><a>
	<resolveEnum set="method"><f a="name">
	<c path="String"/>
	<x path="Enum"><d/></x>
</f></resolveEnum>
	<resolveClass set="method"><f a="name">
	<c path="String"/>
	<x path="Class"><d/></x>
</f></resolveClass>
</a></typedef>
	<class path="haxe.Unserializer" params="" file="/usr/lib/haxe/std/haxe/Unserializer.hx">
		<DEFAULT_RESOLVER public="1" line="57" static="1">
			<t path="haxe.TypeResolver"/>
			<haxe_doc><![CDATA[This value can be set to use custom type resolvers.

		A type resolver finds a Class or Enum instance from a given String. By
		default, the haxe Type Api is used.

		A type resolver must provide two methods:
			resolveClass(name:String):Class<Dynamic> is called to determine a
				Class from a class name
			resolveEnum(name:String):Enum<Dynamic> is called to determine an
				Enum from an enum name

		This value is applied when a new Unserializer instance is created.
		Changing it afterwards has no effect on previously created instances.]]></haxe_doc>
		</DEFAULT_RESOLVER>
		<BASE64 line="59" static="1"><c path="String"/></BASE64>
		<CODES line="62" static="1"><c path="Array"><x path="Int"/></c></CODES>
		<initCodes set="method" line="64" static="1"><f a=""><c path="Array"><x path="Int"/></c></f></initCodes>
		<run public="1" set="method" line="430" static="1">
			<f a="v">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Unserializes [v] and returns the according value.

		This is a convenience function for creating a new instance of
		Unserializer with [v] as buffer and calling its unserialize() method
		once.</haxe_doc>
		</run>
		<unserialize public="1" set="method" line="216">
			<f a=""><d/></f>
			<haxe_doc>Unserializes the next part of [this] Unserializer instance and returns
		the according value.

		This function may call [this].resolver.resolveClass to determine a
		Class from a String, and [this].resolver.resolveEnum to determine an
		Enum from a String.

		If [this] Unserializer instance contains no more or invalid data, an
		exception is thrown.

		This operation may fail on structurally valid data if a type cannot be
		resolved or if a field cannot be set. This can happen when unserializing
		Strings that were serialized on a different haxe target, in which the
		serialization side has to make sure not to include platform-specific
		data.

		Classes are created from Type.createEmptyInstance, which means their
		constructors are not called.</haxe_doc>
		</unserialize>
		<unserializeEnum set="method" line="184"><f a="edecl:tag">
	<x path="Enum"><unknown/></x>
	<c path="String"/>
	<unknown/>
</f></unserializeEnum>
		<unserializeObject set="method" line="169"><f a="o">
	<a/>
	<x path="Void"/>
</f></unserializeObject>
		<readDigits set="method" line="144"><f a=""><x path="Int"/></f></readDigits>
		<get get="inline" set="null" line="140"><f a="p">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<getResolver public="1" set="method" line="136">
			<f a=""><t path="haxe.TypeResolver"/></f>
			<haxe_doc>Gets the type resolver of [this] Unserializer instance.

		See DEFAULT_RESOLVER for more information on type resolvers.</haxe_doc>
		</getResolver>
		<setResolver public="1" set="method" line="121">
			<f a="r">
				<t path="haxe.TypeResolver"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the type resolver of [this] Unserializer instance to [r].

		If [r] is null, a special resolver is used which returns null for all
		input values.

		See DEFAULT_RESOLVER for more information on type resolvers.</haxe_doc>
		</setResolver>
		<resolver><t path="haxe.TypeResolver"/></resolver>
		<scache><c path="Array"><c path="String"/></c></scache>
		<cache><c path="Array"><d/></c></cache>
		<length><x path="Int"/></length>
		<pos><x path="Int"/></pos>
		<buf><c path="String"/></buf>
		<new public="1" set="method" line="96">
			<f a="buf">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Unserializer instance, with its internal buffer
		initialized to [buf].

		This does not parse [buf] immediately. It is parsed only when calls to
		[this].unserialize are made.

		Each Unserializer instance maintains its own cache.</haxe_doc>
		</new>
		<haxe_doc>The Unserializer class is the complement to the Serializer class. It parses
	a serialization String and creates objects from the contained data.

	This class can be used in two ways:
		- create a new Unserializer() instance with a given serialization
		String, then call its unserialize() method until all values are
		extracted
		- call Unserializer.run() to unserialize a single value from a given
		String</haxe_doc>
	</class>
	<class path="haxe.Utf8" params="" file="/usr/lib/haxe/std/haxe/Utf8.hx">
		<iter public="1" set="method" line="56" static="1">
			<f a="s:chars">
				<c path="String"/>
				<f a="">
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Call the [chars] function for each UTF8 char of the string.</haxe_doc>
		</iter>
		<encode public="1" set="method" line="64" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encode the input ISO string into the corresponding UTF8 one.</haxe_doc>
		</encode>
		<decode public="1" set="method" line="73" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Decode an UTF8 string back to an ISO string.
		Throw an exception if a given UTF8 character is not supported by the decoder.</haxe_doc>
		</decode>
		<charCodeAt public="1" get="inline" set="null" line="81" static="1">
			<f a="s:index">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Similar to [String.charCodeAt] but uses the UTF8 character position.</haxe_doc>
		</charCodeAt>
		<validate public="1" get="inline" set="null" line="88" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the String is correctly encoded as UTF8.</haxe_doc>
		</validate>
		<length public="1" get="inline" set="null" line="96" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of UTF8 chars of the String.</haxe_doc>
		</length>
		<compare public="1" set="method" line="103" static="1">
			<f a="a:b">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compare two UTF8 strings, character by character.</haxe_doc>
		</compare>
		<sub public="1" get="inline" set="null" line="110" static="1">
			<f a="s:pos:len">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>This is similar to [String.substr] but the [pos] and [len] parts are considering UTF8 characters.</haxe_doc>
		</sub>
		<toString public="1" get="inline" set="null" line="49">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the buffer converted to a String;</haxe_doc>
		</toString>
		<addChar public="1" get="inline" set="null" line="42">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Add the given UTF8 character code to the buffer.</haxe_doc>
		</addChar>
		<__b><c path="String"/></__b>
		<new public="1" set="method" line="35">
			<f a="?size">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allocate a new Utf8 buffer using an optional bytes size.</haxe_doc>
		</new>
		<haxe_doc>Since all platforms does not guarantee that String always uses UTF-8 encoding, you
	can use this crossplatform API to perform operations on such strings.</haxe_doc>
	</class>
	<class path="haxe.crypto.Adler32" params="" file="/usr/lib/haxe/std/haxe/crypto/Adler32.hx">
		<read public="1" set="method" line="53" static="1"><f a="i">
	<c path="haxe.io.Input"/>
	<c path="haxe.crypto.Adler32"/>
</f></read>
		<make public="1" set="method" line="64" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
</f></make>
		<equals public="1" set="method" line="49"><f a="a">
	<c path="haxe.crypto.Adler32"/>
	<x path="Bool"/>
</f></equals>
		<update public="1" set="method" line="38"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></update>
		<get public="1" set="method" line="34"><f a=""><x path="Int"/></f></get>
		<a2><x path="Int"/></a2>
		<a1><x path="Int"/></a1>
		<new public="1" set="method" line="29"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.crypto.BaseCode" params="" file="/usr/lib/haxe/std/haxe/crypto/BaseCode.hx">
		<encode public="1" set="method" line="127" static="1"><f a="s:base">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<decode public="1" set="method" line="132" static="1"><f a="s:base">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></decode>
		<decodeString public="1" set="method" line="119"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></decodeString>
		<encodeString public="1" set="method" line="111"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encodeString>
		<decodeBytes public="1" set="method" line="81"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></decodeBytes>
		<initTable set="method" line="72"><f a=""><x path="Void"/></f></initTable>
		<encodeBytes public="1" set="method" line="44"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></encodeBytes>
		<tbl><c path="Array"><x path="Int"/></c></tbl>
		<nbits><x path="Int"/></nbits>
		<base><c path="haxe.io.Bytes"/></base>
		<new public="1" set="method" line="33"><f a="base">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Allows to encode/decode String and bytes using a power of two base dictionnary.</haxe_doc>
	</class>
	<class path="haxe.crypto.Crc32" params="" file="/usr/lib/haxe/std/haxe/crypto/Crc32.hx">
		<make public="1" set="method" line="64" static="1">
			<f a="data">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Calculates the CRC32 of the given data bytes</haxe_doc>
		</make>
		<get public="1" set="method" line="57"><f a=""><x path="Int"/></f></get>
		<update public="1" set="method" line="43"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></update>
		<byte public="1" set="method" line="32"><f a="b">
	<x path="Int"/>
	<x path="Void"/>
</f></byte>
		<crc><x path="Int"/></crc>
		<new public="1" set="method" line="28"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.crypto.Md5" params="" file="/usr/lib/haxe/std/haxe/crypto/Md5.hx">
		<encode public="1" set="method" line="29" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="41" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<bytes2blks set="method" line="110" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="Array"><x path="Int"/></c>
</f></bytes2blks>
		<str2blks set="method" line="139" static="1"><f a="str">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></str2blks>
		<doEncode set="method" line="192"><f a="x">
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<ii set="method" line="188"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ii>
		<hh set="method" line="184"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></hh>
		<gg set="method" line="180"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></gg>
		<ff set="method" line="176"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ff>
		<cmn set="method" line="172"><f a="q:a:b:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></cmn>
		<rol set="method" line="168"><f a="num:cnt">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></rol>
		<hex set="method" line="100"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<addme set="method" line="94"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></addme>
		<bitAND set="method" line="88"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitAND>
		<bitXOR set="method" line="82"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitXOR>
		<bitOR set="method" line="76"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitOR>
		<new set="method" line="73"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Creates a MD5 of a String.</haxe_doc>
	</class>
	<class path="haxe.crypto.Sha1" params="" file="/usr/lib/haxe/std/haxe/crypto/Sha1.hx">
		<encode public="1" set="method" line="26" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encode>
		<make public="1" set="method" line="36" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<str2blks set="method" line="104" static="1"><f a="s">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></str2blks>
		<bytes2blks set="method" line="121" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="Array"><x path="Int"/></c>
</f></bytes2blks>
		<hex set="method" line="168"><f a="a">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></hex>
		<kt set="method" line="158">
			<f a="t">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Determine the appropriate additive constant for the current iteration</haxe_doc>
		</kt>
		<ft set="method" line="148">
			<f a="t:b:c:d">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Perform the appropriate triplet combination function for the current iteration</haxe_doc>
		</ft>
		<rol get="inline" set="null" line="141">
			<f a="num:cnt">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Bitwise rotate a 32-bit number to the left</haxe_doc>
		</rol>
		<doEncode set="method" line="58"><f a="x">
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
</f></doEncode>
		<new set="method" line="55"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ds.ArraySort" params="" file="/usr/lib/haxe/std/haxe/ds/ArraySort.hx">
		<sort public="1" params="T" set="method" line="42" static="1">
			<f a="a:cmp">
				<c path="Array"><c path="sort.T"/></c>
				<f a=":">
					<c path="sort.T"/>
					<c path="sort.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts Array [a] according to the comparison function [cmp], where
		[cmp(x,y)] returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.
		
		This operation modifies Array [a] in place.
		
		This operation is stable: The order of equal elements is preserved.
		
		If [a] or [cmp] are null, the result is unspecified.]]></haxe_doc>
		</sort>
		<rec params="T" set="method" line="46" static="1"><f a="a:cmp:from:to">
	<c path="Array"><c path="rec.T"/></c>
	<f a=":">
		<c path="rec.T"/>
		<c path="rec.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></rec>
		<doMerge params="T" set="method" line="67" static="1"><f a="a:cmp:from:pivot:to:len1:len2">
	<c path="Array"><c path="doMerge.T"/></c>
	<f a=":">
		<c path="doMerge.T"/>
		<c path="doMerge.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></doMerge>
		<rotate params="T" set="method" line="93" static="1"><f a="a:cmp:from:mid:to">
	<c path="Array"><c path="rotate.T"/></c>
	<f a=":">
		<c path="doMerge.T"/>
		<c path="doMerge.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></rotate>
		<gcd set="method" line="111" static="1"><f a="m:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></gcd>
		<upper params="T" set="method" line="120" static="1"><f a="a:cmp:from:to:val">
	<c path="Array"><c path="upper.T"/></c>
	<f a=":">
		<c path="upper.T"/>
		<c path="upper.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></upper>
		<lower params="T" set="method" line="135" static="1"><f a="a:cmp:from:to:val">
	<c path="Array"><c path="lower.T"/></c>
	<f a=":">
		<c path="lower.T"/>
		<c path="lower.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lower>
		<swap params="T" set="method" line="149" static="1"><f a="a:i:j">
	<c path="Array"><c path="swap.T"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></swap>
		<compare params="T" get="inline" set="null" line="155" static="1"><f a="a:cmp:i:j">
	<c path="Array"><c path="compare.T"/></c>
	<f a=":">
		<c path="compare.T"/>
		<c path="compare.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></compare>
		<haxe_doc>ArraySort provides a stable implementation of merge sort through its sort()
	method. It should be used instead of Array.sort() in cases where the order
	of equal elements has to be retained on all targets.</haxe_doc>
	</class>
	<class path="haxe.ds.BalancedTree" params="K:V" file="/usr/lib/haxe/std/haxe/ds/BalancedTree.hx">
		<toString public="1" set="method" line="151"><f a=""><c path="String"/></f></toString>
		<compare set="method" line="147"><f a="k1:k2">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.K"/>
	<x path="Int"/>
</f></compare>
		<balance set="method" line="133"><f a="l:k:v:r">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></balance>
		<removeMinBinding set="method" line="128"><f a="t">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></removeMinBinding>
		<minBinding set="method" line="122"><f a="t">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></minBinding>
		<merge set="method" line="115"><f a="t1:t2">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></merge>
		<keysLoop set="method" line="107"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="Array"><c path="haxe.ds.BalancedTree.K"/></c>
	<x path="Void"/>
</f></keysLoop>
		<iteratorLoop set="method" line="99"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="Array"><c path="haxe.ds.BalancedTree.V"/></c>
	<x path="Void"/>
</f></iteratorLoop>
		<removeLoop set="method" line="91"><f a="k:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></removeLoop>
		<setLoop set="method" line="78"><f a="k:v:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></setLoop>
		<keys public="1" set="method" line="72"><f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.K"/></t></f></keys>
		<iterator public="1" set="method" line="66"><f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.V"/></t></f></iterator>
		<exists public="1" set="method" line="55"><f a="k">
	<c path="haxe.ds.BalancedTree.K"/>
	<x path="Bool"/>
</f></exists>
		<remove public="1" set="method" line="45"><f a="k">
	<c path="haxe.ds.BalancedTree.K"/>
	<x path="Bool"/>
</f></remove>
		<get public="1" set="method" line="34"><f a="k">
	<c path="haxe.ds.BalancedTree.K"/>
	<t path="Null"><c path="haxe.ds.BalancedTree.V"/></t>
</f></get>
		<set public="1" set="method" line="30"><f a="k:v">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<x path="Void"/>
</f></set>
		<root><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></root>
		<new public="1" set="method" line="28"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ds.TreeNode" params="K:V" file="/usr/lib/haxe/std/haxe/ds/BalancedTree.hx" module="haxe.ds.BalancedTree">
		<toString public="1" set="method" line="179"><f a=""><c path="String"/></f></toString>
		<get_height public="1" get="inline" set="null" line="177">
			<f a=""><x path="Int"/></f>
			<meta><m n=":extern"/></meta>
		</get_height>
		<_height><x path="Int"/></_height>
		<value public="1"><c path="haxe.ds.TreeNode.V"/></value>
		<key public="1"><c path="haxe.ds.TreeNode.K"/></key>
		<right public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></right>
		<left public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></left>
		<new public="1" set="method" line="166"><f a="l:k:v:r:?h">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.TreeNode.K"/>
		<c path="haxe.ds.TreeNode.V"/>
	</c>
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.TreeNode.K"/>
		<c path="haxe.ds.TreeNode.V"/>
	</c>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ds.EnumValueMap" params="K:V" file="/usr/lib/haxe/std/haxe/ds/EnumValueMap.hx">
		<extends path="haxe.ds.BalancedTree">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</extends>
		<implements path="IMap">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</implements>
		<compareArgs set="method" line="36"><f a="a1:a2">
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<x path="Int"/>
</f></compareArgs>
		<compare set="method" line="27" override="1"><f a="k1:k2">
	<x path="EnumValue"/>
	<x path="EnumValue"/>
	<x path="Int"/>
</f></compare>
		<new public="1" set="method" line="25"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ds.GenericCell" params="T" file="/usr/lib/haxe/std/haxe/ds/GenericStack.hx" module="haxe.ds.GenericStack">
		<next public="1"><c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericCell.T"/></c></next>
		<elt public="1"><c path="haxe.ds.GenericCell.T"/></elt>
		<new public="1" set="method" line="30"><f a="elt:next">
	<c path="haxe.ds.GenericCell.T"/>
	<c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericCell.T"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ds.GenericStack" params="T" file="/usr/lib/haxe/std/haxe/ds/GenericStack.hx">
		<toString public="1" set="method" line="151">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a displayable representation of the String.</haxe_doc>
		</toString>
		<iterator public="1" set="method" line="133">
			<f a=""><t path="Iterator"><c path="haxe.ds.GenericStack.T"/></t></f>
			<haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
		</iterator>
		<remove public="1" set="method" line="102">
			<f a="v">
				<c path="haxe.ds.GenericStack.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Remove the first element that is [== v] from the list.
		Returns [true] if an element was removed, [false] otherwise.</haxe_doc>
		</remove>
		<isEmpty public="1" get="inline" set="null" line="94">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tells if a list is empty.</haxe_doc>
		</isEmpty>
		<pop public="1" get="inline" set="null" line="81">
			<f a=""><t path="Null"><c path="haxe.ds.GenericStack.T"/></t></f>
			<haxe_doc>Removes the first element of the list and
		returns it or simply returns null if the
		list is empty.</haxe_doc>
		</pop>
		<first public="1" get="inline" set="null" line="72">
			<f a=""><t path="Null"><c path="haxe.ds.GenericStack.T"/></t></f>
			<haxe_doc>Returns the first element of the list, or null
		if the list is empty.</haxe_doc>
		</first>
		<add public="1" get="inline" set="null" line="64">
			<f a="item">
				<c path="haxe.ds.GenericStack.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Add an element at the head of the list.</haxe_doc>
		</add>
		<head public="1"><c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericStack.T"/></c></head>
		<new public="1" set="method" line="58">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. A different class is created for each container used in platforms where it matters</haxe_doc>
	</class>
	<abstract path="haxe.ds.HashMap" params="K:V" file="/usr/lib/haxe/std/haxe/ds/HashMap.hx"/>
	<class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/usr/lib/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap">
		<_new public="1" set="method" line="25" static="1">
			<f a=""><a>
	<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
	<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
</a></f>
			<meta><m n=":impl"/></meta>
		</_new>
		<set public="1" get="inline" set="null" line="28" static="1">
			<f a="this:k:v">
				<a>
					<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
					<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
				</a>
				<c path="haxe.ds.HashMap.K"/>
				<c path="haxe.ds.HashMap.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set>
		<get public="1" get="inline" set="null" line="32" static="1">
			<f a="this:k">
				<a>
					<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
					<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
				</a>
				<c path="haxe.ds.HashMap.K"/>
				<t path="Null"><c path="haxe.ds.HashMap.V"/></t>
			</f>
			<meta><m n=":impl"/></meta>
		</get>
		<exists public="1" get="inline" set="null" line="35" static="1">
			<f a="this:k">
				<a>
					<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
					<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
				</a>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</exists>
		<remove public="1" get="inline" set="null" line="38" static="1">
			<f a="this:k">
				<a>
					<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
					<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
				</a>
				<c path="haxe.ds.HashMap.K"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</remove>
		<keys public="1" get="inline" set="null" line="42" static="1">
			<f a="this">
				<a>
					<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
					<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
				</a>
				<t path="Iterator"><c path="haxe.ds.HashMap.K"/></t>
			</f>
			<meta><m n=":impl"/></meta>
		</keys>
		<iterator public="1" get="inline" set="null" line="45" static="1">
			<f a="this">
				<a>
					<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
					<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
				</a>
				<t path="Iterator"><c path="haxe.ds.HashMap.V"/></t>
			</f>
			<meta><m n=":impl"/></meta>
		</iterator>
	</class>
	<class path="haxe.ds.IntMap" params="T" file="/usr/lib/haxe/std/flash8/_std/haxe/ds/IntMap.hx">
		<implements path="IMap">
			<x path="Int"/>
			<c path="haxe.ds.IntMap.T"/>
		</implements>
		<toString public="1" set="method" line="66">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns an displayable representation of the hashtable content.</haxe_doc>
		</toString>
		<iterator public="1" set="method" line="57">
			<f a=""><t path="Iterator"><c path="haxe.ds.IntMap.T"/></t></f>
			<haxe_doc>Returns an iterator of all values in the hashtable.</haxe_doc>
		</iterator>
		<keys public="1" set="method" line="50">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns an iterator of all keys in the hashtable.</haxe_doc>
		</keys>
		<remove public="1" set="method" line="44">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes a hashtable entry. Returns [true] if
		there was such entry.</haxe_doc>
		</remove>
		<exists public="1" set="method" line="40">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if a value exists for the given key.
		In particular, it's useful to tells if a key has
		a [null] value versus no value.</haxe_doc>
		</exists>
		<get public="1" set="method" line="36">
			<f a="key">
				<x path="Int"/>
				<t path="Null"><c path="haxe.ds.IntMap.T"/></t>
			</f>
			<haxe_doc>Get a value for the given key.</haxe_doc>
		</get>
		<set public="1" set="method" line="32">
			<f a="key:value">
				<x path="Int"/>
				<c path="haxe.ds.IntMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set a value for the given key.</haxe_doc>
		</set>
		<h><d/></h>
		<new public="1" set="method" line="28">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty hashtable.</haxe_doc>
		</new>
		<haxe_doc>Hashtable over a set of elements, using [Int] as keys.
	On Flash and Javascript, the underlying structure is an Object.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="haxe.ds.ObjectMap" params="K:V" file="/usr/lib/haxe/std/flash8/_std/haxe/ds/ObjectMap.hx">
		<implements path="IMap">
			<c path="haxe.ds.ObjectMap.K"/>
			<c path="haxe.ds.ObjectMap.V"/>
		</implements>
		<count line="28" static="1"><x path="Int"/></count>
		<assignId get="inline" set="null" line="30" static="1"><f a="obj">
	<a/>
	<x path="Int"/>
</f></assignId>
		<getId get="inline" set="null" line="34" static="1"><f a="obj">
	<a/>
	<x path="Int"/>
</f></getId>
		<toString public="1" set="method" line="88"><f a=""><c path="String"/></f></toString>
		<iterator public="1" set="method" line="79"><f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.V"/></t></f></iterator>
		<keys public="1" set="method" line="67"><f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.K"/></t></f></keys>
		<remove public="1" set="method" line="59"><f a="key">
	<c path="haxe.ds.ObjectMap.K"/>
	<x path="Bool"/>
</f></remove>
		<exists public="1" get="inline" set="null" line="55"><f a="key">
	<c path="haxe.ds.ObjectMap.K"/>
	<x path="Bool"/>
</f></exists>
		<get public="1" get="inline" set="null" line="51"><f a="key">
	<c path="haxe.ds.ObjectMap.K"/>
	<t path="Null"><c path="haxe.ds.ObjectMap.V"/></t>
</f></get>
		<set public="1" set="method" line="45"><f a="key:value">
	<c path="haxe.ds.ObjectMap.K"/>
	<c path="haxe.ds.ObjectMap.V"/>
	<x path="Void"/>
</f></set>
		<h><a/></h>
		<new public="1" set="method" line="40"><f a=""><x path="Void"/></f></new>
		<meta><m n=":coreApi"/></meta>
	</class>
	<enum path="haxe.ds.Option" params="T" file="/usr/lib/haxe/std/haxe/ds/Option.hx">
		<Some a="v"><c path="haxe.ds.Option.T"/></Some>
		<None/>
		<haxe_doc>An Option is a wrapper type which can either have a value (Some) or not a
	value (None).</haxe_doc>
	</enum>
	<class path="haxe.ds.StringMap" params="T" file="/usr/lib/haxe/std/flash8/_std/haxe/ds/StringMap.hx">
		<implements path="IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<toString public="1" set="method" line="64">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns an displayable representation of the hashtable content.</haxe_doc>
		</toString>
		<iterator public="1" set="method" line="55">
			<f a=""><t path="Iterator"><c path="haxe.ds.StringMap.T"/></t></f>
			<haxe_doc>Returns an iterator of all values in the hashtable.</haxe_doc>
		</iterator>
		<keys public="1" set="method" line="51">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>Returns an iterator of all keys in the hashtable.</haxe_doc>
		</keys>
		<remove public="1" set="method" line="44">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes a hashtable entry. Returns [true] if
		there was such entry.</haxe_doc>
		</remove>
		<exists public="1" set="method" line="40">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if a value exists for the given key.
		In particular, it's useful to tells if a key has
		a [null] value versus no value.</haxe_doc>
		</exists>
		<get public="1" set="method" line="36">
			<f a="key">
				<c path="String"/>
				<t path="Null"><c path="haxe.ds.StringMap.T"/></t>
			</f>
			<haxe_doc>Get a value for the given key.</haxe_doc>
		</get>
		<set public="1" set="method" line="32">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.StringMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set a value for the given key.</haxe_doc>
		</set>
		<h><d/></h>
		<new public="1" set="method" line="28">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty hashtable.</haxe_doc>
		</new>
		<haxe_doc>Hashtable over a set of elements, using [String] as keys.
	Other kind of keys are not possible on all platforms since they
	can't always be implemented efficiently.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<typedef path="haxe.ds._Vector.VectorData" params="T" file="/usr/lib/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector"><c path="Array"><c path="haxe.ds._Vector.VectorData.T"/></c></typedef>
	<abstract path="haxe.ds.Vector" params="T" file="/usr/lib/haxe/std/haxe/ds/Vector.hx">
		<haxe_doc>A Vector is a storage of fixed size. It can be faster than Array on some
	targets, and is never slower.</haxe_doc>
		<meta><m n=":arrayAccess"/></meta>
	</abstract>
	<class path="haxe.ds._Vector.Vector_Impl_" params="" file="/usr/lib/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector">
		<_new public="1" get="inline" set="null" line="53" static="1">
			<f a="length">
				<x path="Int"/>
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Vector of length [length].

		Initially [this] Vector contains [length] neutral elements:
			- always null on dynamic targets
			- 0, 0.0 or false for Int, Float and Bool respectively on static
			targets
			- null for other types on static targets

		If [length] is less than or equal to 0, the result is unspecified.</haxe_doc>
		</_new>
		<get public="1" get="inline" set="null" line="78" static="1">
			<f a="this:index">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="Int"/>
				<t path="Null"><c path="haxe.ds.Vector.T"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the value at index [index].

		If [index] is negative or exceeds [this].length, the result is
		unspecified.</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="88" static="1">
			<f a="this:index:val">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="Int"/>
				<c path="haxe.ds.Vector.T"/>
				<c path="haxe.ds.Vector.T"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Sets the value at index [index] to [val].

		If [index] is negative or exceeds [this].length, the result is
		unspecified.</haxe_doc>
		</set>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Returns the length of [this] Vector.</haxe_doc>
		</length>
		<get_length get="inline" set="null" line="97" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<blit public="1" params="T" set="method" line="114" static="1">
			<f a="src:srcPos:dest:destPos:len">
				<x path="haxe.ds.Vector"><c path="blit.T"/></x>
				<x path="Int"/>
				<x path="haxe.ds.Vector"><c path="blit.T"/></x>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies [length] of elements from [src] Vector, beginning at [srcPos] to [dest] Vector, beginning at [destPos]

		The results are unspecified if [length] results in out-of-bounds access, or if [src] or [dest] are null</haxe_doc>
		</blit>
		<toData public="1" get="inline" set="null" line="135" static="1">
			<f a="this">
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
				<t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Extracts the data of [this] Vector.

		This returns the internal representation type.</haxe_doc>
		</toData>
		<fromData public="1" params="T" get="inline" set="null" line="145" static="1">
			<f a="data">
				<t path="haxe.ds._Vector.VectorData"><c path="fromData.T"/></t>
				<x path="haxe.ds.Vector"><c path="fromData.T"/></x>
			</f>
			<haxe_doc>Initializes a new Vector from [data].

		Since [data] is the internal representation of Vector, this is a no-op.

		If [data] is null, the corresponding Vector is also [null].</haxe_doc>
		</fromData>
		<fromArrayCopy public="1" params="T" get="inline" set="null" line="159" static="1">
			<f a="array">
				<c path="Array"><c path="fromArrayCopy.T"/></c>
				<x path="haxe.ds.Vector"><c path="fromArrayCopy.T"/></x>
			</f>
			<haxe_doc>Creates a new Vector by copying the elements of [array].

		This always creates a copy, even on platforms where the internal
		representation is Array.

		The elements are not copied and retain their identity, so
		a[i] == Vector.fromArrayCopy(a).get(i) is true for any valid i.

		If [array] is null, the result is unspecified.</haxe_doc>
		</fromArrayCopy>
	</class>
	<class path="haxe.ds.WeakMap" params="K:V" file="/usr/lib/haxe/std/haxe/ds/WeakMap.hx">
		<implements path="IMap">
			<c path="haxe.ds.WeakMap.K"/>
			<c path="haxe.ds.WeakMap.V"/>
		</implements>
		<toString public="1" set="method" line="46"><f a=""><c path="String"/></f></toString>
		<iterator public="1" set="method" line="43"><f a=""><t path="Iterator"><c path="haxe.ds.WeakMap.V"/></t></f></iterator>
		<keys public="1" set="method" line="40"><f a=""><t path="Iterator"><c path="haxe.ds.WeakMap.K"/></t></f></keys>
		<remove public="1" set="method" line="37"><f a="key">
	<c path="haxe.ds.WeakMap.K"/>
	<x path="Bool"/>
</f></remove>
		<exists public="1" set="method" line="34"><f a="key">
	<c path="haxe.ds.WeakMap.K"/>
	<x path="Bool"/>
</f></exists>
		<get public="1" set="method" line="31"><f a="key">
	<c path="haxe.ds.WeakMap.K"/>
	<t path="Null"><c path="haxe.ds.WeakMap.V"/></t>
</f></get>
		<set public="1" set="method" line="29"><f a="key:value">
	<c path="haxe.ds.WeakMap.K"/>
	<c path="haxe.ds.WeakMap.V"/>
	<x path="Void"/>
</f></set>
		<new public="1" set="method" line="26"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.io.Input" params="" file="/usr/lib/haxe/std/haxe/io/Input.hx">
		<getDoubleSig set="method" line="340"><f a="bytes">
	<c path="Array"><x path="Int"/></c>
	<x path="Float"/>
</f></getDoubleSig>
		<readString public="1" set="method" line="318"><f a="len">
	<x path="Int"/>
	<c path="String"/>
</f></readString>
		<readInt32 public="1" set="method" line="310"><f a=""><x path="Int"/></f></readInt32>
		<readUInt24 public="1" set="method" line="303"><f a=""><x path="Int"/></f></readUInt24>
		<readInt24 public="1" set="method" line="293"><f a=""><x path="Int"/></f></readInt24>
		<readUInt16 public="1" set="method" line="287"><f a=""><x path="Int"/></f></readUInt16>
		<readInt16 public="1" set="method" line="278"><f a=""><x path="Int"/></f></readInt16>
		<readInt8 public="1" set="method" line="271"><f a=""><x path="Int"/></f></readInt8>
		<readDouble public="1" set="method" line="198"><f a=""><x path="Float"/></f></readDouble>
		<readFloat public="1" set="method" line="144"><f a=""><x path="Float"/></f></readFloat>
		<readLine public="1" set="method" line="127"><f a=""><c path="String"/></f></readLine>
		<readUntil public="1" set="method" line="119"><f a="end">
	<x path="Int"/>
	<c path="String"/>
</f></readUntil>
		<read public="1" set="method" line="107"><f a="nbytes">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></read>
		<readFullBytes public="1" set="method" line="99"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></readFullBytes>
		<readAll public="1" set="method" line="77"><f a="?bufsize">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></readAll>
		<set_bigEndian set="method" line="70"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<close public="1" set="method" line="67"><f a=""><x path="Void"/></f></close>
		<readBytes public="1" set="method" line="46"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<readByte public="1" set="method" line="37"><f a=""><x path="Int"/></f></readByte>
		<bigEndian public="1" set="accessor"><x path="Bool"/></bigEndian>
		<haxe_doc>An Input is an abstract reader. See other classes in the [haxe.io] package
	for several possible implementations.</haxe_doc>
	</class>
	<class path="haxe.io.BufferInput" params="" file="/usr/lib/haxe/std/haxe/io/BufferInput.hx">
		<extends path="haxe.io.Input"/>
		<readBytes public="1" set="method" line="54" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<readByte public="1" set="method" line="46" override="1"><f a=""><x path="Int"/></f></readByte>
		<refill public="1" set="method" line="38"><f a=""><x path="Void"/></f></refill>
		<pos public="1"><x path="Int"/></pos>
		<available public="1"><x path="Int"/></available>
		<buf public="1"><c path="haxe.io.Bytes"/></buf>
		<i public="1"><c path="haxe.io.Input"/></i>
		<new public="1" set="method" line="31"><f a="i:buf:?pos:?available">
	<c path="haxe.io.Input"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.io.Bytes" params="" file="/usr/lib/haxe/std/haxe/io/Bytes.hx">
		<alloc public="1" set="method" line="250" static="1"><f a="length">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></alloc>
		<ofString public="1" set="method" line="275" static="1"><f a="s">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></ofString>
		<ofData public="1" set="method" line="324" static="1"><f a="b">
	<t path="haxe.io.BytesData"/>
	<c path="haxe.io.Bytes"/>
</f></ofData>
		<fastGet public="1" get="inline" set="null" line="342" static="1">
			<f a="b:pos">
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Read the most efficiently possible the n-th byte of the data.
		Behavior when reading outside of the available data is unspecified.</haxe_doc>
		</fastGet>
		<getData public="1" get="inline" set="null" line="246"><f a=""><t path="haxe.io.BytesData"/></f></getData>
		<toHex public="1" set="method" line="232"><f a=""><c path="String"/></f></toHex>
		<toString public="1" set="method" line="211"><f a=""><c path="String"/></f></toString>
		<readString public="1" set="method" line="163"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></readString>
		<compare public="1" set="method" line="125"><f a="other">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
</f></compare>
		<sub public="1" set="method" line="99"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></sub>
		<blit public="1" set="method" line="68"><f a="pos:src:srcpos:len">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blit>
		<set public="1" get="inline" set="null" line="50"><f a="pos:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set>
		<get public="1" get="inline" set="null" line="34"><f a="pos">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<b><t path="haxe.io.BytesData"/></b>
		<length public="1" set="null"><x path="Int"/></length>
		<new set="method" line="29"><f a="length:b">
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.io.BytesBuffer" params="" file="/usr/lib/haxe/std/haxe/io/BytesBuffer.hx">
		<getBytes public="1" set="method" line="123">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<haxe_doc>Returns either a copy or a reference of the current bytes.
		Once called, the buffer can no longer be used.</haxe_doc>
		</getBytes>
		<addBytes public="1" get="inline" set="null" line="97"><f a="src:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<add public="1" get="inline" set="null" line="78"><f a="src">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></add>
		<addByte public="1" get="inline" set="null" line="60"><f a="byte">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<b><c path="Array"><x path="Int"/></c></b>
		<new public="1" set="method" line="42"><f a=""><x path="Void"/></f></new>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="/usr/lib/haxe/std/haxe/io/BytesData.hx"><c path="Array"><x path="Int"/></c></typedef>
	<class path="haxe.io.BytesInput" params="" file="/usr/lib/haxe/std/haxe/io/BytesInput.hx">
		<extends path="haxe.io.Input"/>
		<readBytes public="1" set="method" line="91" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<readByte public="1" set="method" line="70" override="1"><f a=""><x path="Int"/></f></readByte>
		<set_position set="method" line="62"><f a="p">
	<x path="Int"/>
	<x path="Int"/>
</f></set_position>
		<get_position set="method" line="54"><f a=""><x path="Int"/></f></get_position>
		<position public="1" get="accessor" set="accessor"><x path="Int"/></position>
		<len><x path="Int"/></len>
		<pos><x path="Int"/></pos>
		<b><t path="haxe.io.BytesData"/></b>
		<new public="1" set="method" line="33"><f a="b:?pos:?len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.io.Output" params="" file="/usr/lib/haxe/std/haxe/io/Output.hx">
		<LN2 line="31" static="1"><x path="Float"/></LN2>
		<writeString public="1" set="method" line="313"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></writeString>
		<writeInput public="1" set="method" line="291"><f a="i:?bufsize">
	<c path="haxe.io.Input"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeInput>
		<prepare public="1" set="method" line="288">
			<f a="nbytes">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inform that we are about to write at least a specified number of bytes.
		The underlying implementation can allocate proper working space depending
		on this information, or simply ignore it. This is not a mandatory call
		but a tip and is only used in some specific cases.</haxe_doc>
		</prepare>
		<writeInt32 public="1" set="method" line="268"><f a="x">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt32>
		<writeUInt24 public="1" set="method" line="255"><f a="x">
	<x path="Int"/>
	<x path="Void"/>
</f></writeUInt24>
		<writeInt24 public="1" set="method" line="250"><f a="x">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt24>
		<writeUInt16 public="1" set="method" line="239"><f a="x">
	<x path="Int"/>
	<x path="Void"/>
</f></writeUInt16>
		<writeInt16 public="1" set="method" line="234"><f a="x">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt16>
		<writeInt8 public="1" set="method" line="228"><f a="x">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt8>
		<writeDouble public="1" set="method" line="151"><f a="x">
	<x path="Float"/>
	<x path="Void"/>
</f></writeDouble>
		<writeFloat public="1" set="method" line="97"><f a="x">
	<x path="Float"/>
	<x path="Void"/>
</f></writeFloat>
		<writeFullBytes public="1" set="method" line="89"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeFullBytes>
		<write public="1" set="method" line="78"><f a="s">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></write>
		<set_bigEndian set="method" line="71"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<close public="1" set="method" line="68"><f a=""><x path="Void"/></f></close>
		<flush public="1" set="method" line="65"><f a=""><x path="Void"/></f></flush>
		<writeBytes public="1" set="method" line="42"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<writeByte public="1" set="method" line="38"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<bigEndian public="1" set="accessor"><x path="Bool"/></bigEndian>
		<haxe_doc>An Output is an abstract write. A specific output implementation will only
	have to override the [writeChar] and maybe the [write], [flush] and [close]
	methods. See [File.write] and [String.write] for two ways of creating an
	Output.</haxe_doc>
	</class>
	<class path="haxe.io.BytesOutput" params="" file="/usr/lib/haxe/std/haxe/io/BytesOutput.hx">
		<extends path="haxe.io.Output"/>
		<getBytes public="1" set="method" line="111"><f a=""><c path="haxe.io.Bytes"/></f></getBytes>
		<writeBytes public="1" set="method" line="49" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<writeByte public="1" set="method" line="41" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<b><c path="haxe.io.BytesBuffer"/></b>
		<new public="1" set="method" line="32"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.io.Eof" params="" file="/usr/lib/haxe/std/haxe/io/Eof.hx">
		<toString set="method" line="30">
			<f a=""><c path="String"/></f>
			<meta><m n=":keep"/></meta>
		</toString>
		<new public="1" set="method" line="28"><f a=""><x path="Void"/></f></new>
		<haxe_doc>This exception is raised when reading while data is no longer available in the [Input].</haxe_doc>
	</class>
	<enum path="haxe.io.Error" params="" file="/usr/lib/haxe/std/haxe/io/Error.hx">
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
	</enum>
	<class path="haxe.io.Path" params="" file="/usr/lib/haxe/std/haxe/io/Path.hx">
		<withoutExtension public="1" set="method" line="116" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String representation of [path] without the file extension.
		
		If [path] is null, the result is unspecified.</haxe_doc>
		</withoutExtension>
		<withoutDirectory public="1" set="method" line="127" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String representation of [path] without the directory.
		
		If [path] is null, the result is unspecified.</haxe_doc>
		</withoutDirectory>
		<directory public="1" set="method" line="140" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the directory of [path].
		
		If the directory is null, the empty String "" is returned.
		
		If [path] is null, the result is unspecified.</haxe_doc>
		</directory>
		<extension public="1" set="method" line="154" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the extension of [path].
		
		If the extension is null, the empty String "" is returned.
		
		If [path] is null, the result is unspecified.</haxe_doc>
		</extension>
		<withExtension public="1" set="method" line="168" static="1">
			<f a="path:ext">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String representation of [path] where the extension is [ext].
		
		If [path] has no extension, [ext] is added as extension.
		
		If [path] or [ext] are null, the result is unspecified.</haxe_doc>
		</withExtension>
		<addTrailingSlash public="1" set="method" line="186" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Adds a trailing slash to [path], if it does not have one already.
		
		If the last slash in [path] is a backslash, a backslash is appended to
		[path].
		
		If the last slash in [path] is a slash, or if no slash is found, a slash
		is appended to [path]. In particular, this applies to the empty String
		"".
		
		If [path] is null, the result is unspecified.</haxe_doc>
		</addTrailingSlash>
		<toString public="1" set="method" line="107">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of [this] path.
		
		If [this].backslash is true, backslash is used as directory separator,
		otherwise slash is used. This only affects the separator between
		[this].dir and [this].file.
		
		If [this].directory or [this].extension is null, their representation
		is the empty String "".</haxe_doc>
		</toString>
		<backslash public="1">
			<x path="Bool"/>
			<haxe_doc>True if the last directory separator is a backslash, false otherwise.</haxe_doc>
		</backslash>
		<ext public="1">
			<c path="String"/>
			<haxe_doc>The file extension.
		
		It is separated from the file name by a dot. This dot is not part of
		the extension.
		
		If the path has no extension, the value is null.</haxe_doc>
		</ext>
		<file public="1">
			<c path="String"/>
			<haxe_doc>The file name.
		
		This is the part of the part between the directory and the extension.
		
		If there is no file name, e.g. for ".htaccess" or "/dir/", the value
		is the empty String "".</haxe_doc>
		</file>
		<dir public="1">
			<c path="String"/>
			<haxe_doc>The directory.
		
		This is the leading part of the path that is not part of the file name
		and the extension.
		
		Does not end with a / or \ separator.
		
		If the path has no directory, the value is null.</haxe_doc>
		</dir>
		<new public="1" set="method" line="75">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Path instance by parsing [path].
		
		Path information can be retrieved by accessing the dir, file and ext
		properties.</haxe_doc>
		</new>
		<haxe_doc>This class provides a convenient way of working with paths. It supports the
	common path formats:
		directory1/directory2/filename.extension
		directory1\directory2\filename.excention</haxe_doc>
	</class>
	<class path="haxe.io.StringInput" params="" file="/usr/lib/haxe/std/haxe/io/StringInput.hx">
		<extends path="haxe.io.BytesInput"/>
		<new public="1" set="method" line="26"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.macro.ComplexTypeTools" params="" file="/usr/lib/haxe/std/haxe/macro/ComplexTypeTools.hx">
		<toString public="1" set="method" line="40" static="1">
			<f a="c">
				<e path="haxe.macro.ComplexType"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts type [c] to a human-readable String representation.
		
		The result is guaranteed to be valid haxe code, but there may be
		differences from the original lexical syntax.</haxe_doc>
		</toString>
		<haxe_doc>This class provides some utility methods to work with AST-level types. It is
	best used through 'using haxe.macro.ComplexTypeTools' syntax and then provides
	additional methods on haxe.macro.Expr.ComplexType instances.</haxe_doc>
	</class>
	<typedef path="haxe.macro.Position" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<min><x path="Int"/></min>
	<max><x path="Int"/></max>
	<file><c path="String"/></file>
</a></typedef>
	<enum path="haxe.macro.Constant" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<CString a="s"><c path="String"/></CString>
		<CRegexp a="r:opt">
			<c path="String"/>
			<c path="String"/>
		</CRegexp>
		<CInt a="v"><c path="String"/></CInt>
		<CIdent a="s"><c path="String"/></CIdent>
		<CFloat a="f"><c path="String"/></CFloat>
	</enum>
	<enum path="haxe.macro.Binop" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpXor/>
		<OpUShr/>
		<OpSub/>
		<OpShr/>
		<OpShl/>
		<OpOr/>
		<OpNotEq/>
		<OpMult/>
		<OpMod/>
		<OpLte/>
		<OpLt/>
		<OpInterval/>
		<OpGte/>
		<OpGt/>
		<OpEq/>
		<OpDiv/>
		<OpBoolOr/>
		<OpBoolAnd/>
		<OpAssignOp a="op"><e path="haxe.macro.Binop"/></OpAssignOp>
		<OpAssign/>
		<OpArrow/>
		<OpAnd/>
		<OpAdd/>
	</enum>
	<enum path="haxe.macro.Unop" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpNot/>
		<OpNegBits/>
		<OpNeg/>
		<OpIncrement/>
		<OpDecrement/>
	</enum>
	<typedef path="haxe.macro.Expr" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.ExprDef"/></expr>
</a></typedef>
	<typedef path="haxe.macro.ExprOf" params="T" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><t path="haxe.macro.Expr"/></typedef>
	<typedef path="haxe.macro.Case" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<values><c path="Array"><t path="haxe.macro.Expr"/></c></values>
	<guard>
		<t path="Null"><t path="haxe.macro.Expr"/></t>
		<meta><m n=":optional"/></meta>
	</guard>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
</a></typedef>
	<typedef path="haxe.macro.Var" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
	<name><c path="String"/></name>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
</a></typedef>
	<typedef path="haxe.macro.Catch" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<type><e path="haxe.macro.ComplexType"/></type>
	<name><c path="String"/></name>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></typedef>
	<enum path="haxe.macro.ExprDef" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<EWhile a="econd:e:normalWhile">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<x path="Bool"/>
		</EWhile>
		<EVars a="vars"><c path="Array"><t path="haxe.macro.Var"/></c></EVars>
		<EUntyped a="e"><t path="haxe.macro.Expr"/></EUntyped>
		<EUnop a="op:postFix:e">
			<e path="haxe.macro.Unop"/>
			<x path="Bool"/>
			<t path="haxe.macro.Expr"/>
		</EUnop>
		<ETry a="e:catches">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Catch"/></c>
		</ETry>
		<EThrow a="e"><t path="haxe.macro.Expr"/></EThrow>
		<ETernary a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</ETernary>
		<ESwitch a="e:cases:edef">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Case"/></c>
			<t path="Null"><t path="Null"><t path="haxe.macro.Expr"/></t></t>
		</ESwitch>
		<EReturn a="?e"><t path="haxe.macro.Expr"/></EReturn>
		<EParenthesis a="e"><t path="haxe.macro.Expr"/></EParenthesis>
		<EObjectDecl a="fields"><c path="Array"><a>
	<field><c path="String"/></field>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></c></EObjectDecl>
		<ENew a="t:params">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
		</ENew>
		<EMeta a="s:e">
			<t path="haxe.macro.MetadataEntry"/>
			<t path="haxe.macro.Expr"/>
		</EMeta>
		<EIn a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EIn>
		<EIf a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="Null"><t path="haxe.macro.Expr"/></t>
		</EIf>
		<EFunction a="name:f">
			<t path="Null"><c path="String"/></t>
			<t path="haxe.macro.Function"/>
		</EFunction>
		<EFor a="it:expr">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EFor>
		<EField a="e:field">
			<t path="haxe.macro.Expr"/>
			<c path="String"/>
		</EField>
		<EDisplayNew a="t"><t path="haxe.macro.TypePath"/></EDisplayNew>
		<EDisplay a="e:isCall">
			<t path="haxe.macro.Expr"/>
			<x path="Bool"/>
		</EDisplay>
		<EContinue/>
		<EConst a="c"><e path="haxe.macro.Constant"/></EConst>
		<ECheckType a="e:t">
			<t path="haxe.macro.Expr"/>
			<e path="haxe.macro.ComplexType"/>
		</ECheckType>
		<ECast a="e:t">
			<t path="haxe.macro.Expr"/>
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
		</ECast>
		<ECall a="e:params">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
		</ECall>
		<EBreak/>
		<EBlock a="exprs"><c path="Array"><t path="haxe.macro.Expr"/></c></EBlock>
		<EBinop a="op:e1:e2">
			<e path="haxe.macro.Binop"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EBinop>
		<EArrayDecl a="values"><c path="Array"><t path="haxe.macro.Expr"/></c></EArrayDecl>
		<EArray a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EArray>
	</enum>
	<enum path="haxe.macro.ComplexType" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPath a="p"><t path="haxe.macro.TypePath"/></TPath>
		<TParent a="t"><e path="haxe.macro.ComplexType"/></TParent>
		<TOptional a="t"><e path="haxe.macro.ComplexType"/></TOptional>
		<TFunction a="args:ret">
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<e path="haxe.macro.ComplexType"/>
		</TFunction>
		<TExtend a="p:fields">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.Field"/></c>
		</TExtend>
		<TAnonymous a="fields"><c path="Array"><t path="haxe.macro.Field"/></c></TAnonymous>
	</enum>
	<typedef path="haxe.macro.TypePath" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<sub>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</sub>
	<params><c path="Array"><e path="haxe.macro.TypeParam"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
</a></typedef>
	<enum path="haxe.macro.TypeParam" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPType a="t"><e path="haxe.macro.ComplexType"/></TPType>
		<TPExpr a="e"><t path="haxe.macro.Expr"/></TPExpr>
	</enum>
	<typedef path="haxe.macro.TypeParamDecl" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<params>
		<c path="Array"><t path="haxe.macro.TypeParamDecl"/></c>
		<meta><m n=":optional"/></meta>
	</params>
	<name><c path="String"/></name>
	<constraints>
		<c path="Array"><e path="haxe.macro.ComplexType"/></c>
		<meta><m n=":optional"/></meta>
	</constraints>
</a></typedef>
	<typedef path="haxe.macro.Function" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<ret><t path="Null"><e path="haxe.macro.ComplexType"/></t></ret>
	<params><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></params>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
	<args><c path="Array"><t path="haxe.macro.FunctionArg"/></c></args>
</a></typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<value>
		<t path="Null"><t path="haxe.macro.Expr"/></t>
		<meta><m n=":optional"/></meta>
	</value>
	<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.MetadataEntry" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.Expr"/></c></params>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.Metadata" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><c path="Array"><t path="haxe.macro.MetadataEntry"/></c></typedef>
	<typedef path="haxe.macro.Field" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
	<meta>
		<t path="haxe.macro.Metadata"/>
		<meta><m n=":optional"/></meta>
	</meta>
	<kind><e path="haxe.macro.FieldType"/></kind>
	<doc>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</doc>
	<access>
		<c path="Array"><e path="haxe.macro.Access"/></c>
		<meta><m n=":optional"/></meta>
	</access>
</a></typedef>
	<enum path="haxe.macro.Access" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<AStatic/>
		<APublic/>
		<APrivate/>
		<AOverride/>
		<AMacro/>
		<AInline/>
		<ADynamic/>
	</enum>
	<enum path="haxe.macro.FieldType" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<FVar a="t:?e">
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
			<t path="haxe.macro.Expr"/>
		</FVar>
		<FProp a="get:set:?t:?e">
			<c path="String"/>
			<c path="String"/>
			<e path="haxe.macro.ComplexType"/>
			<t path="haxe.macro.Expr"/>
		</FProp>
		<FFun a="f"><t path="haxe.macro.Function"/></FFun>
	</enum>
	<typedef path="haxe.macro.TypeDefinition" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.Metadata"/></meta>
	<kind><e path="haxe.macro.TypeDefKind"/></kind>
	<isExtern><x path="Bool"/></isExtern>
	<fields><c path="Array"><t path="haxe.macro.Field"/></c></fields>
</a></typedef>
	<enum path="haxe.macro.TypeDefKind" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TDStructure/>
		<TDEnum/>
		<TDClass a="?superClass:?interfaces:?isInterface">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.TypePath"/></c>
			<x path="Bool"/>
		</TDClass>
		<TDAlias a="t"><e path="haxe.macro.ComplexType"/></TDAlias>
		<TDAbstract a="tthis:?from:?to">
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
		</TDAbstract>
	</enum>
	<class path="haxe.macro.Error" params="" file="/usr/lib/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<toString set="method" line="239"><f a=""><c path="String"/></f></toString>
		<pos public="1"><t path="haxe.macro.Position"/></pos>
		<message public="1"><c path="String"/></message>
		<new public="1" set="method" line="235"><f a="m:p">
	<c path="String"/>
	<t path="haxe.macro.Position"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>This error can be used to handle or produce compilation errors in macros.</haxe_doc>
	</class>
	<class path="haxe.macro.ExprTools" params="" file="/usr/lib/haxe/std/haxe/macro/ExprTools.hx">
		<toFieldExpr public="1" set="method" line="38" static="1"><f a="sl">
	<c path="Array"><c path="String"/></c>
	<t path="haxe.macro.Expr"/>
</f></toFieldExpr>
		<toString public="1" set="method" line="47" static="1">
			<f a="e">
				<t path="haxe.macro.Expr"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts expression [e] to a human-readable String representation.

		The result is guaranteed to be valid haxe code, but there may be
		differences from the original lexical syntax.</haxe_doc>
		</toString>
		<iter public="1" set="method" line="73" static="1">
			<f a="e:f">
				<t path="haxe.macro.Expr"/>
				<f a="">
					<t path="haxe.macro.Expr"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls function [f] on each sub-expression of [e].

		If [e] has no sub-expressions, this operation has no effect.

		Otherwise [f] is called once per sub-expression of [e], with the
		sub-expression as argument. These calls are done in order of the
		sub-expression declarations.

		This method does not call itself recursively. It should instead be used
		in a recursive function which handles the expression nodes of interest.

		Usage example:

		function findStrings(e:Expr) {
			switch(e.expr) {
				case EConst(CString(s)):
					// handle s
				case _:
					ExprTools.iter(e, findStrings);
			}
		}</haxe_doc>
		</iter>
		<map public="1" set="method" line="159" static="1">
			<f a="e:f">
				<t path="haxe.macro.Expr"/>
				<f a="">
					<t path="haxe.macro.Expr"/>
					<t path="haxe.macro.Expr"/>
				</f>
				<t path="haxe.macro.Expr"/>
			</f>
			<haxe_doc>Transforms the sub-expressions of [e] by calling [f] on each of them.

		If [e] has no sub-expressions, this operation returns [e] unchanged.

		Otherwise [f] is called once per sub-expression of [e], with the
		sub-expression as argument. These calls are done in order of the
		sub-expression declarations.

		This method does not call itself recursively. It should instead be used
		in a recursive function which handles the expression nodes of interest.

		Usage example:

		function capitalizeStrings(e:Expr) {
			return switch(e.expr) {
				case EConst(CString(s)):
					{ expr: EConst(CString(s.toUpperCase())), pos: e.pos };
				case _:
					ExprTools.map(e, capitalizeStrings);
			}
		}</haxe_doc>
		</map>
		<opt get="inline" set="null" line="215" static="1"><f a="e:f">
	<t path="Null"><t path="haxe.macro.Expr"/></t>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<t path="haxe.macro.Expr"/>
	</f>
	<t path="haxe.macro.Expr"/>
</f></opt>
		<opt2 get="inline" set="null" line="218" static="1"><f a="e:f">
	<t path="Null"><t path="haxe.macro.Expr"/></t>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></opt2>
		<haxe_doc>This class provides some utility methods to work with expressions. It is
	best used through 'using haxe.macro.ExprTools' syntax and then provides
	additional methods on haxe.macro.Expr instances.

	While mainly intended to be used in macros, it works in non-macro code as
	well.</haxe_doc>
	</class>
	<class path="haxe.macro.ExprArrayTools" params="" file="/usr/lib/haxe/std/haxe/macro/ExprTools.hx" module="haxe.macro.ExprTools">
		<map public="1" set="method" line="227" static="1"><f a="el:f">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<t path="haxe.macro.Expr"/>
	</f>
	<c path="Array"><t path="haxe.macro.Expr"/></c>
</f></map>
		<iter public="1" set="method" line="234" static="1"><f a="el:f">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<f a="">
		<t path="haxe.macro.Expr"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></iter>
		<haxe_doc>This class provides functions on expression arrays for convenience. For a
	detailed reference on each method, see the documentation of ExprTools.</haxe_doc>
	</class>
	<class path="haxe.macro.Format" params="" file="/usr/lib/haxe/std/haxe/macro/Format.hx"><haxe_doc>The actual macro implemented for Std.format</haxe_doc></class>
	<typedef path="haxe.macro.JSGenApi" params="" file="/usr/lib/haxe/std/haxe/macro/JSGenApi.hx">
		<a>
			<types>
				<c path="Array"><e path="haxe.macro.Type"/></c>
				<haxe_doc>all the types that were compiled by haXe</haxe_doc>
			</types>
			<setTypeAccessor set="method">
				<f a="callb">
					<f a="">
						<e path="haxe.macro.Type"/>
						<c path="String"/>
					</f>
					<x path="Void"/>
				</f>
				<haxe_doc>define the JS code that gets generated when a class or enum is accessed in a typed expression</haxe_doc>
			</setTypeAccessor>
			<setCurrentClass set="method">
				<f a="c">
					<t path="haxe.macro.ClassType"/>
					<x path="Void"/>
				</f>
				<haxe_doc>select the current classe</haxe_doc>
			</setCurrentClass>
			<quoteString set="method">
				<f a="s">
					<c path="String"/>
					<c path="String"/>
				</f>
				<haxe_doc>quote and escape the given string constant</haxe_doc>
			</quoteString>
			<outputFile>
				<c path="String"/>
				<haxe_doc>the file in which the JS code can be generated</haxe_doc>
			</outputFile>
			<main>
				<t path="Null"><e path="haxe.macro.TypedExpr"/></t>
				<haxe_doc>the main call expression, if a -main class is defined</haxe_doc>
			</main>
			<isKeyword set="method">
				<f a="ident">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>tells if the given identifier is a JS keyword</haxe_doc>
			</isKeyword>
			<generateValue set="method">
				<f a="e">
					<e path="haxe.macro.TypedExpr"/>
					<c path="String"/>
				</f>
				<haxe_doc>generate the JS code for a given typed expression-value</haxe_doc>
			</generateValue>
			<generateStatement set="method">
				<f a="e">
					<e path="haxe.macro.TypedExpr"/>
					<c path="String"/>
				</f>
				<haxe_doc>generate the JS code for any given typed expression</haxe_doc>
			</generateStatement>
			<buildMetaData set="method">
				<f a="t">
					<t path="haxe.macro.BaseType"/>
					<t path="Null"><e path="haxe.macro.TypedExpr"/></t>
				</f>
				<haxe_doc>create the metadata expression for the given type</haxe_doc>
			</buildMetaData>
		</a>
		<haxe_doc>This is the api that is passed to the custom JS generator.</haxe_doc>
	</typedef>
	<class path="haxe.macro.MacroType" params="Const" file="/usr/lib/haxe/std/haxe/macro/MacroType.hx" extern="1"><haxe_doc><![CDATA[This type is meant to be used to generate custom types using a macro.
	For instance by doing MacroType<[my.Class.myMacro(55)]>]]></haxe_doc></class>
	<class path="haxe.macro.Printer" params="" file="/usr/lib/haxe/std/haxe/macro/Printer.hx">
		<opt params="T" set="method" line="277"><f a="v:f:?prefix">
	<c path="opt.T"/>
	<f a="">
		<c path="opt.T"/>
		<c path="String"/>
	</f>
	<c path="String"/>
	<c path="String"/>
</f></opt>
		<printTypeDefinition public="1" set="method" line="212"><f a="t:?printPackage">
	<t path="haxe.macro.TypeDefinition"/>
	<x path="Bool"/>
	<c path="String"/>
</f></printTypeDefinition>
		<printExprs public="1" set="method" line="208"><f a="el:sep">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<c path="String"/>
	<c path="String"/>
</f></printExprs>
		<printExpr public="1" set="method" line="150"><f a="e">
	<t path="haxe.macro.Expr"/>
	<c path="String"/>
</f></printExpr>
		<printVar public="1" set="method" line="144"><f a="v">
	<t path="haxe.macro.Var"/>
	<c path="String"/>
</f></printVar>
		<printFunction public="1" set="method" line="138"><f a="func">
	<t path="haxe.macro.Function"/>
	<c path="String"/>
</f></printFunction>
		<printFunctionArg public="1" set="method" line="132"><f a="arg">
	<t path="haxe.macro.FunctionArg"/>
	<c path="String"/>
</f></printFunctionArg>
		<printTypeParamDecl public="1" set="method" line="127"><f a="tpd">
	<t path="haxe.macro.TypeParamDecl"/>
	<c path="String"/>
</f></printTypeParamDecl>
		<printField public="1" set="method" line="117"><f a="field">
	<t path="haxe.macro.Field"/>
	<c path="String"/>
</f></printField>
		<printAccess public="1" set="method" line="107"><f a="access">
	<e path="haxe.macro.Access"/>
	<c path="String"/>
</f></printAccess>
		<printMetadata public="1" set="method" line="103"><f a="meta">
	<t path="haxe.macro.MetadataEntry"/>
	<c path="String"/>
</f></printMetadata>
		<printComplexType public="1" set="method" line="94"><f a="ct">
	<e path="haxe.macro.ComplexType"/>
	<c path="String"/>
</f></printComplexType>
		<printTypePath public="1" set="method" line="87"><f a="tp">
	<t path="haxe.macro.TypePath"/>
	<c path="String"/>
</f></printTypePath>
		<printTypeParam public="1" set="method" line="82"><f a="param">
	<e path="haxe.macro.TypeParam"/>
	<c path="String"/>
</f></printTypeParam>
		<printConstant public="1" set="method" line="73"><f a="c">
	<e path="haxe.macro.Constant"/>
	<c path="String"/>
</f></printConstant>
		<printBinop public="1" set="method" line="45"><f a="op">
	<e path="haxe.macro.Binop"/>
	<c path="String"/>
</f></printBinop>
		<printUnop public="1" set="method" line="37"><f a="op">
	<e path="haxe.macro.Unop"/>
	<c path="String"/>
</f></printUnop>
		<tabString><c path="String"/></tabString>
		<tabs><c path="String"/></tabs>
		<new public="1" set="method" line="32"><f a="?tabString">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="haxe.macro.TExprTools" params="" file="/usr/lib/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools">
		<c path="haxe.macro.ExprTools"/>
		<haxe_doc>This class can be added via 'using haxe.macro.Tools' in order to enable
	'using' functionality on all macro tool classes listed below.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TComplexTypeTools" params="" file="/usr/lib/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools"><c path="haxe.macro.ComplexTypeTools"/></typedef>
	<typedef path="haxe.macro.TTypeTools" params="" file="/usr/lib/haxe/std/haxe/macro/Tools.hx" module="haxe.macro.Tools"><c path="haxe.macro.TypeTools"/></typedef>
	<typedef path="haxe.macro.Ref" params="T" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<toString set="method"><f a=""><c path="String"/></f></toString>
	<get set="method"><f a=""><c path="haxe.macro.Ref.T"/></f></get>
</a></typedef>
	<enum path="haxe.macro.Type" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx">
		<TType a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.DefType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</TType>
		<TMono a="t"><t path="haxe.macro.Ref"><t path="Null"><e path="haxe.macro.Type"/></t></t></TMono>
		<TLazy a="f"><f a=""><e path="haxe.macro.Type"/></f></TLazy>
		<TInst a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</TInst>
		<TFun a="args:ret">
			<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
			<e path="haxe.macro.Type"/>
		</TFun>
		<TEnum a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</TEnum>
		<TDynamic a="t"><t path="Null"><e path="haxe.macro.Type"/></t></TDynamic>
		<TAnonymous a="a"><t path="haxe.macro.Ref"><t path="haxe.macro.AnonType"/></t></TAnonymous>
		<TAbstract a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</TAbstract>
	</enum>
	<typedef path="haxe.macro.AnonType" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a><fields><c path="Array"><t path="haxe.macro.ClassField"/></c></fields></a></typedef>
	<typedef path="haxe.macro.BaseType" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.ClassField" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<kind><e path="haxe.macro.FieldKind"/></kind>
	<isPublic><x path="Bool"/></isPublic>
	<expr set="method"><f a=""><t path="Null"><e path="haxe.macro.TypedExpr"/></t></f></expr>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<enum path="haxe.macro.ClassKind" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<KTypeParameter a="constraints"><c path="Array"><e path="haxe.macro.Type"/></c></KTypeParameter>
		<KNormal/>
		<KMacroType/>
		<KGenericInstance a="cl:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</KGenericInstance>
		<KGeneric/>
		<KExtension a="cl:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</KExtension>
		<KExpr a="expr"><t path="haxe.macro.Expr"/></KExpr>
		<KAbstractImpl a="a"><t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t></KAbstractImpl>
	</enum>
	<typedef path="haxe.macro.ClassType" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<superClass><t path="Null"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></t></superClass>
	<statics><t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t></statics>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<kind><e path="haxe.macro.ClassKind"/></kind>
	<isPrivate><x path="Bool"/></isPrivate>
	<isInterface><x path="Bool"/></isInterface>
	<isExtern><x path="Bool"/></isExtern>
	<interfaces><c path="Array"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></c></interfaces>
	<init><t path="Null"><e path="haxe.macro.TypedExpr"/></t></init>
	<fields><t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t></fields>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
	<constructor><t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></t></constructor>
</a></typedef>
	<typedef path="haxe.macro.EnumField" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<index><x path="Int"/></index>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.EnumType" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<names><c path="Array"><c path="String"/></c></names>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
	<constructs><c path="haxe.ds.StringMap"><t path="haxe.macro.EnumField"/></c></constructs>
</a></typedef>
	<typedef path="haxe.macro.DefType" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.AbstractType" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<unops><c path="Array"><a>
	<postFix><x path="Bool"/></postFix>
	<op><e path="haxe.macro.Unop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c></unops>
	<type><e path="haxe.macro.Type"/></type>
	<to><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><t path="Null"><t path="haxe.macro.ClassField"/></t></field>
</a></c></to>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<impl><t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t></impl>
	<from><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><t path="Null"><t path="haxe.macro.ClassField"/></t></field>
</a></c></from>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
	<binops><c path="Array"><a>
	<op><e path="haxe.macro.Binop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c></binops>
	<array><c path="Array"><t path="haxe.macro.ClassField"/></c></array>
</a></typedef>
	<typedef path="haxe.macro.MetaAccess" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<remove set="method"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></remove>
	<has set="method"><f a="name">
	<c path="String"/>
	<x path="Bool"/>
</f></has>
	<get set="method"><f a=""><t path="haxe.macro.Metadata"/></f></get>
	<add set="method"><f a="name:params:pos">
	<c path="String"/>
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<t path="haxe.macro.Position"/>
	<x path="Void"/>
</f></add>
</a></typedef>
	<enum path="haxe.macro.FieldKind" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<FVar a="read:write">
			<e path="haxe.macro.VarAccess"/>
			<e path="haxe.macro.VarAccess"/>
		</FVar>
		<FMethod a="k"><e path="haxe.macro.MethodKind"/></FMethod>
	</enum>
	<enum path="haxe.macro.VarAccess" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<AccResolve/>
		<AccRequire a="r:?msg">
			<c path="String"/>
			<c path="String"/>
		</AccRequire>
		<AccNormal/>
		<AccNo/>
		<AccNever/>
		<AccInline/>
		<AccCall/>
	</enum>
	<enum path="haxe.macro.MethodKind" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<MethNormal/>
		<MethMacro/>
		<MethInline/>
		<MethDynamic/>
	</enum>
	<enum path="haxe.macro.TypedExpr" params="" file="/usr/lib/haxe/std/haxe/macro/Type.hx" module="haxe.macro.Type"/>
	<class path="haxe.macro.TypeTools" params="" file="/usr/lib/haxe/std/haxe/macro/TypeTools.hx"><haxe_doc>This class provides some utility methods to work with types. It is
	best used through 'using haxe.macro.TypeTools' syntax and then provides
	additional methods on haxe.macro.Type instances.</haxe_doc></class>
	<class path="haxe.remoting.AsyncConnection" params="" file="/usr/lib/haxe/std/haxe/remoting/AsyncConnection.hx" interface="1">
		<setErrorHandler public="1" set="method"><f a="error">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<call public="1" set="method"><f a="params:?result">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<resolve public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.AMFConnection" params="" file="/usr/lib/haxe/std/haxe/remoting/AMFConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<urlConnect public="1" set="method" line="70" static="1"><f a="gatewayUrl">
	<c path="String"/>
	<c path="haxe.remoting.AMFConnection"/>
</f></urlConnect>
		<connect public="1" set="method" line="87" static="1"><f a="nc">
	<c path="flash.NetConnection"/>
	<c path="haxe.remoting.AMFConnection"/>
</f></connect>
		<call public="1" set="method" line="57"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<close public="1" set="method" line="53"><f a=""><x path="Void"/></f></close>
		<setErrorHandler public="1" set="method" line="49"><f a="h">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<resolve public="1" set="method" line="43"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<__path><c path="Array"><c path="String"/></c></__path>
		<__data><a>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
	<cnx><c path="flash.NetConnection"/></cnx>
</a></__data>
		<new set="method" line="38"><f a="data:path">
	<a>
		<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
		<cnx><c path="flash.NetConnection"/></cnx>
	</a>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.AsyncAdapter" params="" file="/usr/lib/haxe/std/haxe/remoting/AsyncAdapter.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<create public="1" set="method" line="56" static="1"><f a="cnx">
	<c path="haxe.remoting.Connection"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></create>
		<call public="1" set="method" line="45"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<setErrorHandler public="1" set="method" line="41"><f a="h">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<resolve public="1" set="method" line="37"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<__error><a><ref><f a="">
	<d/>
	<x path="Void"/>
</f></ref></a></__error>
		<__cnx><c path="haxe.remoting.Connection"/></__cnx>
		<new set="method" line="32"><f a="cnx:error">
	<c path="haxe.remoting.Connection"/>
	<a><ref><f a="">
	<d/>
	<x path="Void"/>
</f></ref></a>
	<x path="Void"/>
</f></new>
		<haxe_doc>Build an AsyncConnection from a synchronized Connection.</haxe_doc>
	</class>
	<class path="haxe.remoting.AsyncDebugConnection" params="" file="/usr/lib/haxe/std/haxe/remoting/AsyncDebugConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<create public="1" set="method" line="76" static="1"><f a="cnx">
	<c path="haxe.remoting.AsyncConnection"/>
	<c path="haxe.remoting.AsyncDebugConnection"/>
</f></create>
		<call public="1" set="method" line="63"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<setCallDebug public="1" set="method" line="59"><f a="h">
	<f a=":">
		<c path="Array"><c path="String"/></c>
		<c path="Array"><d/></c>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setCallDebug>
		<setResultDebug public="1" set="method" line="55"><f a="h">
	<f a="::">
		<c path="Array"><c path="String"/></c>
		<c path="Array"><d/></c>
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setResultDebug>
		<setErrorDebug public="1" set="method" line="51"><f a="h">
	<f a="::">
		<c path="Array"><c path="String"/></c>
		<c path="Array"><d/></c>
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorDebug>
		<setErrorHandler public="1" set="method" line="47"><f a="h">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<resolve public="1" set="method" line="41"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<__data><a>
	<onresult><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<x path="Void"/>
</f></onresult>
	<onerror><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<x path="Void"/>
</f></onerror>
	<oncall><f a=":">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></oncall>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
</a></__data>
		<__cnx><c path="haxe.remoting.AsyncConnection"/></__cnx>
		<__path><c path="Array"><c path="String"/></c></__path>
		<new set="method" line="35"><f a="path:cnx:data">
	<c path="Array"><c path="String"/></c>
	<c path="haxe.remoting.AsyncConnection"/>
	<a>
		<onresult><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<x path="Void"/>
</f></onresult>
		<onerror><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<x path="Void"/>
</f></onerror>
		<oncall><f a=":">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></oncall>
		<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
	</a>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.AsyncDebugConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.AsyncProxy" params="T" file="/usr/lib/haxe/std/haxe/remoting/AsyncProxy.hx">
		<__cnx><c path="haxe.remoting.AsyncConnection"/></__cnx>
		<new set="method" line="33"><f a="c">
	<c path="haxe.remoting.AsyncConnection"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>This class is magic. When you extend it with a class C, it will automaticaly
	create a stub class with all public methods forwarding remoting messages over
	the connection.</haxe_doc>
	</class>
	<class path="haxe.remoting.Connection" params="" file="/usr/lib/haxe/std/haxe/remoting/Connection.hx" interface="1">
		<call public="1" set="method"><f a="params">
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<resolve public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.Connection"/>
</f></resolve>
		<haxe_dynamic><c path="haxe.remoting.Connection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.Context" params="" file="/usr/lib/haxe/std/haxe/remoting/Context.hx">
		<share public="1" set="method" line="55" static="1"><f a="name:obj">
	<c path="String"/>
	<a/>
	<c path="haxe.remoting.Context"/>
</f></share>
		<call public="1" set="method" line="36"><f a="path:params">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<addObject public="1" set="method" line="32"><f a="name:obj:?recursive">
	<c path="String"/>
	<a/>
	<x path="Bool"/>
	<x path="Void"/>
</f></addObject>
		<objects><c path="haxe.ds.StringMap"><a>
	<rec><x path="Bool"/></rec>
	<obj><d/></obj>
</a></c></objects>
		<new public="1" set="method" line="28"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.remoting.ContextAll" params="" file="/usr/lib/haxe/std/haxe/remoting/ContextAll.hx">
		<extends path="haxe.remoting.Context"/>
		<call public="1" set="method" line="26" override="1"><f a="path:params">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<new public="1" set="method" line="24"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.remoting.DelayedConnection" params="" file="/usr/lib/haxe/std/haxe/remoting/DelayedConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<process set="method" line="70" static="1"><f a="d">
	<c path="haxe.remoting.DelayedConnection"/>
	<x path="Void"/>
</f></process>
		<create public="1" set="method" line="86" static="1"><f a=""><c path="haxe.remoting.DelayedConnection"/></f></create>
		<call public="1" set="method" line="65"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<set_connection set="method" line="59"><f a="cnx">
	<c path="haxe.remoting.AsyncConnection"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></set_connection>
		<get_connection set="method" line="55"><f a=""><c path="haxe.remoting.AsyncConnection"/></f></get_connection>
		<resolve public="1" set="method" line="49"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<setErrorHandler public="1" set="method" line="45"><f a="h">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<__data><a>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
	<cnx><c path="haxe.remoting.AsyncConnection"/></cnx>
	<cache><c path="Array"><a>
	<path><c path="Array"><c path="String"/></c></path>
	<params><c path="Array"><d/></c></params>
	<onResult><f a="">
	<d/>
	<x path="Void"/>
</f></onResult>
	<onError><f a="">
	<d/>
	<x path="Void"/>
</f></onError>
</a></c></cache>
</a></__data>
		<__path><c path="Array"><c path="String"/></c></__path>
		<connection public="1" get="accessor" set="accessor"><c path="haxe.remoting.AsyncConnection"/></connection>
		<new set="method" line="40"><f a="data:path">
	<a>
		<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
		<cnx><c path="haxe.remoting.AsyncConnection"/></cnx>
		<cache><c path="Array"><a>
	<path><c path="Array"><c path="String"/></c></path>
	<params><c path="Array"><d/></c></params>
	<onResult><f a="">
	<d/>
	<x path="Void"/>
</f></onResult>
	<onError><f a="">
	<d/>
	<x path="Void"/>
</f></onError>
</a></c></cache>
	</a>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.ExternalConnection" params="" file="/usr/lib/haxe/std/haxe/remoting/ExternalConnection.hx">
		<implements path="haxe.remoting.Connection"/>
		<escapeString set="method" line="53" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></escapeString>
		<connections line="94" static="1"><c path="haxe.ds.StringMap"><c path="haxe.remoting.ExternalConnection"/></c></connections>
		<doCall set="method" line="97" static="1">
			<f a="name:path:params">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":keep"/></meta>
		</doCall>
		<jsConnect public="1" set="method" line="123" static="1"><f a="name:?ctx">
	<c path="String"/>
	<c path="haxe.remoting.Context"/>
	<c path="haxe.remoting.ExternalConnection"/>
</f></jsConnect>
		<call public="1" set="method" line="62"><f a="params">
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<close public="1" set="method" line="44"><f a=""><x path="Void"/></f></close>
		<resolve public="1" set="method" line="38"><f a="field">
	<c path="String"/>
	<c path="haxe.remoting.Connection"/>
</f></resolve>
		<__path><c path="Array"><c path="String"/></c></__path>
		<__data><a>
	<name><c path="String"/></name>
	<ctx><c path="haxe.remoting.Context"/></ctx>
</a></__data>
		<new set="method" line="33"><f a="data:path">
	<a>
		<name><c path="String"/></name>
		<ctx><c path="haxe.remoting.Context"/></ctx>
	</a>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>Synchronous communications between Flash and Javascript.</haxe_doc>
		<meta><m n=":expose"/></meta>
		<haxe_dynamic><c path="haxe.remoting.Connection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.FlashJsConnection" params="" file="/usr/lib/haxe/std/haxe/remoting/FlashJsConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<connections line="90" static="1"><c path="haxe.ds.StringMap"><c path="haxe.remoting.FlashJsConnection"/></c></connections>
		<escapeString set="method" line="92" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></escapeString>
		<doCall set="method" line="100" static="1"><f a="name:path:params">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></doCall>
		<connect public="1" set="method" line="120" static="1"><f a="name:objId:?ctx">
	<c path="String"/>
	<c path="String"/>
	<c path="haxe.remoting.Context"/>
	<c path="haxe.remoting.FlashJsConnection"/>
</f></connect>
		<call public="1" set="method" line="57"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<setErrorHandler public="1" set="method" line="53"><f a="h">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<resolve public="1" set="method" line="47"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<close public="1" set="method" line="43"><f a=""><x path="Void"/></f></close>
		<__data><a>
	<timer><c path="haxe.Timer"/></timer>
	<queue><c path="Array"><f a=""><x path="Void"/></f></c></queue>
	<name><c path="String"/></name>
	<id><c path="String"/></id>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
	<ctx><c path="haxe.remoting.Context"/></ctx>
</a></__data>
		<__path><c path="Array"><c path="String"/></c></__path>
		<new set="method" line="38"><f a="data:path">
	<a>
		<timer><c path="haxe.Timer"/></timer>
		<queue><c path="Array"><f a=""><x path="Void"/></f></c></queue>
		<name><c path="String"/></name>
		<id><c path="String"/></id>
		<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
		<ctx><c path="haxe.remoting.Context"/></ctx>
	</a>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.HttpAsyncConnection" params="" file="/usr/lib/haxe/std/haxe/remoting/HttpAsyncConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<urlConnect public="1" set="method" line="73" static="1"><f a="url">
	<c path="String"/>
	<c path="haxe.remoting.HttpAsyncConnection"/>
</f></urlConnect>
		<call public="1" set="method" line="44"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<setErrorHandler public="1" set="method" line="40"><f a="h">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<resolve public="1" set="method" line="34"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<__path><c path="Array"><c path="String"/></c></__path>
		<__data><a>
	<url><c path="String"/></url>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
</a></__data>
		<new set="method" line="29"><f a="data:path">
	<a>
		<url><c path="String"/></url>
		<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
	</a>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.HttpConnection" params="" file="/usr/lib/haxe/std/haxe/remoting/HttpConnection.hx">
		<implements path="haxe.remoting.Connection"/>
		<TIMEOUT public="1" line="26" static="1"><x path="Float"/></TIMEOUT>
		<processRequest public="1" set="method" line="94" static="1"><f a="requestData:ctx">
	<c path="String"/>
	<c path="haxe.remoting.Context"/>
	<c path="String"/>
</f></processRequest>
		<call public="1" set="method" line="42"><f a="params">
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<resolve public="1" set="method" line="36"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.Connection"/>
</f></resolve>
		<__path><c path="Array"><c path="String"/></c></__path>
		<__url><c path="String"/></__url>
		<new set="method" line="31"><f a="url:path">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.Connection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.LocalConnection" params="" file="/usr/lib/haxe/std/haxe/remoting/LocalConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<ID line="26" static="1"><x path="Int"/></ID>
		<remotingCall set="method" line="77" static="1"><f a="c:id:path:args">
	<c path="haxe.remoting.LocalConnection"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></remotingCall>
		<remotingResult set="method" line="92" static="1"><f a="c:id:result">
	<c path="haxe.remoting.LocalConnection"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></remotingResult>
		<connect public="1" set="method" line="109" static="1"><f a="name:?ctx:?allowDomains">
	<c path="String"/>
	<c path="haxe.remoting.Context"/>
	<c path="Array"><c path="String"/></c>
	<c path="haxe.remoting.LocalConnection"/>
</f></connect>
		<close public="1" set="method" line="73"><f a=""><x path="Void"/></f></close>
		<call public="1" set="method" line="58"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<setErrorHandler public="1" set="method" line="54"><f a="h">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<resolve public="1" set="method" line="48"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<__data><a>
	<target><c path="String"/></target>
	<results><c path="haxe.ds.IntMap"><a>
	<result><f a="">
	<d/>
	<x path="Void"/>
</f></result>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
</a></c></results>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
	<ctx><c path="haxe.remoting.Context"/></ctx>
	<cnx><c path="flash.LocalConnection"/></cnx>
</a></__data>
		<__path><c path="Array"><c path="String"/></c></__path>
		<new set="method" line="43"><f a="data:path">
	<a>
		<target><c path="String"/></target>
		<results><c path="haxe.ds.IntMap"><a>
	<result><f a="">
	<d/>
	<x path="Void"/>
</f></result>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
</a></c></results>
		<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
		<ctx><c path="haxe.remoting.Context"/></ctx>
		<cnx><c path="flash.LocalConnection"/></cnx>
	</a>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<class path="haxe.remoting.Proxy" params="T" file="/usr/lib/haxe/std/haxe/remoting/Proxy.hx">
		<__cnx><c path="haxe.remoting.Connection"/></__cnx>
		<new set="method" line="33"><f a="c">
	<c path="haxe.remoting.Connection"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>This class is magic. When you extend it with a class C, it will automaticaly
	create a stub class with all public methods forwarding remoting messages over
	the connection.</haxe_doc>
	</class>
	<class path="haxe.remoting.SocketConnection" params="" file="/usr/lib/haxe/std/haxe/remoting/SocketConnection.hx">
		<implements path="haxe.remoting.AsyncConnection"/>
		<create public="1" set="method" line="124" static="1"><f a="s:?ctx">
	<t path="haxe.remoting.Socket"/>
	<c path="haxe.remoting.Context"/>
	<c path="haxe.remoting.SocketConnection"/>
</f></create>
		<defaultLog set="method" line="115"><f a="path:args:e">
	<a><join set="null"><f a="">
	<c path="String"/>
	<c path="String"/>
</f></join></a>
	<a><join set="null"><f a="">
	<c path="String"/>
	<c path="String"/>
</f></join></a>
	<unknown/>
	<x path="Void"/>
</f></defaultLog>
		<processMessage public="1" set="method" line="81"><f a="data">
	<c path="String"/>
	<x path="Void"/>
</f></processMessage>
		<close public="1" set="method" line="77"><f a=""><x path="Void"/></f></close>
		<getProtocol public="1" set="method" line="73"><f a=""><c path="haxe.remoting.SocketProtocol"/></f></getProtocol>
		<setProtocol public="1" set="method" line="69"><f a="p">
	<c path="haxe.remoting.SocketProtocol"/>
	<x path="Void"/>
</f></setProtocol>
		<setErrorLogger public="1" set="method" line="65"><f a="h">
	<f a="::">
		<c path="Array"><c path="String"/></c>
		<c path="Array"><d/></c>
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorLogger>
		<setErrorHandler public="1" set="method" line="61"><f a="h">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></setErrorHandler>
		<call public="1" set="method" line="52"><f a="params:?onResult">
	<c path="Array"><d/></c>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></call>
		<resolve public="1" set="method" line="46"><f a="name">
	<c path="String"/>
	<c path="haxe.remoting.AsyncConnection"/>
</f></resolve>
		<__data><a>
	<timer><c path="haxe.Timer"/></timer>
	<results><c path="List"><a>
	<onResult><f a="">
	<d/>
	<x path="Void"/>
</f></onResult>
	<onError><f a="">
	<d/>
	<x path="Void"/>
</f></onError>
</a></c></results>
	<queue><c path="Array"><f a=""><x path="Void"/></f></c></queue>
	<protocol><c path="haxe.remoting.SocketProtocol"/></protocol>
	<log><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<x path="Void"/>
</f></log>
	<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
</a></__data>
		<__path><c path="Array"><c path="String"/></c></__path>
		<new set="method" line="41"><f a="data:path">
	<a>
		<timer><c path="haxe.Timer"/></timer>
		<results><c path="List"><a>
	<onResult><f a="">
	<d/>
	<x path="Void"/>
</f></onResult>
	<onError><f a="">
	<d/>
	<x path="Void"/>
</f></onError>
</a></c></results>
		<queue><c path="Array"><f a=""><x path="Void"/></f></c></queue>
		<protocol><c path="haxe.remoting.SocketProtocol"/></protocol>
		<log><f a="::">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
	<x path="Void"/>
</f></log>
		<error><f a="">
	<d/>
	<x path="Void"/>
</f></error>
	</a>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.remoting.AsyncConnection"/></haxe_dynamic>
	</class>
	<typedef path="haxe.remoting.Socket" params="" file="/usr/lib/haxe/std/haxe/remoting/SocketProtocol.hx" module="haxe.remoting.SocketProtocol"><c path="flash.XMLSocket"/></typedef>
	<class path="haxe.remoting.SocketProtocol" params="" file="/usr/lib/haxe/std/haxe/remoting/SocketProtocol.hx">
		<processAnswer public="1" set="method" line="182"><f a="data">
	<c path="String"/>
	<d/>
</f></processAnswer>
		<processRequest public="1" set="method" line="160"><f a="data:?onError">
	<c path="String"/>
	<f a="::">
		<c path="Array"><c path="String"/></c>
		<c path="Array"><d/></c>
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></processRequest>
		<isRequest public="1" set="method" line="152"><f a="data">
	<c path="String"/>
	<x path="Bool"/>
</f></isRequest>
		<decodeData public="1" set="dynamic" line="148"><f a="data">
	<c path="String"/>
	<c path="String"/>
</f></decodeData>
		<sendMessage public="1" set="method" line="135"><f a="msg">
	<c path="String"/>
	<x path="Void"/>
</f></sendMessage>
		<sendAnswer public="1" set="method" line="125"><f a="answer:?isException">
	<d/>
	<x path="Bool"/>
	<x path="Void"/>
</f></sendAnswer>
		<sendRequest public="1" set="method" line="117"><f a="path:params">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></sendRequest>
		<encodeMessageLength public="1" set="method" line="109"><f a="len">
	<x path="Int"/>
	<a>
		<c2><t path="Null"><x path="Int"/></t></c2>
		<c1><t path="Null"><x path="Int"/></t></c1>
	</a>
</f></encodeMessageLength>
		<messageLength public="1" set="method" line="101"><f a="c1:c2">
	<x path="Int"/>
	<x path="Int"/>
	<t path="Null"><x path="Int"/></t>
</f></messageLength>
		<encodeChar set="method" line="80"><f a="c">
	<x path="Int"/>
	<t path="Null"><x path="Int"/></t>
</f></encodeChar>
		<decodeChar set="method" line="61"><f a="c">
	<x path="Int"/>
	<t path="Null"><x path="Int"/></t>
</f></decodeChar>
		<context public="1"><c path="haxe.remoting.Context"/></context>
		<socket public="1"><t path="haxe.remoting.Socket"/></socket>
		<new public="1" set="method" line="56"><f a="sock:ctx">
	<t path="haxe.remoting.Socket"/>
	<c path="haxe.remoting.Context"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>The haXe Remoting Socket Protocol is composed of serialized string exchanges.
	Each string is prefixed with a 2-chars header encoding the string size (up to 4KB)
	and postfixed with the \0 message delimiting char.
	A request string is composed of the following serialized values :
		- the boolean true for a request
		- an array of strings representing the object+method path
		- an array of parameters
	A response string is composed of the following serialized values :
		- the boolean false for a response
		- a serialized value representing the result
	Exceptions are serialized with [serializeException] so they will be thrown immediatly
	when they are unserialized.</haxe_doc>
	</class>
	<class path="haxe.remoting.SocketWrapper" params="" file="/usr/lib/haxe/std/haxe/remoting/SocketWrapper.hx">
		<ID line="30" static="1"><x path="Int"/></ID>
		<create set="method" line="32" static="1"><f a="prefix">
	<c path="String"/>
	<c path="String"/>
</f></create>
		<init set="method" line="73" static="1"><f a=""><unknown/></f></init>
		<_ line="83" static="1"><unknown/></_>
		<haxe_doc>See [js.XMLSocket]</haxe_doc>
	</class>
	<typedef path="haxe.rtti.Path" params="" file="/usr/lib/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="String"/></typedef>
	<typedef path="haxe.rtti.Platforms" params="" file="/usr/lib/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="List"><c path="String"/></c></typedef>
	<enum path="haxe.rtti.CType" params="" file="/usr/lib/haxe/std/haxe/rtti/CType.hx">
		<CUnknown/>
		<CTypedef a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CTypedef>
		<CFunction a="args:ret">
			<c path="List"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
			<e path="haxe.rtti.CType"/>
		</CFunction>
		<CEnum a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CEnum>
		<CDynamic a="?t"><e path="haxe.rtti.CType"/></CDynamic>
		<CClass a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CClass>
		<CAnonymous a="fields"><c path="List"><t path="haxe.rtti.ClassField"/></c></CAnonymous>
		<CAbstract a="name:params">
			<t path="haxe.rtti.Path"/>
			<c path="List"><e path="haxe.rtti.CType"/></c>
		</CAbstract>
	</enum>
	<typedef path="haxe.rtti.PathParams" params="" file="/usr/lib/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<path><t path="haxe.rtti.Path"/></path>
	<params><c path="List"><e path="haxe.rtti.CType"/></c></params>
</a></typedef>
	<typedef path="haxe.rtti.TypeParams" params="" file="/usr/lib/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="Array"><c path="String"/></c></typedef>
	<enum path="haxe.rtti.Rights" params="" file="/usr/lib/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<RNormal/>
		<RNo/>
		<RMethod/>
		<RInline/>
		<RDynamic/>
		<RCall a="m"><c path="String"/></RCall>
	</enum>
	<typedef path="haxe.rtti.MetaData" params="" file="/usr/lib/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="Array"><a>
	<params><c path="Array"><c path="String"/></c></params>
	<name><c path="String"/></name>
</a></c></typedef>
	<typedef path="haxe.rtti.ClassField" params="" file="/usr/lib/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<type><e path="haxe.rtti.CType"/></type>
	<set><e path="haxe.rtti.Rights"/></set>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<name><c path="String"/></name>
	<meta><t path="haxe.rtti.MetaData"/></meta>
	<line><t path="Null"><x path="Int"/></t></line>
	<isPublic><x path="Bool"/></isPublic>
	<isOverride><x path="Bool"/></isOverride>
	<get><e path="haxe.rtti.Rights"/></get>
	<doc><c path="String"/></doc>
</a></typedef>
	<typedef path="haxe.rtti.TypeInfos" params="" file="/usr/lib/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<meta><t path="haxe.rtti.MetaData"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<file><t path="Null"><c path="String"/></t></file>
	<doc><c path="String"/></doc>
</a></typedef>
	<typedef path="haxe.rtti.Classdef" params="" file="/usr/lib/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<tdynamic><t path="Null"><e path="haxe.rtti.CType"/></t></tdynamic>
	<superClass><t path="haxe.rtti.PathParams"/></superClass>
	<statics><c path="List"><t path="haxe.rtti.ClassField"/></c></statics>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<meta><t path="haxe.rtti.MetaData"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isInterface><x path="Bool"/></isInterface>
	<isExtern><x path="Bool"/></isExtern>
	<interfaces><c path="List"><t path="haxe.rtti.PathParams"/></c></interfaces>
	<file><t path="Null"><c path="String"/></t></file>
	<fields><c path="List"><t path="haxe.rtti.ClassField"/></c></fields>
	<doc><c path="String"/></doc>
</a></typedef>
	<typedef path="haxe.rtti.EnumField" params="" file="/usr/lib/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<name><c path="String"/></name>
	<meta><t path="haxe.rtti.MetaData"/></meta>
	<doc><c path="String"/></doc>
	<args><t path="Null"><c path="List"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c></t></args>
</a></typedef>
	<typedef path="haxe.rtti.Enumdef" params="" file="/usr/lib/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<meta><t path="haxe.rtti.MetaData"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<file><t path="Null"><c path="String"/></t></file>
	<doc><c path="String"/></doc>
	<constructors><c path="List"><t path="haxe.rtti.EnumField"/></c></constructors>
</a></typedef>
	<typedef path="haxe.rtti.Typedef" params="" file="/usr/lib/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<types><c path="haxe.ds.StringMap"><e path="haxe.rtti.CType"/></c></types>
	<type><e path="haxe.rtti.CType"/></type>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<meta><t path="haxe.rtti.MetaData"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<file><t path="Null"><c path="String"/></t></file>
	<doc><c path="String"/></doc>
</a></typedef>
	<typedef path="haxe.rtti.Abstractdef" params="" file="/usr/lib/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<supers><c path="Array"><e path="haxe.rtti.CType"/></c></supers>
	<subs><c path="Array"><e path="haxe.rtti.CType"/></c></subs>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<meta><t path="haxe.rtti.MetaData"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<file><t path="Null"><c path="String"/></t></file>
	<doc><c path="String"/></doc>
</a></typedef>
	<enum path="haxe.rtti.TypeTree" params="" file="/usr/lib/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<TTypedecl a="t"><t path="haxe.rtti.Typedef"/></TTypedecl>
		<TPackage a="name:full:subs">
			<c path="String"/>
			<c path="String"/>
			<c path="Array"><e path="haxe.rtti.TypeTree"/></c>
		</TPackage>
		<TEnumdecl a="e"><t path="haxe.rtti.Enumdef"/></TEnumdecl>
		<TClassdecl a="c"><t path="haxe.rtti.Classdef"/></TClassdecl>
		<TAbstractdecl a="a"><t path="haxe.rtti.Abstractdef"/></TAbstractdecl>
	</enum>
	<typedef path="haxe.rtti.TypeRoot" params="" file="/usr/lib/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="Array"><e path="haxe.rtti.TypeTree"/></c></typedef>
	<class path="haxe.rtti.TypeApi" params="" file="/usr/lib/haxe/std/haxe/rtti/CType.hx" module="haxe.rtti.CType">
		<typeInfos public="1" set="method" line="127" static="1"><f a="t">
	<e path="haxe.rtti.TypeTree"/>
	<t path="haxe.rtti.TypeInfos"/>
</f></typeInfos>
		<isVar public="1" set="method" line="139" static="1"><f a="t">
	<e path="haxe.rtti.CType"/>
	<x path="Bool"/>
</f></isVar>
		<leq params="T" set="method" line="146" static="1"><f a="f:l1:l2">
	<f a=":">
		<c path="leq.T"/>
		<c path="leq.T"/>
		<x path="Bool"/>
	</f>
	<c path="List"><c path="leq.T"/></c>
	<c path="List"><c path="leq.T"/></c>
	<x path="Bool"/>
</f></leq>
		<rightsEq public="1" set="method" line="160" static="1"><f a="r1:r2">
	<e path="haxe.rtti.Rights"/>
	<e path="haxe.rtti.Rights"/>
	<x path="Bool"/>
</f></rightsEq>
		<typeEq public="1" set="method" line="175" static="1"><f a="t1:t2">
	<e path="haxe.rtti.CType"/>
	<e path="haxe.rtti.CType"/>
	<x path="Bool"/>
</f></typeEq>
		<fieldEq public="1" set="method" line="228" static="1"><f a="f1:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Bool"/>
</f></fieldEq>
		<constructorEq public="1" set="method" line="248" static="1"><f a="c1:c2">
	<t path="haxe.rtti.EnumField"/>
	<t path="haxe.rtti.EnumField"/>
	<x path="Bool"/>
</f></constructorEq>
	</class>
	<class path="haxe.rtti.Meta" params="" file="/usr/lib/haxe/std/haxe/rtti/Meta.hx">
		<getType public="1" set="method" line="32" static="1">
			<f a="t">
				<d/>
				<d><c path="Array"><d/></c></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given type (class or enum)</haxe_doc>
		</getType>
		<getStatics public="1" set="method" line="44" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given class static fields</haxe_doc>
		</getStatics>
		<getFields public="1" set="method" line="56" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given class fields or enum constructors</haxe_doc>
		</getFields>
		<haxe_doc>An api to access classes and enums metadata at runtime.</haxe_doc>
	</class>
	<class path="haxe.rtti.XmlParser" params="" file="/usr/lib/haxe/std/haxe/rtti/XmlParser.hx">
		<defplat set="method" line="588"><f a=""><c path="List"><c path="String"/></c></f></defplat>
		<xtypeparams set="method" line="581"><f a="x">
	<c path="haxe.xml.Fast"/>
	<c path="List"><e path="haxe.rtti.CType"/></c>
</f></xtypeparams>
		<xtype set="method" line="528"><f a="x">
	<c path="haxe.xml.Fast"/>
	<e path="haxe.rtti.CType"/>
</f></xtype>
		<xtypedef set="method" line="500"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Typedef"/>
</f></xtypedef>
		<xabstract set="method" line="467"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Abstractdef"/>
</f></xabstract>
		<xenumfield set="method" line="437"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.EnumField"/>
</f></xenumfield>
		<xenum set="method" line="412"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Enumdef"/>
</f></xenum>
		<xclassfield set="method" line="386"><f a="x:?defPublic">
	<c path="haxe.xml.Fast"/>
	<x path="Bool"/>
	<t path="haxe.rtti.ClassField"/>
</f></xclassfield>
		<xclass set="method" line="346"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.Classdef"/>
</f></xclass>
		<xpath set="method" line="335"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.PathParams"/>
</f></xpath>
		<xmeta set="method" line="324"><f a="x">
	<c path="haxe.xml.Fast"/>
	<t path="haxe.rtti.MetaData"/>
</f></xmeta>
		<processElement public="1" set="method" line="313"><f a="x">
	<c path="Xml"/>
	<e path="haxe.rtti.TypeTree"/>
</f></processElement>
		<xroot set="method" line="307"><f a="x">
	<c path="haxe.xml.Fast"/>
	<x path="Void"/>
</f></xroot>
		<xerror set="method" line="303"><f a="c">
	<c path="haxe.xml.Fast"/>
	<d/>
</f></xerror>
		<mkRights set="method" line="293"><f a="r">
	<c path="String"/>
	<e path="haxe.rtti.Rights"/>
</f></mkRights>
		<mkTypeParams set="method" line="286"><f a="p">
	<c path="String"/>
	<t path="haxe.rtti.TypeParams"/>
</f></mkTypeParams>
		<mkPath set="method" line="282"><f a="p">
	<c path="String"/>
	<t path="haxe.rtti.Path"/>
</f></mkPath>
		<merge set="method" line="193"><f a="t">
	<e path="haxe.rtti.TypeTree"/>
	<x path="Void"/>
</f></merge>
		<mergeAbstracts set="method" line="178"><f a="a:a2">
	<t path="haxe.rtti.Abstractdef"/>
	<t path="haxe.rtti.Abstractdef"/>
	<x path="Bool"/>
</f></mergeAbstracts>
		<mergeTypedefs set="method" line="170"><f a="t:t2">
	<t path="haxe.rtti.Typedef"/>
	<t path="haxe.rtti.Typedef"/>
	<x path="Bool"/>
</f></mergeTypedefs>
		<mergeEnums set="method" line="150"><f a="e:e2">
	<t path="haxe.rtti.Enumdef"/>
	<t path="haxe.rtti.Enumdef"/>
	<x path="Bool"/>
</f></mergeEnums>
		<mergeClasses set="method" line="112"><f a="c:c2">
	<t path="haxe.rtti.Classdef"/>
	<t path="haxe.rtti.Classdef"/>
	<x path="Bool"/>
</f></mergeClasses>
		<newField public="1" set="dynamic" line="109"><f a="c:f">
	<t path="haxe.rtti.Classdef"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Void"/>
</f></newField>
		<mergeFields set="method" line="105"><f a="f:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Bool"/>
</f></mergeFields>
		<mergeDoc set="method" line="97"><f a="f1:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Bool"/>
</f></mergeDoc>
		<mergeRights set="method" line="88"><f a="f1:f2">
	<t path="haxe.rtti.ClassField"/>
	<t path="haxe.rtti.ClassField"/>
	<x path="Bool"/>
</f></mergeRights>
		<process public="1" set="method" line="82"><f a="x:platform">
	<c path="Xml"/>
	<c path="String"/>
	<x path="Void"/>
</f></process>
		<sortFields set="method" line="62"><f a="fl">
	<t path="Iterable"><t path="haxe.rtti.ClassField"/></t>
	<c path="List"><t path="haxe.rtti.ClassField"/></c>
</f></sortFields>
		<sort public="1" set="method" line="35"><f a="?l">
	<t path="haxe.rtti.TypeRoot"/>
	<x path="Void"/>
</f></sort>
		<curplatform><c path="String"/></curplatform>
		<root public="1"><t path="haxe.rtti.TypeRoot"/></root>
		<new public="1" set="method" line="31"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.unit.TestCase" params="" file="/usr/lib/haxe/std/haxe/unit/TestCase.hx">
		<assertEquals public="1" params="T" set="method" line="63"><f a="expected:actual:?c">
	<c path="assertEquals.T"/>
	<c path="assertEquals.T"/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></assertEquals>
		<assertFalse public="1" set="method" line="53"><f a="b:?c">
	<x path="Bool"/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></assertFalse>
		<assertTrue public="1" set="method" line="43"><f a="b:?c">
	<x path="Bool"/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></assertTrue>
		<print public="1" set="method" line="39"><f a="v">
	<d/>
	<x path="Void"/>
</f></print>
		<tearDown public="1" set="method" line="36"><f a=""><x path="Void"/></f></tearDown>
		<setup public="1" set="method" line="33"><f a=""><x path="Void"/></f></setup>
		<currentTest public="1"><c path="haxe.unit.TestStatus"/></currentTest>
		<new public="1" set="method" line="30"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":keepSub"/>
			<m n=":publicFields"/>
		</meta>
	</class>
	<class path="haxe.unit.TestResult" params="" file="/usr/lib/haxe/std/haxe/unit/TestResult.hx">
		<toString public="1" set="method" line="40"><f a=""><c path="String"/></f></toString>
		<add public="1" set="method" line="34"><f a="t">
	<c path="haxe.unit.TestStatus"/>
	<x path="Void"/>
</f></add>
		<success public="1" set="null"><x path="Bool"/></success>
		<m_tests><c path="List"><c path="haxe.unit.TestStatus"/></c></m_tests>
		<new public="1" set="method" line="29"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.unit.TestRunner" params="" file="/usr/lib/haxe/std/haxe/unit/TestRunner.hx">
		<tf line="32" static="1"><c path="flash.TextField"/></tf>
		<print public="1" set="dynamic" line="35" static="1"><f a="v">
	<d/>
	<x path="Void"/>
</f></print>
		<customTrace set="method" line="82" static="1"><f a="v:?p">
	<unknown/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></customTrace>
		<runCase set="method" line="104"><f a="t">
	<c path="haxe.unit.TestCase"/>
	<x path="Void"/>
</f></runCase>
		<run public="1" set="method" line="95"><f a=""><x path="Bool"/></f></run>
		<add public="1" set="method" line="91"><f a="c">
	<c path="haxe.unit.TestCase"/>
	<x path="Void"/>
</f></add>
		<cases><c path="List"><c path="haxe.unit.TestCase"/></c></cases>
		<result public="1" set="null"><c path="haxe.unit.TestResult"/></result>
		<new public="1" set="method" line="86"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.unit.TestStatus" params="" file="/usr/lib/haxe/std/haxe/unit/TestStatus.hx">
		<backtrace public="1"><c path="String"/></backtrace>
		<posInfos public="1"><t path="haxe.PosInfos"/></posInfos>
		<classname public="1"><c path="String"/></classname>
		<method public="1"><c path="String"/></method>
		<error public="1"><c path="String"/></error>
		<success public="1"><x path="Bool"/></success>
		<done public="1"><x path="Bool"/></done>
		<new public="1" set="method" line="36"><f a=""><x path="Void"/></f></new>
	</class>
	<typedef path="haxe.web.DispatchConfig" params="" file="/usr/lib/haxe/std/haxe/web/Dispatch.hx" module="haxe.web.Dispatch"><a>
	<rules><d/></rules>
	<obj><d/></obj>
</a></typedef>
	<typedef path="haxe.web.Lock" params="T" file="/usr/lib/haxe/std/haxe/web/Dispatch.hx" module="haxe.web.Dispatch"><c path="haxe.web.Lock.T"/></typedef>
	<enum path="haxe.web.MatchRule" params="" file="/usr/lib/haxe/std/haxe/web/Dispatch.hx" module="haxe.web.Dispatch">
		<MRString/>
		<MRSpod a="c:lock">
			<c path="String"/>
			<x path="Bool"/>
		</MRSpod>
		<MROpt a="r"><e path="haxe.web.MatchRule"/></MROpt>
		<MRInt/>
		<MRFloat/>
		<MRDispatch/>
		<MRBool/>
	</enum>
	<enum path="haxe.web.DispatchRule" params="" file="/usr/lib/haxe/std/haxe/web/Dispatch.hx" module="haxe.web.Dispatch">
		<DRMult a="r"><c path="Array"><e path="haxe.web.MatchRule"/></c></DRMult>
		<DRMeta a="r"><e path="haxe.web.DispatchRule"/></DRMeta>
		<DRMatch a="r"><e path="haxe.web.MatchRule"/></DRMatch>
		<DRArgs a="r:args:opt">
			<e path="haxe.web.DispatchRule"/>
			<c path="Array"><a>
	<rule><e path="haxe.web.MatchRule"/></rule>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
			<x path="Bool"/>
		</DRArgs>
	</enum>
	<enum path="haxe.web.DispatchError" params="" file="/usr/lib/haxe/std/haxe/web/Dispatch.hx" module="haxe.web.Dispatch">
		<DETooManyValues/>
		<DENotFound a="part"><c path="String"/></DENotFound>
		<DEMissingParam a="p"><c path="String"/></DEMissingParam>
		<DEMissing/>
		<DEInvalidValue/>
	</enum>
	<class path="haxe.web._Dispatch.Redirect" params="" file="/usr/lib/haxe/std/haxe/web/Dispatch.hx" private="1" module="haxe.web.Dispatch"><new public="1" set="method" line="63"><f a=""><x path="Void"/></f></new></class>
	<class path="haxe.web.Dispatch" params="" file="/usr/lib/haxe/std/haxe/web/Dispatch.hx">
		<GET_RULES static="1"><c path="Array"><c path="Array"><a>
	<rule><e path="haxe.web.MatchRule"/></rule>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c></c></GET_RULES>
		<make public="1" set="method" static="1"><f a="obj">
	<a/>
	<t path="haxe.web.DispatchConfig"/>
</f></make>
		<run public="1" set="method" static="1"><f a="url:params:obj">
	<c path="String"/>
	<c path="haxe.ds.StringMap"><c path="String"/></c>
	<a/>
	<x path="Void"/>
</f></run>
		<extractConfig set="method" line="441" static="1"><f a="obj">
	<d/>
	<t path="haxe.web.DispatchConfig"/>
</f></extractConfig>
		<loop set="method" line="209"><f a="args:r">
	<c path="Array"><d/></c>
	<e path="haxe.web.DispatchRule"/>
	<x path="Void"/>
</f></loop>
		<checkParams set="method" line="195"><f a="params:opt">
	<c path="Array"><a>
	<rule><e path="haxe.web.MatchRule"/></rule>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
	<x path="Bool"/>
	<a/>
</f></checkParams>
		<match set="method" line="150"><f a="v:r:opt">
	<c path="String"/>
	<e path="haxe.web.MatchRule"/>
	<x path="Bool"/>
	<d/>
</f></match>
		<runtimeGetParams public="1" set="method" line="144"><f a="cfgIndex">
	<x path="Int"/>
	<d/>
</f></runtimeGetParams>
		<redirect public="1" set="method" line="136"><f a="url:?params">
	<c path="String"/>
	<c path="haxe.ds.StringMap"><c path="String"/></c>
	<x path="Void"/>
</f></redirect>
		<runtimeDispatch public="1" set="method" line="108"><f a="cfg">
	<t path="haxe.web.DispatchConfig"/>
	<x path="Void"/>
</f></runtimeDispatch>
		<resolveName set="method" line="104"><f a="name">
	<c path="String"/>
	<c path="String"/>
</f></resolveName>
		<onMeta public="1" set="dynamic" line="101"><f a="v:args">
	<c path="String"/>
	<t path="Null"><c path="Array"><d/></c></t>
	<x path="Void"/>
</f></onMeta>
		<getParams public="1" set="method"><f a=""><d/></f></getParams>
		<dispatch public="1" set="method"><f a="obj">
	<a/>
	<x path="Void"/>
</f></dispatch>
		<subDispatch><x path="Bool"/></subDispatch>
		<cfg public="1"><t path="haxe.web.DispatchConfig"/></cfg>
		<name public="1"><c path="String"/></name>
		<params public="1"><c path="haxe.ds.StringMap"><c path="String"/></c></params>
		<parts public="1"><c path="Array"><c path="String"/></c></parts>
		<new public="1" set="method" line="75"><f a="url:params">
	<c path="String"/>
	<c path="haxe.ds.StringMap"><c path="String"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="haxe.xml.Filter" params="" file="/usr/lib/haxe/std/haxe/xml/Check.hx" module="haxe.xml.Check">
		<FReg a="matcher"><c path="EReg"/></FReg>
		<FInt/>
		<FEnum a="values"><c path="Array"><c path="String"/></c></FEnum>
		<FBool/>
	</enum>
	<enum path="haxe.xml.Attrib" params="" file="/usr/lib/haxe/std/haxe/xml/Check.hx" module="haxe.xml.Check"><Att a="name:?filter:?defvalue">
	<c path="String"/>
	<e path="haxe.xml.Filter"/>
	<c path="String"/>
</Att></enum>
	<enum path="haxe.xml.Rule" params="" file="/usr/lib/haxe/std/haxe/xml/Check.hx" module="haxe.xml.Check">
		<ROptional a="rule"><e path="haxe.xml.Rule"/></ROptional>
		<RNode a="name:?attribs:?childs">
			<c path="String"/>
			<c path="Array"><e path="haxe.xml.Attrib"/></c>
			<e path="haxe.xml.Rule"/>
		</RNode>
		<RMulti a="rule:?atLeastOne">
			<e path="haxe.xml.Rule"/>
			<x path="Bool"/>
		</RMulti>
		<RList a="rules:?ordered">
			<c path="Array"><e path="haxe.xml.Rule"/></c>
			<x path="Bool"/>
		</RList>
		<RData a="?filter"><e path="haxe.xml.Filter"/></RData>
		<RChoice a="choices"><c path="Array"><e path="haxe.xml.Rule"/></c></RChoice>
	</enum>
	<enum path="haxe.xml._Check.CheckResult" params="" file="/usr/lib/haxe/std/haxe/xml/Check.hx" private="1" module="haxe.xml.Check">
		<CMissingAttrib a="att:x">
			<c path="String"/>
			<c path="Xml"/>
		</CMissingAttrib>
		<CMissing a="r"><e path="haxe.xml.Rule"/></CMissing>
		<CMatch/>
		<CInvalidData a="x:f">
			<c path="Xml"/>
			<e path="haxe.xml.Filter"/>
		</CInvalidData>
		<CInvalidAttrib a="att:x:f">
			<c path="String"/>
			<c path="Xml"/>
			<e path="haxe.xml.Filter"/>
		</CInvalidAttrib>
		<CInElement a="x:r">
			<c path="Xml"/>
			<e path="haxe.xml._Check.CheckResult"/>
		</CInElement>
		<CExtraAttrib a="att:x">
			<c path="String"/>
			<c path="Xml"/>
		</CExtraAttrib>
		<CExtra a="x"><c path="Xml"/></CExtra>
		<CElementExpected a="name:x">
			<c path="String"/>
			<c path="Xml"/>
		</CElementExpected>
		<CDataExpected a="x"><c path="Xml"/></CDataExpected>
	</enum>
	<class path="haxe.xml.Check" params="" file="/usr/lib/haxe/std/haxe/xml/Check.hx">
		<blanks line="59" static="1"><c path="EReg"/></blanks>
		<isBlank set="method" line="61" static="1"><f a="x">
	<c path="Xml"/>
	<x path="Bool"/>
</f></isBlank>
		<filterMatch set="method" line="65" static="1"><f a="s:f">
	<c path="String"/>
	<e path="haxe.xml.Filter"/>
	<x path="Bool"/>
</f></filterMatch>
		<isNullable set="method" line="79" static="1"><f a="r">
	<e path="haxe.xml.Rule"/>
	<x path="Bool"/>
</f></isNullable>
		<check set="method" line="102" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<e path="haxe.xml._Check.CheckResult"/>
</f></check>
		<checkList set="method" line="167" static="1"><f a="it:r">
	<t path="Iterator"><c path="Xml"/></t>
	<e path="haxe.xml.Rule"/>
	<e path="haxe.xml._Check.CheckResult"/>
</f></checkList>
		<makeWhere set="method" line="240" static="1"><f a="path">
	<c path="Array"><c path="Xml"/></c>
	<c path="String"/>
</f></makeWhere>
		<makeString set="method" line="255" static="1"><f a="x">
	<c path="Xml"/>
	<c path="String"/>
</f></makeString>
		<makeRule set="method" line="264" static="1"><f a="r">
	<e path="haxe.xml.Rule"/>
	<c path="String"/>
</f></makeRule>
		<makeError set="method" line="275" static="1"><f a="m:?path">
	<e path="haxe.xml._Check.CheckResult"/>
	<c path="Array"><c path="Xml"/></c>
	<c path="String"/>
</f></makeError>
		<checkNode public="1" set="method" line="305" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<x path="Void"/>
</f></checkNode>
		<checkDocument public="1" set="method" line="312" static="1"><f a="x:r">
	<c path="Xml"/>
	<e path="haxe.xml.Rule"/>
	<x path="Void"/>
</f></checkDocument>
	</class>
	<class path="haxe.xml._Fast.NodeAccess" params="" file="/usr/lib/haxe/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<resolve public="1" set="method" line="32"><f a="name">
	<c path="String"/>
	<c path="haxe.xml.Fast"/>
</f></resolve>
		<__x><c path="Xml"/></__x>
		<new public="1" set="method" line="28"><f a="x">
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="haxe.xml.Fast"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.AttribAccess" params="" file="/usr/lib/haxe/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<resolve public="1" set="method" line="51"><f a="name">
	<c path="String"/>
	<c path="String"/>
</f></resolve>
		<__x><c path="Xml"/></__x>
		<new public="1" set="method" line="47"><f a="x">
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="String"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.HasAttribAccess" params="" file="/usr/lib/haxe/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<resolve public="1" set="method" line="70"><f a="name">
	<c path="String"/>
	<x path="Bool"/>
</f></resolve>
		<__x><c path="Xml"/></__x>
		<new public="1" set="method" line="66"><f a="x">
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><x path="Bool"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.HasNodeAccess" params="" file="/usr/lib/haxe/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<resolve public="1" set="method" line="86"><f a="name">
	<c path="String"/>
	<x path="Bool"/>
</f></resolve>
		<__x><c path="Xml"/></__x>
		<new public="1" set="method" line="82"><f a="x">
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><x path="Bool"/></haxe_dynamic>
	</class>
	<class path="haxe.xml._Fast.NodeListAccess" params="" file="/usr/lib/haxe/std/haxe/xml/Fast.hx" private="1" module="haxe.xml.Fast">
		<resolve public="1" set="method" line="100"><f a="name">
	<c path="String"/>
	<c path="List"><c path="haxe.xml.Fast"/></c>
</f></resolve>
		<__x><c path="Xml"/></__x>
		<new public="1" set="method" line="96"><f a="x">
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><c path="List"><c path="haxe.xml.Fast"/></c></haxe_dynamic>
	</class>
	<class path="haxe.xml.Fast" params="" file="/usr/lib/haxe/std/haxe/xml/Fast.hx">
		<get_elements set="method" line="164"><f a=""><a>
	<next><f a=""><c path="haxe.xml.Fast"/></f></next>
	<hasNext><f a=""><x path="Bool"/></f></hasNext>
</a></f></get_elements>
		<get_innerHTML set="method" line="157"><f a=""><c path="String"/></f></get_innerHTML>
		<get_innerData set="method" line="137"><f a=""><c path="String"/></f></get_innerData>
		<get_name set="method" line="133"><f a=""><c path="String"/></f></get_name>
		<elements public="1" get="accessor" set="null"><t path="Iterator"><c path="haxe.xml.Fast"/></t></elements>
		<hasNode public="1" set="null"><c path="haxe.xml._Fast.HasNodeAccess"/></hasNode>
		<has public="1" set="null"><c path="haxe.xml._Fast.HasAttribAccess"/></has>
		<att public="1" set="null"><c path="haxe.xml._Fast.AttribAccess"/></att>
		<nodes public="1" set="null"><c path="haxe.xml._Fast.NodeListAccess"/></nodes>
		<node public="1" set="null"><c path="haxe.xml._Fast.NodeAccess"/></node>
		<innerHTML public="1" get="accessor" set="null"><c path="String"/></innerHTML>
		<innerData public="1" get="accessor" set="null"><c path="String"/></innerData>
		<name public="1" get="accessor" set="null"><c path="String"/></name>
		<x public="1" set="null"><c path="Xml"/></x>
		<new public="1" set="method" line="122"><f a="x">
	<c path="Xml"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.xml._Parser.S" params="" file="/usr/lib/haxe/std/haxe/xml/Parser.hx" private="1" module="haxe.xml.Parser" extern="1">
		<IGNORE_SPACES public="1" get="inline" set="null" line="28" static="1"><x path="Int"/></IGNORE_SPACES>
		<BEGIN public="1" get="inline" set="null" line="29" static="1"><x path="Int"/></BEGIN>
		<BEGIN_NODE public="1" get="inline" set="null" line="30" static="1"><x path="Int"/></BEGIN_NODE>
		<TAG_NAME public="1" get="inline" set="null" line="31" static="1"><x path="Int"/></TAG_NAME>
		<BODY public="1" get="inline" set="null" line="32" static="1"><x path="Int"/></BODY>
		<ATTRIB_NAME public="1" get="inline" set="null" line="33" static="1"><x path="Int"/></ATTRIB_NAME>
		<EQUALS public="1" get="inline" set="null" line="34" static="1"><x path="Int"/></EQUALS>
		<ATTVAL_BEGIN public="1" get="inline" set="null" line="35" static="1"><x path="Int"/></ATTVAL_BEGIN>
		<ATTRIB_VAL public="1" get="inline" set="null" line="36" static="1"><x path="Int"/></ATTRIB_VAL>
		<CHILDS public="1" get="inline" set="null" line="37" static="1"><x path="Int"/></CHILDS>
		<CLOSE public="1" get="inline" set="null" line="38" static="1"><x path="Int"/></CLOSE>
		<WAIT_END public="1" get="inline" set="null" line="39" static="1"><x path="Int"/></WAIT_END>
		<WAIT_END_RET public="1" get="inline" set="null" line="40" static="1"><x path="Int"/></WAIT_END_RET>
		<PCDATA public="1" get="inline" set="null" line="41" static="1"><x path="Int"/></PCDATA>
		<HEADER public="1" get="inline" set="null" line="42" static="1"><x path="Int"/></HEADER>
		<COMMENT public="1" get="inline" set="null" line="43" static="1"><x path="Int"/></COMMENT>
		<DOCTYPE public="1" get="inline" set="null" line="44" static="1"><x path="Int"/></DOCTYPE>
		<CDATA public="1" get="inline" set="null" line="45" static="1"><x path="Int"/></CDATA>
		<ESCAPE public="1" get="inline" set="null" line="46" static="1"><x path="Int"/></ESCAPE>
	</class>
	<class path="haxe.xml.Parser" params="" file="/usr/lib/haxe/std/haxe/xml/Parser.hx">
		<escapes line="51" static="1"><c path="haxe.ds.StringMap"><c path="String"/></c></escapes>
		<parse public="1" set="method" line="62" static="1"><f a="str">
	<c path="String"/>
	<c path="Xml"/>
</f></parse>
		<doParse set="method" line="69" static="1"><f a="str:?p:?parent">
	<c path="String"/>
	<x path="Int"/>
	<c path="Xml"/>
	<x path="Int"/>
</f></doParse>
		<isValidChar get="inline" set="null" line="343" static="1"><f a="c">
	<x path="Int"/>
	<x path="Bool"/>
</f></isValidChar>
	</class>
	<class path="haxe.xml.Proxy" params="Const:T" file="/usr/lib/haxe/std/haxe/xml/Proxy.hx">
		<resolve public="1" set="method" line="50"><f a="k">
	<c path="String"/>
	<c path="haxe.xml.Proxy.T"/>
</f></resolve>
		<__f><f a="">
	<c path="String"/>
	<c path="haxe.xml.Proxy.T"/>
</f></__f>
		<new public="1" set="method" line="46"><f a="f">
	<f a="">
		<c path="String"/>
		<c path="haxe.xml.Proxy.T"/>
	</f>
	<x path="Void"/>
</f></new>
		<haxe_doc><![CDATA[This proxy can be inherited with an XML file name parameter.
	It will	only allow access to fields which corresponds to an "id" attribute
	value in the XML file :

	[
	class MyXml extends haxe.xml.Proxy<"my.xml",MyStructure> {
	}
	...
	var h = new haxe.ds.StringMap<MyStructure>();
	// ... fill h with "my.xml" content
	var m = new MyXml(h.get);
	trace(m.myNode.structField);
	// access to "myNode" is only possible
	// if you have an id="myNode" attribute
	// in your XML, and completion works as well
	]]]></haxe_doc>
	</class>
	<enum path="haxe.zip.ExtraField" params="" file="/usr/lib/haxe/std/haxe/zip/Entry.hx" module="haxe.zip.Entry">
		<FUtf8/>
		<FUnknown a="tag:bytes">
			<x path="Int"/>
			<c path="haxe.io.Bytes"/>
		</FUnknown>
		<FInfoZipUnicodePath a="name:crc">
			<c path="String"/>
			<x path="Int"/>
		</FInfoZipUnicodePath>
	</enum>
	<typedef path="haxe.zip.Entry" params="" file="/usr/lib/haxe/std/haxe/zip/Entry.hx"><a>
	<fileTime><c path="Date"/></fileTime>
	<fileSize><x path="Int"/></fileSize>
	<fileName><c path="String"/></fileName>
	<extraFields>
		<t path="Null"><c path="List"><e path="haxe.zip.ExtraField"/></c></t>
		<meta><m n=":optional"/></meta>
	</extraFields>
	<dataSize><x path="Int"/></dataSize>
	<data><t path="Null"><c path="haxe.io.Bytes"/></t></data>
	<crc32><t path="Null"><x path="Int"/></t></crc32>
	<compressed><x path="Bool"/></compressed>
</a></typedef>
	<enum path="haxe.zip.Huffman" params="" file="/usr/lib/haxe/std/haxe/zip/Huffman.hx">
		<NeedBits a="n:table">
			<x path="Int"/>
			<c path="Array"><e path="haxe.zip.Huffman"/></c>
		</NeedBits>
		<NeedBit a="left:right">
			<e path="haxe.zip.Huffman"/>
			<e path="haxe.zip.Huffman"/>
		</NeedBit>
		<Found a="i"><x path="Int"/></Found>
	</enum>
	<class path="haxe.zip.HuffTools" params="" file="/usr/lib/haxe/std/haxe/zip/Huffman.hx" module="haxe.zip.Huffman">
		<make public="1" set="method" line="86"><f a="lengths:pos:nlengths:maxbits">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
</f></make>
		<treeMake set="method" line="76"><f a="bits:maxbits:v:len">
	<c path="haxe.ds.IntMap"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
</f></treeMake>
		<treeWalk set="method" line="63"><f a="table:p:cd:d:t">
	<c path="Array"><e path="haxe.zip.Huffman"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
	<x path="Void"/>
</f></treeWalk>
		<treeCompress set="method" line="46"><f a="t">
	<e path="haxe.zip.Huffman"/>
	<e path="haxe.zip.Huffman"/>
</f></treeCompress>
		<treeDepth set="method" line="35"><f a="t">
	<e path="haxe.zip.Huffman"/>
	<x path="Int"/>
</f></treeDepth>
		<new public="1" set="method" line="32"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.zip._InflateImpl.Window" params="" file="/usr/lib/haxe/std/haxe/zip/InflateImpl.hx" private="1" module="haxe.zip.InflateImpl">
		<SIZE public="1" get="inline" set="null" line="28" static="1"><x path="Int"/></SIZE>
		<BUFSIZE public="1" get="inline" set="null" line="29" static="1"><x path="Int"/></BUFSIZE>
		<checksum public="1" set="method" line="69"><f a=""><c path="haxe.crypto.Adler32"/></f></checksum>
		<available public="1" set="method" line="65"><f a=""><x path="Int"/></f></available>
		<getLastChar public="1" set="method" line="61"><f a=""><x path="Int"/></f></getLastChar>
		<addByte public="1" set="method" line="55"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<addBytes public="1" set="method" line="49"><f a="b:p:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<slide public="1" set="method" line="41"><f a=""><x path="Void"/></f></slide>
		<crc><c path="haxe.crypto.Adler32"/></crc>
		<pos public="1"><x path="Int"/></pos>
		<buffer public="1"><c path="haxe.io.Bytes"/></buffer>
		<new public="1" set="method" line="35"><f a="hasCrc">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="haxe.zip._InflateImpl.State" params="" file="/usr/lib/haxe/std/haxe/zip/InflateImpl.hx" private="1" module="haxe.zip.InflateImpl">
		<Head/>
		<Flat/>
		<Done/>
		<DistOne/>
		<Dist/>
		<Crc/>
		<CData/>
		<Block/>
	</enum>
	<class path="haxe.zip.InflateImpl" params="" file="/usr/lib/haxe/std/haxe/zip/InflateImpl.hx">
		<LEN_EXTRA_BITS_TBL line="92" static="1"><c path="Array"><x path="Int"/></c></LEN_EXTRA_BITS_TBL>
		<LEN_BASE_VAL_TBL line="93" static="1"><c path="Array"><x path="Int"/></c></LEN_BASE_VAL_TBL>
		<DIST_EXTRA_BITS_TBL line="94" static="1"><c path="Array"><x path="Int"/></c></DIST_EXTRA_BITS_TBL>
		<DIST_BASE_VAL_TBL line="95" static="1"><c path="Array"><x path="Int"/></c></DIST_BASE_VAL_TBL>
		<CODE_LENGTHS_POS line="96" static="1"><c path="Array"><x path="Int"/></c></CODE_LENGTHS_POS>
		<FIXED_HUFFMAN line="114" static="1"><e path="haxe.zip.Huffman"/></FIXED_HUFFMAN>
		<run public="1" set="method" line="363" static="1"><f a="i:?bufsize">
	<c path="haxe.io.Input"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<inflateLoop set="method" line="253"><f a=""><x path="Bool"/></f></inflateLoop>
		<inflateLengths set="method" line="224"><f a="a:max">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></inflateLengths>
		<applyHuffman set="method" line="216"><f a="h">
	<e path="haxe.zip.Huffman"/>
	<x path="Int"/>
</f></applyHuffman>
		<addDist set="method" line="212"><f a="d:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addDist>
		<addDistOne set="method" line="206"><f a="n">
	<x path="Int"/>
	<x path="Void"/>
</f></addDistOne>
		<addByte set="method" line="199"><f a="b">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<addBytes set="method" line="192"><f a="b:p:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<resetBits set="method" line="187"><f a=""><x path="Void"/></f></resetBits>
		<getRevBits set="method" line="178"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getRevBits>
		<getBit set="method" line="167"><f a=""><x path="Bool"/></f></getBit>
		<getBits set="method" line="156"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getBits>
		<readBytes public="1" set="method" line="146"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<buildFixedHuffman set="method" line="136"><f a=""><e path="haxe.zip.Huffman"/></f></buildFixedHuffman>
		<window><c path="haxe.zip._InflateImpl.Window"/></window>
		<lengths><c path="Array"><x path="Int"/></c></lengths>
		<input><c path="haxe.io.Input"/></input>
		<outpos><x path="Int"/></outpos>
		<output><c path="haxe.io.Bytes"/></output>
		<needed><x path="Int"/></needed>
		<dist><x path="Int"/></dist>
		<len><x path="Int"/></len>
		<htools><c path="haxe.zip.HuffTools"/></htools>
		<huffdist><t path="Null"><e path="haxe.zip.Huffman"/></t></huffdist>
		<huffman><e path="haxe.zip.Huffman"/></huffman>
		<final><x path="Bool"/></final>
		<state><e path="haxe.zip._InflateImpl.State"/></state>
		<bits><x path="Int"/></bits>
		<nbits><x path="Int"/></nbits>
		<new public="1" set="method" line="116"><f a="i:?header:?crc">
	<c path="haxe.io.Input"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>A pure Haxe implementation of the ZLIB Inflate algorithm which allows reading compressed data without any platform-specific support.</haxe_doc>
	</class>
	<class path="haxe.zip.Reader" params="" file="/usr/lib/haxe/std/haxe/zip/Reader.hx">
		<readZip public="1" set="method" line="184" static="1"><f a="i">
	<c path="haxe.io.Input"/>
	<c path="List"><t path="haxe.zip.Entry"/></c>
</f></readZip>
		<unzip public="1" set="method" line="189" static="1"><f a="f">
	<t path="haxe.zip.Entry"/>
	<t path="Null"><c path="haxe.io.Bytes"/></t>
</f></unzip>
		<read public="1" set="method" line="116"><f a=""><c path="List"><t path="haxe.zip.Entry"/></c></f></read>
		<readEntryHeader public="1" set="method" line="75"><f a=""><t path="haxe.zip.Entry"/></f></readEntryHeader>
		<readExtraFields set="method" line="47"><f a="length">
	<x path="Int"/>
	<c path="List"><e path="haxe.zip.ExtraField"/></c>
</f></readExtraFields>
		<readZipDate set="method" line="35"><f a=""><c path="Date"/></f></readZipDate>
		<i><c path="haxe.io.Input"/></i>
		<new public="1" set="method" line="31"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.zip.Tools" params="" file="/usr/lib/haxe/std/haxe/zip/Tools.hx"><compress public="1" set="method" line="26" static="1"><f a="f:level">
	<t path="haxe.zip.Entry"/>
	<x path="Int"/>
	<x path="Void"/>
</f></compress></class>
	<class path="haxe.zip.Writer" params="" file="/usr/lib/haxe/std/haxe/zip/Writer.hx">
		<CENTRAL_DIRECTORY_RECORD_FIELDS_SIZE get="inline" set="null" line="33" static="1"><x path="Int"/></CENTRAL_DIRECTORY_RECORD_FIELDS_SIZE>
		<LOCAL_FILE_HEADER_FIELDS_SIZE get="inline" set="null" line="40" static="1"><x path="Int"/></LOCAL_FILE_HEADER_FIELDS_SIZE>
		<writeCDR public="1" set="method" line="129"><f a=""><x path="Void"/></f></writeCDR>
		<write public="1" set="method" line="121"><f a="files">
	<c path="List"><t path="haxe.zip.Entry"/></c>
	<x path="Void"/>
</f></write>
		<writeEntryHeader public="1" set="method" line="61"><f a="f">
	<t path="haxe.zip.Entry"/>
	<x path="Void"/>
</f></writeEntryHeader>
		<writeZipDate set="method" line="50"><f a="date">
	<c path="Date"/>
	<x path="Void"/>
</f></writeZipDate>
		<files><c path="List"><a>
	<size><x path="Int"/></size>
	<name><c path="String"/></name>
	<fields><c path="haxe.io.Bytes"/></fields>
	<date><c path="Date"/></date>
	<crc><x path="Int"/></crc>
	<compressed><x path="Bool"/></compressed>
	<clen><x path="Int"/></clen>
</a></c></files>
		<o><c path="haxe.io.Output"/></o>
		<new public="1" set="method" line="45"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
	</class>
</haxe>